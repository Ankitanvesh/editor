{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/language/json/jsonMode.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/format.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/parser.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/workerManager.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/languageFeatures.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/tokenization.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/edit.js"],"names":["__webpack_require__","r","__webpack_exports__","d","setupMode","_workerManager_js__WEBPACK_IMPORTED_MODULE_0__","_languageFeatures_js__WEBPACK_IMPORTED_MODULE_1__","_tokenization_js__WEBPACK_IMPORTED_MODULE_2__","defaults","disposables","client","push","worker","uris","_i","arguments","length","getLanguageServiceWorker","apply","languageId","monaco","languages","registerCompletionItemProvider","registerHoverProvider","registerDocumentSymbolProvider","registerDocumentFormattingEditProvider","registerDocumentRangeFormattingEditProvider","setTokensProvider","Object","setLanguageConfiguration","richEditConfiguration","registerColorProvider","registerFoldingRangeProvider","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","createScanner","text","ignoreTrivia","pos","len","value","tokenOffset","token","scanError","scanHexDigits","count","exact","digits","ch","charCodeAt","scanNext","code","isWhiteSpace","String","fromCharCode","isLineBreak","result","start","substring","ch_1","scanString","commentClosed","isDigit","end","scanNumber","isUnknownContentCharacter","setPosition","newPosition","getPosition","scan","getToken","getTokenValue","getTokenOffset","getTokenLength","getTokenError","format","isEOL","_scanner_js__WEBPACK_IMPORTED_MODULE_0__","documentText","range","options","initialIndentLevel","formatText","formatTextStart","rangeStart","rangeEnd","offset","endOffset","content","i","nChars","tabSize","charAt","Math","floor","computeIndentLevel","indentValue","eol","getEOL","lineBreak","indentLevel","insertSpaces","repeat","scanner","hasError","newLineAndIndent","editOperations","addEdit","startOffset","firstToken","firstTokenStart","firstTokenEnd","secondToken","replaceContent","s","indexOf","getLocation","parse","parseTree","findNodeAtLocation","getNodePath","getNodeValue","findNodeAtOffset","visit","stripComments","position","segments","earlyReturnException","previousNode","previousNodeInst","type","parent","isAtPropertyKey","setPreviousNode","colonOffset","onObjectBegin","onObjectProperty","name","onObjectEnd","pop","onArrayBegin","onArrayEnd","onLiteralValue","getLiteralNodeType","onSeparator","sep","last","e","path","matches","pattern","k","errors","currentProperty","currentParent","previousParents","onValue","Array","isArray","object","array","onError","error","children","ensurePropertyComplete","valueNode","root","node","path_1","segment","found","_a","_b","propertyNode","index","key","map","obj","create","prop","includeRightBound","contains","item","visitor","_scanner","toNoArgVisit","visitFunction","toOneArgVisit","arg","onComment","disallowComments","allowTrailingComma","handleError","skipUntilAfter","skipUntil","parseString","isValue","parseValue","needsComma","parseArray","parseObject","JSON","parseLiteral","replaceCh","kind","parts","replace","join","WorkerManager","_this","this","_defaults","_worker","_idleCheckInterval","setInterval","_checkIfIdle","_lastUsedTime","_configChangeListener","onDidChange","_stopWorker","prototype","dispose","_client","clearInterval","Date","now","_getClient","editor","createWebWorker","moduleId","label","createData","languageSettings","diagnosticsOptions","enableSchemaRequest","getProxy","resources","then","_","withSyncedResources","DiagnosticsAdapter","CompletionAdapter","HoverAdapter","DocumentSymbolAdapter","DocumentFormattingEditProvider","DocumentRangeFormattingEditProvider","DocumentColorAdapter","FoldingRangeAdapter","_deps_vscode_languageserver_types_main_js__WEBPACK_IMPORTED_MODULE_0__","Range","Uri","_languageId","_disposables","_listener","onModelAdd","model","handle","modeId","getModeId","uri","toString","onDidChangeContent","clearTimeout","setTimeout","_doValidate","onModelRemoved","setModelMarkers","uriStr","listener","onDidCreateModel","onWillDisposeModel","_resetSchema","onDidChangeModelLanguage","event","getModels","forEach","resource","resetSchema","doValidation","diagnostics","markers","diag","severity","toSeverity","startLineNumber","line","startColumn","character","endLineNumber","endColumn","message","source","getModel","undefined","err","console","lsSeverity","Error","MarkerSeverity","Warning","Information","Info","Hint","fromPosition","column","lineNumber","fromRange","toRange","toCompletionItemKind","mItemKind","CompletionItemKind","Text","Method","Function","Constructor","Field","Variable","Class","Interface","Module","Property","Unit","Value","Enum","Keyword","Snippet","Color","File","Reference","toTextEdit","textEdit","newText","defineProperty","get","enumerable","configurable","provideCompletionItems","context","getWordUntilPosition","doComplete","info","items","entry","insertText","sortText","filterText","documentation","detail","additionalTextEdits","insertTextFormat","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","isIncomplete","suggestions","toMarkdownString","thing","language","toMarkedStringArray","contents","provideHover","doHover","toSymbolKind","mKind","SymbolKind","Namespace","Package","Constant","Number","Boolean","provideDocumentSymbols","findDocumentSymbols","containerName","location","selectionRange","fromFormattingOptions","provideDocumentFormattingEdits","edits","provideDocumentRangeFormattingEdits","provideDocumentColors","findDocumentColors","infos","color","provideColorPresentations","getColorPresentations","presentations","presentation","provideFoldingRanges","ranges","startLine","endLine","Comment","FoldingRangeKind","Imports","Region","toFoldingRangeKind","Position","Location","ColorInformation","ColorPresentation","FoldingRange","DiagnosticRelatedInformation","DiagnosticSeverity","Diagnostic","Command","TextEdit","TextDocumentEdit","WorkspaceEdit","InsertTextFormat","is","candidate","Is","objectLiteral","number","one","two","three","four","defined","string","red","green","blue","alpha","typedArray","startCharacter","endCharacter","relatedInformation","title","command","args","insert","del","textDocument","VersionedTextDocumentIdentifier","changes","documentChanges","TextDocumentIdentifier","TextDocumentItem","MarkupKind","MarkupContent","CompletionItem","CompletionList","MarkedString","Hover","ParameterInformation","SignatureInformation","DocumentHighlightKind","DocumentHighlight","SymbolInformation","TextEditChangeImpl","delete","add","edit","all","clear","splice","WorkspaceChange","workspaceEdit","_textEditChanges","_workspaceEdit","textDocumentEdit","textEditChange","keys","getTextEditChange","version","PlainText","Markdown","Folder","EnumMember","Struct","Event","Operator","TypeParameter","fromPlainText","plainText","parameters","Read","Write","Key","Null","CodeActionKind","CodeActionContext","CodeAction","CodeLens","FormattingOptions","DocumentSymbol","deprecated","boolean","QuickFix","Refactor","RefactorExtract","RefactorInline","RefactorRewrite","Source","SourceOrganizeImports","only","commandOrEdit","data","DocumentLink","target","TextDocument","TextDocumentSaveReason","FullTextDocument","lineCount","func","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","mergeSort","compare","p","left","slice","right","leftIdx","rightIdx","ret","a","b","diff","lastModifiedOffset","Manual","AfterDelay","FocusOut","_uri","_version","_content","_lineOffsets","update","getLineOffsets","lineOffsets","isLineStart","max","min","low","high","mid","lineOffset","nextLineOffset","call","check","every","createTokenizationSupport","_deps_jsonc_parser_main_js__WEBPACK_IMPORTED_MODULE_0__","supportComments","getInitialState","JSONState","tokenize","state","offsetDelta","stopAtOffset","numberOfInsertedCharacters","adjustOffset","lastWasColon","tokens","endState","clone","substr","TOKEN_DELIM_OBJECT","TOKEN_DELIM_ARRAY","TOKEN_DELIM_COLON","TOKEN_DELIM_COMMA","TOKEN_VALUE_BOOLEAN","TOKEN_VALUE_NULL","TOKEN_VALUE_STRING","TOKEN_PROPERTY_NAME","TOKEN_VALUE_NUMBER","TOKEN_COMMENT_LINE","TOKEN_COMMENT_BLOCK","getStateData","startIndex","scopes","_state","equals","other","setStateData","_impl_scanner_js__WEBPACK_IMPORTED_MODULE_2__","_impl_parser_js__WEBPACK_IMPORTED_MODULE_3__","setProperty","applyEdit","_format_js__WEBPACK_IMPORTED_MODULE_0__","_parser_js__WEBPACK_IMPORTED_MODULE_1__","originalPath","formattingOptions","getInsertionIndex","lastSegment","existing","propertyIndex","removeBegin","removeEnd","previous","withFormatting","stringify","newProperty","removalIndex","toRemove","begin","edit_1"],"mappings":"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","file":"1.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nimport { WorkerManager } from './workerManager.js';\r\nimport * as languageFeatures from './languageFeatures.js';\r\nimport { createTokenizationSupport } from './tokenization.js';\r\nexport function setupMode(defaults) {\r\n    var disposables = [];\r\n    var client = new WorkerManager(defaults);\r\n    disposables.push(client);\r\n    var worker = function () {\r\n        var uris = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            uris[_i] = arguments[_i];\r\n        }\r\n        return client.getLanguageServiceWorker.apply(client, uris);\r\n    };\r\n    var languageId = defaults.languageId;\r\n    disposables.push(monaco.languages.registerCompletionItemProvider(languageId, new languageFeatures.CompletionAdapter(worker)));\r\n    disposables.push(monaco.languages.registerHoverProvider(languageId, new languageFeatures.HoverAdapter(worker)));\r\n    disposables.push(monaco.languages.registerDocumentSymbolProvider(languageId, new languageFeatures.DocumentSymbolAdapter(worker)));\r\n    disposables.push(monaco.languages.registerDocumentFormattingEditProvider(languageId, new languageFeatures.DocumentFormattingEditProvider(worker)));\r\n    disposables.push(monaco.languages.registerDocumentRangeFormattingEditProvider(languageId, new languageFeatures.DocumentRangeFormattingEditProvider(worker)));\r\n    disposables.push(new languageFeatures.DiagnosticsAdapter(languageId, worker, defaults));\r\n    disposables.push(monaco.languages.setTokensProvider(languageId, createTokenizationSupport(true)));\r\n    disposables.push(monaco.languages.setLanguageConfiguration(languageId, richEditConfiguration));\r\n    disposables.push(monaco.languages.registerColorProvider(languageId, new languageFeatures.DocumentColorAdapter(worker)));\r\n    disposables.push(monaco.languages.registerFoldingRangeProvider(languageId, new languageFeatures.FoldingRangeAdapter(worker)));\r\n}\r\nvar richEditConfiguration = {\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\[\\{\\]\\}\\:\\\"\\,\\s]+)/g,\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['/*', '*/']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}', notIn: ['string'] },\r\n        { open: '[', close: ']', notIn: ['string'] },\r\n        { open: '\"', close: '\"', notIn: ['string'] }\r\n    ]\r\n};\r\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia) {\n    if (ignoreTrivia === void 0) { ignoreTrivia = false; }\n    var pos = 0, len = text.length, value = '', tokenOffset = 0, token = 16 /* Unknown */, scanError = 0 /* None */;\n    function scanHexDigits(count, exact) {\n        var digits = 0;\n        var value = 0;\n        while (digits < count || !exact) {\n            var ch = text.charCodeAt(pos);\n            if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {\n                value = value * 16 + ch - 48 /* _0 */;\n            }\n            else if (ch >= 65 /* A */ && ch <= 70 /* F */) {\n                value = value * 16 + ch - 65 /* A */ + 10;\n            }\n            else if (ch >= 97 /* a */ && ch <= 102 /* f */) {\n                value = value * 16 + ch - 97 /* a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* Unknown */;\n        scanError = 0 /* None */;\n    }\n    function scanNumber() {\n        var start = pos;\n        if (text.charCodeAt(pos) === 48 /* _0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        var end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        var result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* UnexpectedEndOfString */;\n                break;\n            }\n            var ch = text.charCodeAt(pos);\n            if (ch === 34 /* doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                ch = text.charCodeAt(pos++);\n                switch (ch) {\n                    case 34 /* doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* slash */:\n                        result += '/';\n                        break;\n                    case 98 /* b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* u */:\n                        var ch_1 = scanHexDigits(4, true);\n                        if (ch_1 >= 0) {\n                            result += String.fromCharCode(ch_1);\n                        }\n                        else {\n                            scanError = 4 /* InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* None */;\n        tokenOffset = pos;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* EOF */;\n        }\n        var code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            return token = 14 /* LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* openBrace */:\n                pos++;\n                return token = 1 /* OpenBraceToken */;\n            case 125 /* closeBrace */:\n                pos++;\n                return token = 2 /* CloseBraceToken */;\n            case 91 /* openBracket */:\n                pos++;\n                return token = 3 /* OpenBracketToken */;\n            case 93 /* closeBracket */:\n                pos++;\n                return token = 4 /* CloseBracketToken */;\n            case 58 /* colon */:\n                pos++;\n                return token = 6 /* ColonToken */;\n            case 44 /* comma */:\n                pos++;\n                return token = 5 /* CommaToken */;\n            // strings\n            case 34 /* doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* StringLiteral */;\n            // comments\n            case 47 /* slash */:\n                var start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {\n                    pos += 2;\n                    var commentClosed = false;\n                    while (pos < len) {\n                        var ch = text.charCodeAt(pos);\n                        if (ch === 42 /* asterisk */ && (pos + 1 < len) && text.charCodeAt(pos + 1) === 47 /* slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n            // numbers\n            case 45 /* minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* _0 */:\n            case 49 /* _1 */:\n            case 50 /* _2 */:\n            case 51 /* _3 */:\n            case 52 /* _4 */:\n            case 53 /* _5 */:\n            case 54 /* _6 */:\n            case 55 /* _7 */:\n            case 56 /* _8 */:\n            case 57 /* _9 */:\n                value += scanNumber();\n                return token = 11 /* NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* TrueKeyword */;\n                        case 'false': return token = 9 /* FalseKeyword */;\n                        case 'null': return token = 7 /* NullKeyword */;\n                    }\n                    return token = 16 /* Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* closeBrace */:\n            case 93 /* closeBracket */:\n            case 123 /* openBrace */:\n            case 91 /* openBracket */:\n            case 34 /* doubleQuote */:\n            case 58 /* colon */:\n            case 44 /* comma */:\n            case 47 /* slash */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        var result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* LineCommentTrivia */ && result <= 15 /* Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: function () { return pos; },\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: function () { return token; },\n        getTokenValue: function () { return value; },\n        getTokenOffset: function () { return tokenOffset; },\n        getTokenLength: function () { return pos - tokenOffset; },\n        getTokenError: function () { return scanError; }\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ ||\n        ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ ||\n        ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;\n}\n//# sourceMappingURL=scanner.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\nexport function format(documentText, range, options) {\n    var initialIndentLevel;\n    var formatText;\n    var formatTextStart;\n    var rangeStart;\n    var rangeEnd;\n    if (range) {\n        rangeStart = range.offset;\n        rangeEnd = rangeStart + range.length;\n        formatTextStart = rangeStart;\n        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n            formatTextStart--;\n        }\n        var endOffset = rangeEnd;\n        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n            endOffset++;\n        }\n        formatText = documentText.substring(formatTextStart, endOffset);\n        initialIndentLevel = computeIndentLevel(formatText, options);\n    }\n    else {\n        formatText = documentText;\n        initialIndentLevel = 0;\n        formatTextStart = 0;\n        rangeStart = 0;\n        rangeEnd = documentText.length;\n    }\n    var eol = getEOL(options, documentText);\n    var lineBreak = false;\n    var indentLevel = 0;\n    var indentValue;\n    if (options.insertSpaces) {\n        indentValue = repeat(' ', options.tabSize || 4);\n    }\n    else {\n        indentValue = '\\t';\n    }\n    var scanner = createScanner(formatText, false);\n    var hasError = false;\n    function newLineAndIndent() {\n        return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n    }\n    function scanNext() {\n        var token = scanner.scan();\n        lineBreak = false;\n        while (token === 15 /* Trivia */ || token === 14 /* LineBreakTrivia */) {\n            lineBreak = lineBreak || (token === 14 /* LineBreakTrivia */);\n            token = scanner.scan();\n        }\n        hasError = token === 16 /* Unknown */ || scanner.getTokenError() !== 0 /* None */;\n        return token;\n    }\n    var editOperations = [];\n    function addEdit(text, startOffset, endOffset) {\n        if (!hasError && startOffset < rangeEnd && endOffset > rangeStart && documentText.substring(startOffset, endOffset) !== text) {\n            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n        }\n    }\n    var firstToken = scanNext();\n    if (firstToken !== 17 /* EOF */) {\n        var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n        var initialIndent = repeat(indentValue, initialIndentLevel);\n        addEdit(initialIndent, formatTextStart, firstTokenStart);\n    }\n    while (firstToken !== 17 /* EOF */) {\n        var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n        var secondToken = scanNext();\n        var replaceContent = '';\n        while (!lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n            // comments on the same line: keep them on the same line, but ignore them otherwise\n            var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(' ', firstTokenEnd, commentTokenStart);\n            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            replaceContent = secondToken === 12 /* LineCommentTrivia */ ? newLineAndIndent() : '';\n            secondToken = scanNext();\n        }\n        if (secondToken === 2 /* CloseBraceToken */) {\n            if (firstToken !== 1 /* OpenBraceToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else if (secondToken === 4 /* CloseBracketToken */) {\n            if (firstToken !== 3 /* OpenBracketToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else {\n            switch (firstToken) {\n                case 3 /* OpenBracketToken */:\n                case 1 /* OpenBraceToken */:\n                    indentLevel++;\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 5 /* CommaToken */:\n                case 12 /* LineCommentTrivia */:\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    if (lineBreak) {\n                        replaceContent = newLineAndIndent();\n                    }\n                    else {\n                        // symbol following comment on the same line: keep on same line, separate with ' '\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 6 /* ColonToken */:\n                    replaceContent = ' ';\n                    break;\n                case 10 /* StringLiteral */:\n                    if (secondToken === 6 /* ColonToken */) {\n                        replaceContent = '';\n                        break;\n                    }\n                // fall through\n                case 7 /* NullKeyword */:\n                case 8 /* TrueKeyword */:\n                case 9 /* FalseKeyword */:\n                case 11 /* NumericLiteral */:\n                case 2 /* CloseBraceToken */:\n                case 4 /* CloseBracketToken */:\n                    if (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */) {\n                        replaceContent = ' ';\n                    }\n                    else if (secondToken !== 5 /* CommaToken */ && secondToken !== 17 /* EOF */) {\n                        hasError = true;\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    hasError = true;\n                    break;\n            }\n            if (lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n                replaceContent = newLineAndIndent();\n            }\n        }\n        var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n        addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n        firstToken = secondToken;\n    }\n    return editOperations;\n}\nfunction repeat(s, count) {\n    var result = '';\n    for (var i = 0; i < count; i++) {\n        result += s;\n    }\n    return result;\n}\nfunction computeIndentLevel(content, options) {\n    var i = 0;\n    var nChars = 0;\n    var tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        var ch = content.charAt(i);\n        if (ch === ' ') {\n            nChars++;\n        }\n        else if (ch === '\\t') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n    for (var i = 0; i < text.length; i++) {\n        var ch = text.charAt(i);\n        if (ch === '\\r') {\n            if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                return '\\r\\n';\n            }\n            return '\\r';\n        }\n        else if (ch === '\\n') {\n            return '\\n';\n        }\n    }\n    return (options && options.eol) || '\\n';\n}\nexport function isEOL(text, offset) {\n    return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=format.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport function getLocation(text, position) {\n    var segments = []; // strings or numbers\n    var earlyReturnException = new Object();\n    var previousNode = void 0;\n    var previousNodeInst = {\n        value: {},\n        offset: 0,\n        length: 0,\n        type: 'object',\n        parent: void 0\n    };\n    var isAtPropertyKey = false;\n    function setPreviousNode(value, offset, length, type) {\n        previousNodeInst.value = value;\n        previousNodeInst.offset = offset;\n        previousNodeInst.length = length;\n        previousNodeInst.type = type;\n        previousNodeInst.colonOffset = void 0;\n        previousNode = previousNodeInst;\n    }\n    try {\n        visit(text, {\n            onObjectBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                isAtPropertyKey = position > offset;\n                segments.push(''); // push a placeholder (will be replaced)\n            },\n            onObjectProperty: function (name, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(name, offset, length, 'property');\n                segments[segments.length - 1] = name;\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onObjectEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onArrayBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.push(0);\n            },\n            onArrayEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onLiteralValue: function (value, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(value, offset, length, getLiteralNodeType(value));\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onSeparator: function (sep, offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                if (sep === ':' && previousNode && previousNode.type === 'property') {\n                    previousNode.colonOffset = offset;\n                    isAtPropertyKey = false;\n                    previousNode = void 0;\n                }\n                else if (sep === ',') {\n                    var last = segments[segments.length - 1];\n                    if (typeof last === 'number') {\n                        segments[segments.length - 1] = last + 1;\n                    }\n                    else {\n                        isAtPropertyKey = true;\n                        segments[segments.length - 1] = '';\n                    }\n                    previousNode = void 0;\n                }\n            }\n        });\n    }\n    catch (e) {\n        if (e !== earlyReturnException) {\n            throw e;\n        }\n    }\n    return {\n        path: segments,\n        previousNode: previousNode,\n        isAtPropertyKey: isAtPropertyKey,\n        matches: function (pattern) {\n            var k = 0;\n            for (var i = 0; k < pattern.length && i < segments.length; i++) {\n                if (pattern[k] === segments[i] || pattern[k] === '*') {\n                    k++;\n                }\n                else if (pattern[k] !== '**') {\n                    return false;\n                }\n            }\n            return k === pattern.length;\n        }\n    };\n}\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport function parse(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentProperty = null;\n    var currentParent = [];\n    var previousParents = [];\n    function onValue(value) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty) {\n            currentParent[currentProperty] = value;\n        }\n    }\n    var visitor = {\n        onObjectBegin: function () {\n            var object = {};\n            onValue(object);\n            previousParents.push(currentParent);\n            currentParent = object;\n            currentProperty = null;\n        },\n        onObjectProperty: function (name) {\n            currentProperty = name;\n        },\n        onObjectEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onArrayBegin: function () {\n            var array = [];\n            onValue(array);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onLiteralValue: onValue,\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    return currentParent[0];\n}\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport function parseTree(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentParent = { type: 'array', offset: -1, length: -1, children: [], parent: void 0 }; // artificial root\n    function ensurePropertyComplete(endOffset) {\n        if (currentParent.type === 'property') {\n            currentParent.length = endOffset - currentParent.offset;\n            currentParent = currentParent.parent;\n        }\n    }\n    function onValue(valueNode) {\n        currentParent.children.push(valueNode);\n        return valueNode;\n    }\n    var visitor = {\n        onObjectBegin: function (offset) {\n            currentParent = onValue({ type: 'object', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onObjectProperty: function (name, offset, length) {\n            currentParent = onValue({ type: 'property', offset: offset, length: -1, parent: currentParent, children: [] });\n            currentParent.children.push({ type: 'string', value: name, offset: offset, length: length, parent: currentParent });\n        },\n        onObjectEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onArrayBegin: function (offset, length) {\n            currentParent = onValue({ type: 'array', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onArrayEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onLiteralValue: function (value, offset, length) {\n            onValue({ type: getLiteralNodeType(value), offset: offset, length: length, parent: currentParent, value: value });\n            ensurePropertyComplete(offset + length);\n        },\n        onSeparator: function (sep, offset, length) {\n            if (currentParent.type === 'property') {\n                if (sep === ':') {\n                    currentParent.colonOffset = offset;\n                }\n                else if (sep === ',') {\n                    ensurePropertyComplete(offset);\n                }\n            }\n        },\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    var result = currentParent.children[0];\n    if (result) {\n        delete result.parent;\n    }\n    return result;\n}\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport function findNodeAtLocation(root, path) {\n    if (!root) {\n        return void 0;\n    }\n    var node = root;\n    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n        var segment = path_1[_i];\n        if (typeof segment === 'string') {\n            if (node.type !== 'object' || !Array.isArray(node.children)) {\n                return void 0;\n            }\n            var found = false;\n            for (var _a = 0, _b = node.children; _a < _b.length; _a++) {\n                var propertyNode = _b[_a];\n                if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment) {\n                    node = propertyNode.children[1];\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return void 0;\n            }\n        }\n        else {\n            var index = segment;\n            if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {\n                return void 0;\n            }\n            node = node.children[index];\n        }\n    }\n    return node;\n}\n/**\n * Gets the JSON path of the given JSON DOM node\n */\nexport function getNodePath(node) {\n    if (!node.parent || !node.parent.children) {\n        return [];\n    }\n    var path = getNodePath(node.parent);\n    if (node.parent.type === 'property') {\n        var key = node.parent.children[0].value;\n        path.push(key);\n    }\n    else if (node.parent.type === 'array') {\n        var index = node.parent.children.indexOf(node);\n        if (index !== -1) {\n            path.push(index);\n        }\n    }\n    return path;\n}\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport function getNodeValue(node) {\n    switch (node.type) {\n        case 'array':\n            return node.children.map(getNodeValue);\n        case 'object':\n            var obj = Object.create(null);\n            for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n                var prop = _a[_i];\n                var valueNode = prop.children[1];\n                if (valueNode) {\n                    obj[prop.children[0].value] = getNodeValue(valueNode);\n                }\n            }\n            return obj;\n        case 'null':\n        case 'string':\n        case 'number':\n        case 'boolean':\n            return node.value;\n        default:\n            return void 0;\n    }\n}\nexport function contains(node, offset, includeRightBound) {\n    if (includeRightBound === void 0) { includeRightBound = false; }\n    return (offset >= node.offset && offset < (node.offset + node.length)) || includeRightBound && (offset === (node.offset + node.length));\n}\n/**\n * Finds the most inner node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\nexport function findNodeAtOffset(node, offset, includeRightBound) {\n    if (includeRightBound === void 0) { includeRightBound = false; }\n    if (contains(node, offset, includeRightBound)) {\n        var children = node.children;\n        if (Array.isArray(children)) {\n            for (var i = 0; i < children.length && children[i].offset <= offset; i++) {\n                var item = findNodeAtOffset(children[i], offset, includeRightBound);\n                if (item) {\n                    return item;\n                }\n            }\n        }\n        return node;\n    }\n    return void 0;\n}\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport function visit(text, visitor, options) {\n    var _scanner = createScanner(text, false);\n    function toNoArgVisit(visitFunction) {\n        return visitFunction ? function () { return visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    function toOneArgVisit(visitFunction) {\n        return visitFunction ? function (arg) { return visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    var onObjectBegin = toNoArgVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisit(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisit(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisit(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\n    var disallowComments = options && options.disallowComments;\n    var allowTrailingComma = options && options.allowTrailingComma;\n    function scanNext() {\n        while (true) {\n            var token = _scanner.scan();\n            switch (_scanner.getTokenError()) {\n                case 4 /* InvalidUnicode */:\n                    handleError(14 /* InvalidUnicode */);\n                    break;\n                case 5 /* InvalidEscapeCharacter */:\n                    handleError(15 /* InvalidEscapeCharacter */);\n                    break;\n                case 3 /* UnexpectedEndOfNumber */:\n                    handleError(13 /* UnexpectedEndOfNumber */);\n                    break;\n                case 1 /* UnexpectedEndOfComment */:\n                    if (!disallowComments) {\n                        handleError(11 /* UnexpectedEndOfComment */);\n                    }\n                    break;\n                case 2 /* UnexpectedEndOfString */:\n                    handleError(12 /* UnexpectedEndOfString */);\n                    break;\n                case 6 /* InvalidCharacter */:\n                    handleError(16 /* InvalidCharacter */);\n                    break;\n            }\n            switch (token) {\n                case 12 /* LineCommentTrivia */:\n                case 13 /* BlockCommentTrivia */:\n                    if (disallowComments) {\n                        handleError(10 /* InvalidCommentToken */);\n                    }\n                    else {\n                        onComment();\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    handleError(1 /* InvalidSymbol */);\n                    break;\n                case 15 /* Trivia */:\n                case 14 /* LineBreakTrivia */:\n                    break;\n                default:\n                    return token;\n            }\n        }\n    }\n    function handleError(error, skipUntilAfter, skipUntil) {\n        if (skipUntilAfter === void 0) { skipUntilAfter = []; }\n        if (skipUntil === void 0) { skipUntil = []; }\n        onError(error);\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            var token = _scanner.getToken();\n            while (token !== 17 /* EOF */) {\n                if (skipUntilAfter.indexOf(token) !== -1) {\n                    scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token) !== -1) {\n                    break;\n                }\n                token = scanNext();\n            }\n        }\n    }\n    function parseString(isValue) {\n        var value = _scanner.getTokenValue();\n        if (isValue) {\n            onLiteralValue(value);\n        }\n        else {\n            onObjectProperty(value);\n        }\n        scanNext();\n        return true;\n    }\n    function parseLiteral() {\n        switch (_scanner.getToken()) {\n            case 11 /* NumericLiteral */:\n                var value = 0;\n                try {\n                    value = JSON.parse(_scanner.getTokenValue());\n                    if (typeof value !== 'number') {\n                        handleError(2 /* InvalidNumberFormat */);\n                        value = 0;\n                    }\n                }\n                catch (e) {\n                    handleError(2 /* InvalidNumberFormat */);\n                }\n                onLiteralValue(value);\n                break;\n            case 7 /* NullKeyword */:\n                onLiteralValue(null);\n                break;\n            case 8 /* TrueKeyword */:\n                onLiteralValue(true);\n                break;\n            case 9 /* FalseKeyword */:\n                onLiteralValue(false);\n                break;\n            default:\n                return false;\n        }\n        scanNext();\n        return true;\n    }\n    function parseProperty() {\n        if (_scanner.getToken() !== 10 /* StringLiteral */) {\n            handleError(3 /* PropertyNameExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            return false;\n        }\n        parseString(false);\n        if (_scanner.getToken() === 6 /* ColonToken */) {\n            onSeparator(':');\n            scanNext(); // consume colon\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n        }\n        else {\n            handleError(5 /* ColonExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n        }\n        return true;\n    }\n    function parseObject() {\n        onObjectBegin();\n        scanNext(); // consume open brace\n        var needsComma = false;\n        while (_scanner.getToken() !== 2 /* CloseBraceToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 2 /* CloseBraceToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseProperty()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onObjectEnd();\n        if (_scanner.getToken() !== 2 /* CloseBraceToken */) {\n            handleError(7 /* CloseBraceExpected */, [2 /* CloseBraceToken */], []);\n        }\n        else {\n            scanNext(); // consume close brace\n        }\n        return true;\n    }\n    function parseArray() {\n        onArrayBegin();\n        scanNext(); // consume open bracket\n        var needsComma = false;\n        while (_scanner.getToken() !== 4 /* CloseBracketToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 4 /* CloseBracketToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [4 /* CloseBracketToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onArrayEnd();\n        if (_scanner.getToken() !== 4 /* CloseBracketToken */) {\n            handleError(8 /* CloseBracketExpected */, [4 /* CloseBracketToken */], []);\n        }\n        else {\n            scanNext(); // consume close bracket\n        }\n        return true;\n    }\n    function parseValue() {\n        switch (_scanner.getToken()) {\n            case 3 /* OpenBracketToken */:\n                return parseArray();\n            case 1 /* OpenBraceToken */:\n                return parseObject();\n            case 10 /* StringLiteral */:\n                return parseString(true);\n            default:\n                return parseLiteral();\n        }\n    }\n    scanNext();\n    if (_scanner.getToken() === 17 /* EOF */) {\n        return true;\n    }\n    if (!parseValue()) {\n        handleError(4 /* ValueExpected */, [], []);\n        return false;\n    }\n    if (_scanner.getToken() !== 17 /* EOF */) {\n        handleError(9 /* EndOfFileExpected */, [], []);\n    }\n    return true;\n}\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport function stripComments(text, replaceCh) {\n    var _scanner = createScanner(text), parts = [], kind, offset = 0, pos;\n    do {\n        pos = _scanner.getPosition();\n        kind = _scanner.scan();\n        switch (kind) {\n            case 12 /* LineCommentTrivia */:\n            case 13 /* BlockCommentTrivia */:\n            case 17 /* EOF */:\n                if (offset !== pos) {\n                    parts.push(text.substring(offset, pos));\n                }\n                if (replaceCh !== void 0) {\n                    parts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n                }\n                offset = _scanner.getPosition();\n                break;\n        }\n    } while (kind !== 17 /* EOF */);\n    return parts.join('');\n}\nfunction getLiteralNodeType(value) {\n    switch (typeof value) {\n        case 'boolean': return 'boolean';\n        case 'number': return 'number';\n        case 'string': return 'string';\n        default: return 'null';\n    }\n}\n//# sourceMappingURL=parser.js.map","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nvar STOP_WHEN_IDLE_FOR = 2 * 60 * 1000; // 2min\r\nvar WorkerManager = /** @class */ (function () {\r\n    function WorkerManager(defaults) {\r\n        var _this = this;\r\n        this._defaults = defaults;\r\n        this._worker = null;\r\n        this._idleCheckInterval = setInterval(function () { return _this._checkIfIdle(); }, 30 * 1000);\r\n        this._lastUsedTime = 0;\r\n        this._configChangeListener = this._defaults.onDidChange(function () { return _this._stopWorker(); });\r\n    }\r\n    WorkerManager.prototype._stopWorker = function () {\r\n        if (this._worker) {\r\n            this._worker.dispose();\r\n            this._worker = null;\r\n        }\r\n        this._client = null;\r\n    };\r\n    WorkerManager.prototype.dispose = function () {\r\n        clearInterval(this._idleCheckInterval);\r\n        this._configChangeListener.dispose();\r\n        this._stopWorker();\r\n    };\r\n    WorkerManager.prototype._checkIfIdle = function () {\r\n        if (!this._worker) {\r\n            return;\r\n        }\r\n        var timePassedSinceLastUsed = Date.now() - this._lastUsedTime;\r\n        if (timePassedSinceLastUsed > STOP_WHEN_IDLE_FOR) {\r\n            this._stopWorker();\r\n        }\r\n    };\r\n    WorkerManager.prototype._getClient = function () {\r\n        this._lastUsedTime = Date.now();\r\n        if (!this._client) {\r\n            this._worker = monaco.editor.createWebWorker({\r\n                // module that exports the create() method and returns a `JSONWorker` instance\r\n                moduleId: 'vs/language/json/jsonWorker',\r\n                label: this._defaults.languageId,\r\n                // passed in to the create() method\r\n                createData: {\r\n                    languageSettings: this._defaults.diagnosticsOptions,\r\n                    languageId: this._defaults.languageId,\r\n                    enableSchemaRequest: this._defaults.diagnosticsOptions.enableSchemaRequest\r\n                }\r\n            });\r\n            this._client = this._worker.getProxy();\r\n        }\r\n        return this._client;\r\n    };\r\n    WorkerManager.prototype.getLanguageServiceWorker = function () {\r\n        var _this = this;\r\n        var resources = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            resources[_i] = arguments[_i];\r\n        }\r\n        var _client;\r\n        return this._getClient().then(function (client) {\r\n            _client = client;\r\n        }).then(function (_) {\r\n            return _this._worker.withSyncedResources(resources);\r\n        }).then(function (_) { return _client; });\r\n    };\r\n    return WorkerManager;\r\n}());\r\nexport { WorkerManager };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nimport * as ls from './_deps/vscode-languageserver-types/main.js';\r\nvar Uri = monaco.Uri;\r\nvar Range = monaco.Range;\r\n// --- diagnostics --- ---\r\nvar DiagnosticsAdapter = /** @class */ (function () {\r\n    function DiagnosticsAdapter(_languageId, _worker, defaults) {\r\n        var _this = this;\r\n        this._languageId = _languageId;\r\n        this._worker = _worker;\r\n        this._disposables = [];\r\n        this._listener = Object.create(null);\r\n        var onModelAdd = function (model) {\r\n            var modeId = model.getModeId();\r\n            if (modeId !== _this._languageId) {\r\n                return;\r\n            }\r\n            var handle;\r\n            _this._listener[model.uri.toString()] = model.onDidChangeContent(function () {\r\n                clearTimeout(handle);\r\n                handle = setTimeout(function () { return _this._doValidate(model.uri, modeId); }, 500);\r\n            });\r\n            _this._doValidate(model.uri, modeId);\r\n        };\r\n        var onModelRemoved = function (model) {\r\n            monaco.editor.setModelMarkers(model, _this._languageId, []);\r\n            var uriStr = model.uri.toString();\r\n            var listener = _this._listener[uriStr];\r\n            if (listener) {\r\n                listener.dispose();\r\n                delete _this._listener[uriStr];\r\n            }\r\n        };\r\n        this._disposables.push(monaco.editor.onDidCreateModel(onModelAdd));\r\n        this._disposables.push(monaco.editor.onWillDisposeModel(function (model) {\r\n            onModelRemoved(model);\r\n            _this._resetSchema(model.uri);\r\n        }));\r\n        this._disposables.push(monaco.editor.onDidChangeModelLanguage(function (event) {\r\n            onModelRemoved(event.model);\r\n            onModelAdd(event.model);\r\n            _this._resetSchema(event.model.uri);\r\n        }));\r\n        this._disposables.push(defaults.onDidChange(function (_) {\r\n            monaco.editor.getModels().forEach(function (model) {\r\n                if (model.getModeId() === _this._languageId) {\r\n                    onModelRemoved(model);\r\n                    onModelAdd(model);\r\n                }\r\n            });\r\n        }));\r\n        this._disposables.push({\r\n            dispose: function () {\r\n                monaco.editor.getModels().forEach(onModelRemoved);\r\n                for (var key in _this._listener) {\r\n                    _this._listener[key].dispose();\r\n                }\r\n            }\r\n        });\r\n        monaco.editor.getModels().forEach(onModelAdd);\r\n    }\r\n    DiagnosticsAdapter.prototype.dispose = function () {\r\n        this._disposables.forEach(function (d) { return d && d.dispose(); });\r\n        this._disposables = [];\r\n    };\r\n    DiagnosticsAdapter.prototype._resetSchema = function (resource) {\r\n        this._worker().then(function (worker) {\r\n            worker.resetSchema(resource.toString());\r\n        });\r\n    };\r\n    DiagnosticsAdapter.prototype._doValidate = function (resource, languageId) {\r\n        this._worker(resource).then(function (worker) {\r\n            return worker.doValidation(resource.toString()).then(function (diagnostics) {\r\n                var markers = diagnostics.map(function (d) { return toDiagnostics(resource, d); });\r\n                var model = monaco.editor.getModel(resource);\r\n                if (model.getModeId() === languageId) {\r\n                    monaco.editor.setModelMarkers(model, languageId, markers);\r\n                }\r\n            });\r\n        }).then(undefined, function (err) {\r\n            console.error(err);\r\n        });\r\n    };\r\n    return DiagnosticsAdapter;\r\n}());\r\nexport { DiagnosticsAdapter };\r\nfunction toSeverity(lsSeverity) {\r\n    switch (lsSeverity) {\r\n        case ls.DiagnosticSeverity.Error: return monaco.MarkerSeverity.Error;\r\n        case ls.DiagnosticSeverity.Warning: return monaco.MarkerSeverity.Warning;\r\n        case ls.DiagnosticSeverity.Information: return monaco.MarkerSeverity.Info;\r\n        case ls.DiagnosticSeverity.Hint: return monaco.MarkerSeverity.Hint;\r\n        default:\r\n            return monaco.MarkerSeverity.Info;\r\n    }\r\n}\r\nfunction toDiagnostics(resource, diag) {\r\n    var code = typeof diag.code === 'number' ? String(diag.code) : diag.code;\r\n    return {\r\n        severity: toSeverity(diag.severity),\r\n        startLineNumber: diag.range.start.line + 1,\r\n        startColumn: diag.range.start.character + 1,\r\n        endLineNumber: diag.range.end.line + 1,\r\n        endColumn: diag.range.end.character + 1,\r\n        message: diag.message,\r\n        code: code,\r\n        source: diag.source\r\n    };\r\n}\r\n// --- completion ------\r\nfunction fromPosition(position) {\r\n    if (!position) {\r\n        return void 0;\r\n    }\r\n    return { character: position.column - 1, line: position.lineNumber - 1 };\r\n}\r\nfunction fromRange(range) {\r\n    if (!range) {\r\n        return void 0;\r\n    }\r\n    return { start: { line: range.startLineNumber - 1, character: range.startColumn - 1 }, end: { line: range.endLineNumber - 1, character: range.endColumn - 1 } };\r\n}\r\nfunction toRange(range) {\r\n    if (!range) {\r\n        return void 0;\r\n    }\r\n    return new Range(range.start.line + 1, range.start.character + 1, range.end.line + 1, range.end.character + 1);\r\n}\r\nfunction toCompletionItemKind(kind) {\r\n    var mItemKind = monaco.languages.CompletionItemKind;\r\n    switch (kind) {\r\n        case ls.CompletionItemKind.Text: return mItemKind.Text;\r\n        case ls.CompletionItemKind.Method: return mItemKind.Method;\r\n        case ls.CompletionItemKind.Function: return mItemKind.Function;\r\n        case ls.CompletionItemKind.Constructor: return mItemKind.Constructor;\r\n        case ls.CompletionItemKind.Field: return mItemKind.Field;\r\n        case ls.CompletionItemKind.Variable: return mItemKind.Variable;\r\n        case ls.CompletionItemKind.Class: return mItemKind.Class;\r\n        case ls.CompletionItemKind.Interface: return mItemKind.Interface;\r\n        case ls.CompletionItemKind.Module: return mItemKind.Module;\r\n        case ls.CompletionItemKind.Property: return mItemKind.Property;\r\n        case ls.CompletionItemKind.Unit: return mItemKind.Unit;\r\n        case ls.CompletionItemKind.Value: return mItemKind.Value;\r\n        case ls.CompletionItemKind.Enum: return mItemKind.Enum;\r\n        case ls.CompletionItemKind.Keyword: return mItemKind.Keyword;\r\n        case ls.CompletionItemKind.Snippet: return mItemKind.Snippet;\r\n        case ls.CompletionItemKind.Color: return mItemKind.Color;\r\n        case ls.CompletionItemKind.File: return mItemKind.File;\r\n        case ls.CompletionItemKind.Reference: return mItemKind.Reference;\r\n    }\r\n    return mItemKind.Property;\r\n}\r\nfunction fromCompletionItemKind(kind) {\r\n    var mItemKind = monaco.languages.CompletionItemKind;\r\n    switch (kind) {\r\n        case mItemKind.Text: return ls.CompletionItemKind.Text;\r\n        case mItemKind.Method: return ls.CompletionItemKind.Method;\r\n        case mItemKind.Function: return ls.CompletionItemKind.Function;\r\n        case mItemKind.Constructor: return ls.CompletionItemKind.Constructor;\r\n        case mItemKind.Field: return ls.CompletionItemKind.Field;\r\n        case mItemKind.Variable: return ls.CompletionItemKind.Variable;\r\n        case mItemKind.Class: return ls.CompletionItemKind.Class;\r\n        case mItemKind.Interface: return ls.CompletionItemKind.Interface;\r\n        case mItemKind.Module: return ls.CompletionItemKind.Module;\r\n        case mItemKind.Property: return ls.CompletionItemKind.Property;\r\n        case mItemKind.Unit: return ls.CompletionItemKind.Unit;\r\n        case mItemKind.Value: return ls.CompletionItemKind.Value;\r\n        case mItemKind.Enum: return ls.CompletionItemKind.Enum;\r\n        case mItemKind.Keyword: return ls.CompletionItemKind.Keyword;\r\n        case mItemKind.Snippet: return ls.CompletionItemKind.Snippet;\r\n        case mItemKind.Color: return ls.CompletionItemKind.Color;\r\n        case mItemKind.File: return ls.CompletionItemKind.File;\r\n        case mItemKind.Reference: return ls.CompletionItemKind.Reference;\r\n    }\r\n    return ls.CompletionItemKind.Property;\r\n}\r\nfunction toTextEdit(textEdit) {\r\n    if (!textEdit) {\r\n        return void 0;\r\n    }\r\n    return {\r\n        range: toRange(textEdit.range),\r\n        text: textEdit.newText\r\n    };\r\n}\r\nvar CompletionAdapter = /** @class */ (function () {\r\n    function CompletionAdapter(_worker) {\r\n        this._worker = _worker;\r\n    }\r\n    Object.defineProperty(CompletionAdapter.prototype, \"triggerCharacters\", {\r\n        get: function () {\r\n            return [' ', ':'];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    CompletionAdapter.prototype.provideCompletionItems = function (model, position, context, token) {\r\n        var wordInfo = model.getWordUntilPosition(position);\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) {\r\n            return worker.doComplete(resource.toString(), fromPosition(position));\r\n        }).then(function (info) {\r\n            if (!info) {\r\n                return;\r\n            }\r\n            var items = info.items.map(function (entry) {\r\n                var item = {\r\n                    label: entry.label,\r\n                    insertText: entry.insertText || entry.label,\r\n                    sortText: entry.sortText,\r\n                    filterText: entry.filterText,\r\n                    documentation: entry.documentation,\r\n                    detail: entry.detail,\r\n                    kind: toCompletionItemKind(entry.kind),\r\n                };\r\n                if (entry.textEdit) {\r\n                    item.range = toRange(entry.textEdit.range);\r\n                    item.insertText = entry.textEdit.newText;\r\n                }\r\n                if (entry.additionalTextEdits) {\r\n                    item.additionalTextEdits = entry.additionalTextEdits.map(toTextEdit);\r\n                }\r\n                if (entry.insertTextFormat === ls.InsertTextFormat.Snippet) {\r\n                    item.insertTextRules = monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet;\r\n                }\r\n                return item;\r\n            });\r\n            return {\r\n                isIncomplete: info.isIncomplete,\r\n                suggestions: items\r\n            };\r\n        });\r\n    };\r\n    return CompletionAdapter;\r\n}());\r\nexport { CompletionAdapter };\r\nfunction isMarkupContent(thing) {\r\n    return thing && typeof thing === 'object' && typeof thing.kind === 'string';\r\n}\r\nfunction toMarkdownString(entry) {\r\n    if (typeof entry === 'string') {\r\n        return {\r\n            value: entry\r\n        };\r\n    }\r\n    if (isMarkupContent(entry)) {\r\n        if (entry.kind === 'plaintext') {\r\n            return {\r\n                value: entry.value.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&')\r\n            };\r\n        }\r\n        return {\r\n            value: entry.value\r\n        };\r\n    }\r\n    return { value: '```' + entry.language + '\\n' + entry.value + '\\n```\\n' };\r\n}\r\nfunction toMarkedStringArray(contents) {\r\n    if (!contents) {\r\n        return void 0;\r\n    }\r\n    if (Array.isArray(contents)) {\r\n        return contents.map(toMarkdownString);\r\n    }\r\n    return [toMarkdownString(contents)];\r\n}\r\n// --- hover ------\r\nvar HoverAdapter = /** @class */ (function () {\r\n    function HoverAdapter(_worker) {\r\n        this._worker = _worker;\r\n    }\r\n    HoverAdapter.prototype.provideHover = function (model, position, token) {\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) {\r\n            return worker.doHover(resource.toString(), fromPosition(position));\r\n        }).then(function (info) {\r\n            if (!info) {\r\n                return;\r\n            }\r\n            return {\r\n                range: toRange(info.range),\r\n                contents: toMarkedStringArray(info.contents)\r\n            };\r\n        });\r\n    };\r\n    return HoverAdapter;\r\n}());\r\nexport { HoverAdapter };\r\n// --- definition ------\r\nfunction toLocation(location) {\r\n    return {\r\n        uri: Uri.parse(location.uri),\r\n        range: toRange(location.range)\r\n    };\r\n}\r\n// --- document symbols ------\r\nfunction toSymbolKind(kind) {\r\n    var mKind = monaco.languages.SymbolKind;\r\n    switch (kind) {\r\n        case ls.SymbolKind.File: return mKind.Array;\r\n        case ls.SymbolKind.Module: return mKind.Module;\r\n        case ls.SymbolKind.Namespace: return mKind.Namespace;\r\n        case ls.SymbolKind.Package: return mKind.Package;\r\n        case ls.SymbolKind.Class: return mKind.Class;\r\n        case ls.SymbolKind.Method: return mKind.Method;\r\n        case ls.SymbolKind.Property: return mKind.Property;\r\n        case ls.SymbolKind.Field: return mKind.Field;\r\n        case ls.SymbolKind.Constructor: return mKind.Constructor;\r\n        case ls.SymbolKind.Enum: return mKind.Enum;\r\n        case ls.SymbolKind.Interface: return mKind.Interface;\r\n        case ls.SymbolKind.Function: return mKind.Function;\r\n        case ls.SymbolKind.Variable: return mKind.Variable;\r\n        case ls.SymbolKind.Constant: return mKind.Constant;\r\n        case ls.SymbolKind.String: return mKind.String;\r\n        case ls.SymbolKind.Number: return mKind.Number;\r\n        case ls.SymbolKind.Boolean: return mKind.Boolean;\r\n        case ls.SymbolKind.Array: return mKind.Array;\r\n    }\r\n    return mKind.Function;\r\n}\r\nvar DocumentSymbolAdapter = /** @class */ (function () {\r\n    function DocumentSymbolAdapter(_worker) {\r\n        this._worker = _worker;\r\n    }\r\n    DocumentSymbolAdapter.prototype.provideDocumentSymbols = function (model, token) {\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) { return worker.findDocumentSymbols(resource.toString()); }).then(function (items) {\r\n            if (!items) {\r\n                return;\r\n            }\r\n            return items.map(function (item) { return ({\r\n                name: item.name,\r\n                detail: '',\r\n                containerName: item.containerName,\r\n                kind: toSymbolKind(item.kind),\r\n                range: toRange(item.location.range),\r\n                selectionRange: toRange(item.location.range)\r\n            }); });\r\n        });\r\n    };\r\n    return DocumentSymbolAdapter;\r\n}());\r\nexport { DocumentSymbolAdapter };\r\nfunction fromFormattingOptions(options) {\r\n    return {\r\n        tabSize: options.tabSize,\r\n        insertSpaces: options.insertSpaces\r\n    };\r\n}\r\nvar DocumentFormattingEditProvider = /** @class */ (function () {\r\n    function DocumentFormattingEditProvider(_worker) {\r\n        this._worker = _worker;\r\n    }\r\n    DocumentFormattingEditProvider.prototype.provideDocumentFormattingEdits = function (model, options, token) {\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) {\r\n            return worker.format(resource.toString(), null, fromFormattingOptions(options)).then(function (edits) {\r\n                if (!edits || edits.length === 0) {\r\n                    return;\r\n                }\r\n                return edits.map(toTextEdit);\r\n            });\r\n        });\r\n    };\r\n    return DocumentFormattingEditProvider;\r\n}());\r\nexport { DocumentFormattingEditProvider };\r\nvar DocumentRangeFormattingEditProvider = /** @class */ (function () {\r\n    function DocumentRangeFormattingEditProvider(_worker) {\r\n        this._worker = _worker;\r\n    }\r\n    DocumentRangeFormattingEditProvider.prototype.provideDocumentRangeFormattingEdits = function (model, range, options, token) {\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) {\r\n            return worker.format(resource.toString(), fromRange(range), fromFormattingOptions(options)).then(function (edits) {\r\n                if (!edits || edits.length === 0) {\r\n                    return;\r\n                }\r\n                return edits.map(toTextEdit);\r\n            });\r\n        });\r\n    };\r\n    return DocumentRangeFormattingEditProvider;\r\n}());\r\nexport { DocumentRangeFormattingEditProvider };\r\nvar DocumentColorAdapter = /** @class */ (function () {\r\n    function DocumentColorAdapter(_worker) {\r\n        this._worker = _worker;\r\n    }\r\n    DocumentColorAdapter.prototype.provideDocumentColors = function (model, token) {\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) { return worker.findDocumentColors(resource.toString()); }).then(function (infos) {\r\n            if (!infos) {\r\n                return;\r\n            }\r\n            return infos.map(function (item) { return ({\r\n                color: item.color,\r\n                range: toRange(item.range)\r\n            }); });\r\n        });\r\n    };\r\n    DocumentColorAdapter.prototype.provideColorPresentations = function (model, info, token) {\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) { return worker.getColorPresentations(resource.toString(), info.color, fromRange(info.range)); }).then(function (presentations) {\r\n            if (!presentations) {\r\n                return;\r\n            }\r\n            return presentations.map(function (presentation) {\r\n                var item = {\r\n                    label: presentation.label,\r\n                };\r\n                if (presentation.textEdit) {\r\n                    item.textEdit = toTextEdit(presentation.textEdit);\r\n                }\r\n                if (presentation.additionalTextEdits) {\r\n                    item.additionalTextEdits = presentation.additionalTextEdits.map(toTextEdit);\r\n                }\r\n                return item;\r\n            });\r\n        });\r\n    };\r\n    return DocumentColorAdapter;\r\n}());\r\nexport { DocumentColorAdapter };\r\nvar FoldingRangeAdapter = /** @class */ (function () {\r\n    function FoldingRangeAdapter(_worker) {\r\n        this._worker = _worker;\r\n    }\r\n    FoldingRangeAdapter.prototype.provideFoldingRanges = function (model, context, token) {\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) { return worker.provideFoldingRanges(resource.toString(), context); }).then(function (ranges) {\r\n            if (!ranges) {\r\n                return;\r\n            }\r\n            return ranges.map(function (range) {\r\n                var result = {\r\n                    start: range.startLine + 1,\r\n                    end: range.endLine + 1\r\n                };\r\n                if (typeof range.kind !== 'undefined') {\r\n                    result.kind = toFoldingRangeKind(range.kind);\r\n                }\r\n                return result;\r\n            });\r\n        });\r\n    };\r\n    return FoldingRangeAdapter;\r\n}());\r\nexport { FoldingRangeAdapter };\r\nfunction toFoldingRangeKind(kind) {\r\n    switch (kind) {\r\n        case ls.FoldingRangeKind.Comment: return monaco.languages.FoldingRangeKind.Comment;\r\n        case ls.FoldingRangeKind.Imports: return monaco.languages.FoldingRangeKind.Imports;\r\n        case ls.FoldingRangeKind.Region: return monaco.languages.FoldingRangeKind.Region;\r\n    }\r\n    return void 0;\r\n}\r\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\n/**\n * The Position namespace provides helper functions to work with\n * [Position](#Position) literals.\n */\nexport var Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position's line.\n     * @param character The position's character.\n     */\n    function create(line, character) {\n        return { line: line, character: character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given liternal conforms to the [Position](#Position) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.objectLiteral(candidate) && Is.number(candidate.line) && Is.number(candidate.character);\n    }\n    Position.is = is;\n})(Position || (Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * [Range](#Range) literals.\n */\nexport var Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.number(one) && Is.number(two) && Is.number(three) && Is.number(four)) {\n            return { start: Position.create(one, two), end: Position.create(three, four) };\n        }\n        else if (Position.is(one) && Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error(\"Range#create called with invalid arguments[\" + one + \", \" + two + \", \" + three + \", \" + four + \"]\");\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Range](#Range) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n    }\n    Range.is = is;\n})(Range || (Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * [Location](#Location) literals.\n */\nexport var Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location's uri.\n     * @param range The location's range.\n     */\n    function create(uri, range) {\n        return { uri: uri, range: range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Location](#Location) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The Color namespace provides helper functions to work with\n * [Color](#Color) literals.\n */\nexport var Color;\n(function (Color) {\n    /**\n     * Creates a new Color literal.\n     */\n    function create(red, green, blue, alpha) {\n        return {\n            red: red,\n            green: green,\n            blue: blue,\n            alpha: alpha,\n        };\n    }\n    Color.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Color](#Color) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.number(candidate.red)\n            && Is.number(candidate.green)\n            && Is.number(candidate.blue)\n            && Is.number(candidate.alpha);\n    }\n    Color.is = is;\n})(Color || (Color = {}));\n/**\n * The ColorInformation namespace provides helper functions to work with\n * [ColorInformation](#ColorInformation) literals.\n */\nexport var ColorInformation;\n(function (ColorInformation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(range, color) {\n        return {\n            range: range,\n            color: color,\n        };\n    }\n    ColorInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Range.is(candidate.range) && Color.is(candidate.color);\n    }\n    ColorInformation.is = is;\n})(ColorInformation || (ColorInformation = {}));\n/**\n * The Color namespace provides helper functions to work with\n * [ColorPresentation](#ColorPresentation) literals.\n */\nexport var ColorPresentation;\n(function (ColorPresentation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(label, textEdit, additionalTextEdits) {\n        return {\n            label: label,\n            textEdit: textEdit,\n            additionalTextEdits: additionalTextEdits,\n        };\n    }\n    ColorPresentation.create = create;\n    /**\n     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.string(candidate.label)\n            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))\n            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\n    }\n    ColorPresentation.is = is;\n})(ColorPresentation || (ColorPresentation = {}));\n/**\n * Enum of known range kinds\n */\nexport var FoldingRangeKind;\n(function (FoldingRangeKind) {\n    /**\n     * Folding range for a comment\n     */\n    FoldingRangeKind[\"Comment\"] = \"comment\";\n    /**\n     * Folding range for a imports or includes\n     */\n    FoldingRangeKind[\"Imports\"] = \"imports\";\n    /**\n     * Folding range for a region (e.g. `#region`)\n     */\n    FoldingRangeKind[\"Region\"] = \"region\";\n})(FoldingRangeKind || (FoldingRangeKind = {}));\n/**\n * The folding range namespace provides helper functions to work with\n * [FoldingRange](#FoldingRange) literals.\n */\nexport var FoldingRange;\n(function (FoldingRange) {\n    /**\n     * Creates a new FoldingRange literal.\n     */\n    function create(startLine, endLine, startCharacter, endCharacter, kind) {\n        var result = {\n            startLine: startLine,\n            endLine: endLine\n        };\n        if (Is.defined(startCharacter)) {\n            result.startCharacter = startCharacter;\n        }\n        if (Is.defined(endCharacter)) {\n            result.endCharacter = endCharacter;\n        }\n        if (Is.defined(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    FoldingRange.create = create;\n    /**\n     * Checks whether the given literal conforms to the [FoldingRange](#FoldingRange) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.number(candidate.startLine) && Is.number(candidate.startLine)\n            && (Is.undefined(candidate.startCharacter) || Is.number(candidate.startCharacter))\n            && (Is.undefined(candidate.endCharacter) || Is.number(candidate.endCharacter))\n            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\n    }\n    FoldingRange.is = is;\n})(FoldingRange || (FoldingRange = {}));\n/**\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\n * [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) literals.\n */\nexport var DiagnosticRelatedInformation;\n(function (DiagnosticRelatedInformation) {\n    /**\n     * Creates a new DiagnosticRelatedInformation literal.\n     */\n    function create(location, message) {\n        return {\n            location: location,\n            message: message\n        };\n    }\n    DiagnosticRelatedInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\n    }\n    DiagnosticRelatedInformation.is = is;\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\n/**\n * The diagnostic's severity.\n */\nexport var DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * [Diagnostic](#Diagnostic) literals.\n */\nexport var Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source, relatedInformation) {\n        var result = { range: range, message: message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        if (Is.defined(relatedInformation)) {\n            result.relatedInformation = relatedInformation;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate)\n            && Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.number(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source))\n            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * [Command](#Command) literals.\n */\nexport var Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        var result = { title: title, command: command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Command](#Command) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nexport var TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range: range, newText: newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates a insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText: newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range: range, newText: '' };\n    }\n    TextEdit.del = del;\n    function is(value) {\n        var candidate = value;\n        return Is.objectLiteral(candidate)\n            && Is.string(candidate.newText)\n            && Range.is(candidate.range);\n    }\n    TextEdit.is = is;\n})(TextEdit || (TextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nexport var TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument: textDocument, edits: edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate)\n            && VersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nexport var WorkspaceEdit;\n(function (WorkspaceEdit) {\n    function is(value) {\n        var candidate = value;\n        return candidate &&\n            (candidate.changes !== void 0 || candidate.documentChanges !== void 0) &&\n            (candidate.documentChanges === void 0 || Is.typedArray(candidate.documentChanges, TextDocumentEdit.is));\n    }\n    WorkspaceEdit.is = is;\n})(WorkspaceEdit || (WorkspaceEdit = {}));\nvar TextEditChangeImpl = /** @class */ (function () {\n    function TextEditChangeImpl(edits) {\n        this.edits = edits;\n    }\n    TextEditChangeImpl.prototype.insert = function (position, newText) {\n        this.edits.push(TextEdit.insert(position, newText));\n    };\n    TextEditChangeImpl.prototype.replace = function (range, newText) {\n        this.edits.push(TextEdit.replace(range, newText));\n    };\n    TextEditChangeImpl.prototype.delete = function (range) {\n        this.edits.push(TextEdit.del(range));\n    };\n    TextEditChangeImpl.prototype.add = function (edit) {\n        this.edits.push(edit);\n    };\n    TextEditChangeImpl.prototype.all = function () {\n        return this.edits;\n    };\n    TextEditChangeImpl.prototype.clear = function () {\n        this.edits.splice(0, this.edits.length);\n    };\n    return TextEditChangeImpl;\n}());\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nvar WorkspaceChange = /** @class */ (function () {\n    function WorkspaceChange(workspaceEdit) {\n        var _this = this;\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                workspaceEdit.documentChanges.forEach(function (textDocumentEdit) {\n                    var textEditChange = new TextEditChangeImpl(textDocumentEdit.edits);\n                    _this._textEditChanges[textDocumentEdit.textDocument.uri] = textEditChange;\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach(function (key) {\n                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    _this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n    }\n    Object.defineProperty(WorkspaceChange.prototype, \"edit\", {\n        /**\n         * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal\n         * use to be returned from a workspace edit operation like rename.\n         */\n        get: function () {\n            return this._workspaceEdit;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WorkspaceChange.prototype.getTextEditChange = function (key) {\n        if (VersionedTextDocumentIdentifier.is(key)) {\n            if (!this._workspaceEdit) {\n                this._workspaceEdit = {\n                    documentChanges: []\n                };\n            }\n            if (!this._workspaceEdit.documentChanges) {\n                throw new Error('Workspace edit is not configured for versioned document changes.');\n            }\n            var textDocument = key;\n            var result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                var edits = [];\n                var textDocumentEdit = {\n                    textDocument: textDocument,\n                    edits: edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            if (!this._workspaceEdit) {\n                this._workspaceEdit = {\n                    changes: Object.create(null)\n                };\n            }\n            if (!this._workspaceEdit.changes) {\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\n            }\n            var result = this._textEditChanges[key];\n            if (!result) {\n                var edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    };\n    return WorkspaceChange;\n}());\nexport { WorkspaceChange };\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.\n */\nexport var TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     */\n    function create(uri) {\n        return { uri: uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.\n */\nexport var VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param uri The document's text.\n     */\n    function create(uri, version) {\n        return { uri: uri, version: version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.number(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * [TextDocumentItem](#TextDocumentItem) literals.\n */\nexport var TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document's uri.\n     * @param languageId The document's language identifier.\n     * @param version The document's version number.\n     * @param text The document's text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri: uri, languageId: languageId, version: version, text: text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.number(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nexport var MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = 'plaintext';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = 'markdown';\n})(MarkupKind || (MarkupKind = {}));\n(function (MarkupKind) {\n    /**\n     * Checks whether the given value is a value of the [MarkupKind](#MarkupKind) type.\n     */\n    function is(value) {\n        var candidate = value;\n        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\n    }\n    MarkupKind.is = is;\n})(MarkupKind || (MarkupKind = {}));\nexport var MarkupContent;\n(function (MarkupContent) {\n    /**\n     * Checks whether the given value conforms to the [MarkupContent](#MarkupContent) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\n    }\n    MarkupContent.is = is;\n})(MarkupContent || (MarkupContent = {}));\n/**\n * The kind of a completion entry.\n */\nexport var CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nexport var InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/snippet/common/snippet.md\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nexport var CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item's label\n     */\n    function create(label) {\n        return { label: label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nexport var CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nexport var MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n    /**\n     * Checks whether the given value conforms to the [MarkedString](#MarkedString) type.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));\n    }\n    MarkedString.is = is;\n})(MarkedString || (MarkedString = {}));\nexport var Hover;\n(function (Hover) {\n    /**\n     * Checks whether the given value conforms to the [Hover](#Hover) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||\n            MarkedString.is(candidate.contents) ||\n            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === void 0 || Range.is(value.range));\n    }\n    Hover.is = is;\n})(Hover || (Hover = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * [ParameterInformation](#ParameterInformation) literals.\n */\nexport var ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label: label, documentation: documentation } : { label: label };\n    }\n    ParameterInformation.create = create;\n    ;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * [SignatureInformation](#SignatureInformation) literals.\n */\nexport var SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation) {\n        var parameters = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            parameters[_i - 2] = arguments[_i];\n        }\n        var result = { label: label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * [DocumentHighlight](#DocumentHighlight) literals.\n */\nexport var DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     */\n    function create(range, kind) {\n        var result = { range: range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nexport var SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\nexport var SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol, defaults to the current document.\n     * @param containerName The name of the symbol containing the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        var result = {\n            name: name,\n            kind: kind,\n            location: { uri: uri, range: range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\n/**\n * Represents programming constructs like variables, classes, interfaces etc.\n * that appear in a document. Document symbols can be hierarchical and they\n * have two ranges: one that encloses its definition and one that points to\n * its most interesting range, e.g. the range of an identifier.\n */\nvar DocumentSymbol = /** @class */ (function () {\n    function DocumentSymbol() {\n    }\n    return DocumentSymbol;\n}());\nexport { DocumentSymbol };\n(function (DocumentSymbol) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param detail The detail of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the symbol.\n     * @param selectionRange The selectionRange of the symbol.\n     * @param children Children of the symbol.\n     */\n    function create(name, detail, kind, range, selectionRange, children) {\n        var result = {\n            name: name,\n            detail: detail,\n            kind: kind,\n            range: range,\n            selectionRange: selectionRange\n        };\n        if (children !== void 0) {\n            result.children = children;\n        }\n        return result;\n    }\n    DocumentSymbol.create = create;\n    /**\n     * Checks whether the given literal conforms to the [DocumentSymbol](#DocumentSymbol) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return candidate &&\n            Is.string(candidate.name) && Is.number(candidate.kind) &&\n            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&\n            (candidate.detail === void 0 || Is.string(candidate.detail)) &&\n            (candidate.deprecated === void 0 || Is.boolean(candidate.deprecated)) &&\n            (candidate.children === void 0 || Array.isArray(candidate.children));\n    }\n    DocumentSymbol.is = is;\n})(DocumentSymbol || (DocumentSymbol = {}));\n/**\n * A set of predefined code action kinds\n */\nexport var CodeActionKind;\n(function (CodeActionKind) {\n    /**\n     * Base kind for quickfix actions: 'quickfix'\n     */\n    CodeActionKind.QuickFix = 'quickfix';\n    /**\n     * Base kind for refactoring actions: 'refactor'\n     */\n    CodeActionKind.Refactor = 'refactor';\n    /**\n     * Base kind for refactoring extraction actions: 'refactor.extract'\n     *\n     * Example extract actions:\n     *\n     * - Extract method\n     * - Extract function\n     * - Extract variable\n     * - Extract interface from class\n     * - ...\n     */\n    CodeActionKind.RefactorExtract = 'refactor.extract';\n    /**\n     * Base kind for refactoring inline actions: 'refactor.inline'\n     *\n     * Example inline actions:\n     *\n     * - Inline function\n     * - Inline variable\n     * - Inline constant\n     * - ...\n     */\n    CodeActionKind.RefactorInline = 'refactor.inline';\n    /**\n     * Base kind for refactoring rewrite actions: 'refactor.rewrite'\n     *\n     * Example rewrite actions:\n     *\n     * - Convert JavaScript function to class\n     * - Add or remove parameter\n     * - Encapsulate field\n     * - Make method static\n     * - Move method to base class\n     * - ...\n     */\n    CodeActionKind.RefactorRewrite = 'refactor.rewrite';\n    /**\n     * Base kind for source actions: `source`\n     *\n     * Source code actions apply to the entire file.\n     */\n    CodeActionKind.Source = 'source';\n    /**\n     * Base kind for an organize imports source action: `source.organizeImports`\n     */\n    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';\n})(CodeActionKind || (CodeActionKind = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * [CodeActionContext](#CodeActionContext) literals.\n */\nexport var CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics, only) {\n        var result = { diagnostics: diagnostics };\n        if (only !== void 0 && only !== null) {\n            result.only = only;\n        }\n        return result;\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === void 0 || Is.typedArray(candidate.only, Is.string));\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\nexport var CodeAction;\n(function (CodeAction) {\n    function create(title, commandOrEdit, kind) {\n        var result = { title: title };\n        if (Command.is(commandOrEdit)) {\n            result.command = commandOrEdit;\n        }\n        else {\n            result.edit = commandOrEdit;\n        }\n        if (kind !== void null) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    CodeAction.create = create;\n    function is(value) {\n        var candidate = value;\n        return candidate && Is.string(candidate.title) &&\n            (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&\n            (candidate.kind === void 0 || Is.string(candidate.kind)) &&\n            (candidate.edit !== void 0 || candidate.command !== void 0) &&\n            (candidate.command === void 0 || Command.is(candidate.command)) &&\n            (candidate.edit === void 0 || WorkspaceEdit.is(candidate.edit));\n    }\n    CodeAction.is = is;\n})(CodeAction || (CodeAction = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * [CodeLens](#CodeLens) literals.\n */\nexport var CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        var result = { range: range };\n        if (Is.defined(data))\n            result.data = data;\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * [FormattingOptions](#FormattingOptions) literals.\n */\nexport var FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize: tabSize, insertSpaces: insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.number(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * A document link is a range in a text document that links to an internal or external resource, like another\n * text document or a web site.\n */\nvar DocumentLink = /** @class */ (function () {\n    function DocumentLink() {\n    }\n    return DocumentLink;\n}());\nexport { DocumentLink };\n/**\n * The DocumentLink namespace provides helper functions to work with\n * [DocumentLink](#DocumentLink) literals.\n */\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target, data) {\n        return { range: range, target: target, data: data };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the [DocumentLink](#DocumentLink) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\nexport var EOL = ['\\n', '\\r\\n', '\\r'];\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document's uri.\n     * @param languageId  The document's language Id.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.number(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        var text = document.getText();\n        var sortedEdits = mergeSort(edits, function (a, b) {\n            var diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        var lastModifiedOffset = text.length;\n        for (var i = sortedEdits.length - 1; i >= 0; i--) {\n            var e = sortedEdits[i];\n            var startOffset = document.offsetAt(e.range.start);\n            var endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error('Ovelapping edit');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        var p = (data.length / 2) | 0;\n        var left = data.slice(0, p);\n        var right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        var leftIdx = 0;\n        var rightIdx = 0;\n        var i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            var ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * Represents reasons why a text document is saved.\n */\nexport var TextDocumentSaveReason;\n(function (TextDocumentSaveReason) {\n    /**\n     * Manually triggered, e.g. by the user pressing save, by starting debugging,\n     * or by an API call.\n     */\n    TextDocumentSaveReason.Manual = 1;\n    /**\n     * Automatic after a delay.\n     */\n    TextDocumentSaveReason.AfterDelay = 2;\n    /**\n     * When the editor lost focus.\n     */\n    TextDocumentSaveReason.FocusOut = 3;\n})(TextDocumentSaveReason || (TextDocumentSaveReason = {}));\nvar FullTextDocument = /** @class */ (function () {\n    function FullTextDocument(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = null;\n    }\n    Object.defineProperty(FullTextDocument.prototype, \"uri\", {\n        get: function () {\n            return this._uri;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, \"languageId\", {\n        get: function () {\n            return this._languageId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, \"version\", {\n        get: function () {\n            return this._version;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FullTextDocument.prototype.getText = function (range) {\n        if (range) {\n            var start = this.offsetAt(range.start);\n            var end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    };\n    FullTextDocument.prototype.update = function (event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = null;\n    };\n    FullTextDocument.prototype.getLineOffsets = function () {\n        if (this._lineOffsets === null) {\n            var lineOffsets = [];\n            var text = this._content;\n            var isLineStart = true;\n            for (var i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                var ch = text.charAt(i);\n                isLineStart = (ch === '\\r' || ch === '\\n');\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    };\n    FullTextDocument.prototype.positionAt = function (offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        var lineOffsets = this.getLineOffsets();\n        var low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return Position.create(0, offset);\n        }\n        while (low < high) {\n            var mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        var line = low - 1;\n        return Position.create(line, offset - lineOffsets[line]);\n    };\n    FullTextDocument.prototype.offsetAt = function (position) {\n        var lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        var lineOffset = lineOffsets[position.line];\n        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    };\n    Object.defineProperty(FullTextDocument.prototype, \"lineCount\", {\n        get: function () {\n            return this.getLineOffsets().length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FullTextDocument;\n}());\nvar Is;\n(function (Is) {\n    var toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== 'undefined';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === 'undefined';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === '[object String]';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === '[object Number]';\n    }\n    Is.number = number;\n    function func(value) {\n        return toString.call(value) === '[object Function]';\n    }\n    Is.func = func;\n    function objectLiteral(value) {\n        // Strictly speaking class instances pass this check as well. Since the LSP\n        // doesn't use classes we ignore this for now. If we do we need to add something\n        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\n        return value !== null && typeof value === 'object';\n    }\n    Is.objectLiteral = objectLiteral;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nimport * as json from './_deps/jsonc-parser/main.js';\r\nexport function createTokenizationSupport(supportComments) {\r\n    return {\r\n        getInitialState: function () { return new JSONState(null, null, false); },\r\n        tokenize: function (line, state, offsetDelta, stopAtOffset) { return tokenize(supportComments, line, state, offsetDelta, stopAtOffset); }\r\n    };\r\n}\r\nexport var TOKEN_DELIM_OBJECT = 'delimiter.bracket.json';\r\nexport var TOKEN_DELIM_ARRAY = 'delimiter.array.json';\r\nexport var TOKEN_DELIM_COLON = 'delimiter.colon.json';\r\nexport var TOKEN_DELIM_COMMA = 'delimiter.comma.json';\r\nexport var TOKEN_VALUE_BOOLEAN = 'keyword.json';\r\nexport var TOKEN_VALUE_NULL = 'keyword.json';\r\nexport var TOKEN_VALUE_STRING = 'string.value.json';\r\nexport var TOKEN_VALUE_NUMBER = 'number.json';\r\nexport var TOKEN_PROPERTY_NAME = 'string.key.json';\r\nexport var TOKEN_COMMENT_BLOCK = 'comment.block.json';\r\nexport var TOKEN_COMMENT_LINE = 'comment.line.json';\r\nvar JSONState = /** @class */ (function () {\r\n    function JSONState(state, scanError, lastWasColon) {\r\n        this._state = state;\r\n        this.scanError = scanError;\r\n        this.lastWasColon = lastWasColon;\r\n    }\r\n    JSONState.prototype.clone = function () {\r\n        return new JSONState(this._state, this.scanError, this.lastWasColon);\r\n    };\r\n    JSONState.prototype.equals = function (other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        if (!other || !(other instanceof JSONState)) {\r\n            return false;\r\n        }\r\n        return this.scanError === other.scanError &&\r\n            this.lastWasColon === other.lastWasColon;\r\n    };\r\n    JSONState.prototype.getStateData = function () {\r\n        return this._state;\r\n    };\r\n    JSONState.prototype.setStateData = function (state) {\r\n        this._state = state;\r\n    };\r\n    return JSONState;\r\n}());\r\nfunction tokenize(comments, line, state, offsetDelta, stopAtOffset) {\r\n    if (offsetDelta === void 0) { offsetDelta = 0; }\r\n    // handle multiline strings and block comments\r\n    var numberOfInsertedCharacters = 0, adjustOffset = false;\r\n    switch (state.scanError) {\r\n        case 2 /* UnexpectedEndOfString */:\r\n            line = '\"' + line;\r\n            numberOfInsertedCharacters = 1;\r\n            break;\r\n        case 1 /* UnexpectedEndOfComment */:\r\n            line = '/*' + line;\r\n            numberOfInsertedCharacters = 2;\r\n            break;\r\n    }\r\n    var scanner = json.createScanner(line), kind, ret, lastWasColon = state.lastWasColon;\r\n    ret = {\r\n        tokens: [],\r\n        endState: state.clone()\r\n    };\r\n    while (true) {\r\n        var offset = offsetDelta + scanner.getPosition(), type = '';\r\n        kind = scanner.scan();\r\n        if (kind === 17 /* EOF */) {\r\n            break;\r\n        }\r\n        // Check that the scanner has advanced\r\n        if (offset === offsetDelta + scanner.getPosition()) {\r\n            throw new Error('Scanner did not advance, next 3 characters are: ' + line.substr(scanner.getPosition(), 3));\r\n        }\r\n        // In case we inserted /* or \" character, we need to\r\n        // adjust the offset of all tokens (except the first)\r\n        if (adjustOffset) {\r\n            offset -= numberOfInsertedCharacters;\r\n        }\r\n        adjustOffset = numberOfInsertedCharacters > 0;\r\n        // brackets and type\r\n        switch (kind) {\r\n            case 1 /* OpenBraceToken */:\r\n                type = TOKEN_DELIM_OBJECT;\r\n                lastWasColon = false;\r\n                break;\r\n            case 2 /* CloseBraceToken */:\r\n                type = TOKEN_DELIM_OBJECT;\r\n                lastWasColon = false;\r\n                break;\r\n            case 3 /* OpenBracketToken */:\r\n                type = TOKEN_DELIM_ARRAY;\r\n                lastWasColon = false;\r\n                break;\r\n            case 4 /* CloseBracketToken */:\r\n                type = TOKEN_DELIM_ARRAY;\r\n                lastWasColon = false;\r\n                break;\r\n            case 6 /* ColonToken */:\r\n                type = TOKEN_DELIM_COLON;\r\n                lastWasColon = true;\r\n                break;\r\n            case 5 /* CommaToken */:\r\n                type = TOKEN_DELIM_COMMA;\r\n                lastWasColon = false;\r\n                break;\r\n            case 8 /* TrueKeyword */:\r\n            case 9 /* FalseKeyword */:\r\n                type = TOKEN_VALUE_BOOLEAN;\r\n                lastWasColon = false;\r\n                break;\r\n            case 7 /* NullKeyword */:\r\n                type = TOKEN_VALUE_NULL;\r\n                lastWasColon = false;\r\n                break;\r\n            case 10 /* StringLiteral */:\r\n                type = lastWasColon ? TOKEN_VALUE_STRING : TOKEN_PROPERTY_NAME;\r\n                lastWasColon = false;\r\n                break;\r\n            case 11 /* NumericLiteral */:\r\n                type = TOKEN_VALUE_NUMBER;\r\n                lastWasColon = false;\r\n                break;\r\n        }\r\n        // comments, iff enabled\r\n        if (comments) {\r\n            switch (kind) {\r\n                case 12 /* LineCommentTrivia */:\r\n                    type = TOKEN_COMMENT_LINE;\r\n                    break;\r\n                case 13 /* BlockCommentTrivia */:\r\n                    type = TOKEN_COMMENT_BLOCK;\r\n                    break;\r\n            }\r\n        }\r\n        ret.endState = new JSONState(state.getStateData(), scanner.getTokenError(), lastWasColon);\r\n        ret.tokens.push({\r\n            startIndex: offset,\r\n            scopes: type\r\n        });\r\n    }\r\n    return ret;\r\n}\r\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as formatter from './impl/format.js';\nimport * as edit from './impl/edit.js';\nimport * as scanner from './impl/scanner.js';\nimport * as parser from './impl/parser.js';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport var createScanner = scanner.createScanner;\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport var getLocation = parser.getLocation;\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport var parse = parser.parse;\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport var parseTree = parser.parseTree;\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport var findNodeAtLocation = parser.findNodeAtLocation;\n/**\n * Finds the most inner node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\nexport var findNodeAtOffset = parser.findNodeAtOffset;\n/**\n * Gets the JSON path of the given JSON DOM node\n */\nexport var getNodePath = parser.getNodePath;\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport var getNodeValue = parser.getNodeValue;\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport var visit = parser.visit;\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport var stripComments = parser.stripComments;\n/**\n * Computes the edits needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function format(documentText, range, options) {\n    return formatter.format(documentText, range, options);\n}\n/**\n * Computes the edits needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function modify(text, path, value, options) {\n    return edit.setProperty(text, path, value, options.formattingOptions, options.getInsertionIndex);\n}\n/**\n * Applies edits to a input string.\n */\nexport function applyEdits(text, edits) {\n    for (var i = edits.length - 1; i >= 0; i--) {\n        text = edit.applyEdit(text, edits[i]);\n    }\n    return text;\n}\n//# sourceMappingURL=main.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { format, isEOL } from './format.js';\nimport { parseTree, findNodeAtLocation } from './parser.js';\nexport function removeProperty(text, path, formattingOptions) {\n    return setProperty(text, path, void 0, formattingOptions);\n}\nexport function setProperty(text, originalPath, value, formattingOptions, getInsertionIndex) {\n    var path = originalPath.slice();\n    var errors = [];\n    var root = parseTree(text, errors);\n    var parent = void 0;\n    var lastSegment = void 0;\n    while (path.length > 0) {\n        lastSegment = path.pop();\n        parent = findNodeAtLocation(root, path);\n        if (parent === void 0 && value !== void 0) {\n            if (typeof lastSegment === 'string') {\n                value = (_a = {}, _a[lastSegment] = value, _a);\n            }\n            else {\n                value = [value];\n            }\n        }\n        else {\n            break;\n        }\n    }\n    if (!parent) {\n        // empty document\n        if (value === void 0) { // delete\n            throw new Error('Can not delete in empty document');\n        }\n        return withFormatting(text, { offset: root ? root.offset : 0, length: root ? root.length : 0, content: JSON.stringify(value) }, formattingOptions);\n    }\n    else if (parent.type === 'object' && typeof lastSegment === 'string' && Array.isArray(parent.children)) {\n        var existing = findNodeAtLocation(parent, [lastSegment]);\n        if (existing !== void 0) {\n            if (value === void 0) { // delete\n                if (!existing.parent) {\n                    throw new Error('Malformed AST');\n                }\n                var propertyIndex = parent.children.indexOf(existing.parent);\n                var removeBegin = void 0;\n                var removeEnd = existing.parent.offset + existing.parent.length;\n                if (propertyIndex > 0) {\n                    // remove the comma of the previous node\n                    var previous = parent.children[propertyIndex - 1];\n                    removeBegin = previous.offset + previous.length;\n                }\n                else {\n                    removeBegin = parent.offset + 1;\n                    if (parent.children.length > 1) {\n                        // remove the comma of the next node\n                        var next = parent.children[1];\n                        removeEnd = next.offset;\n                    }\n                }\n                return withFormatting(text, { offset: removeBegin, length: removeEnd - removeBegin, content: '' }, formattingOptions);\n            }\n            else {\n                // set value of existing property\n                return withFormatting(text, { offset: existing.offset, length: existing.length, content: JSON.stringify(value) }, formattingOptions);\n            }\n        }\n        else {\n            if (value === void 0) { // delete\n                return []; // property does not exist, nothing to do\n            }\n            var newProperty = JSON.stringify(lastSegment) + \": \" + JSON.stringify(value);\n            var index = getInsertionIndex ? getInsertionIndex(parent.children.map(function (p) { return p.children[0].value; })) : parent.children.length;\n            var edit = void 0;\n            if (index > 0) {\n                var previous = parent.children[index - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            else if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty + ',' };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n    }\n    else if (parent.type === 'array' && typeof lastSegment === 'number' && Array.isArray(parent.children)) {\n        var insertIndex = lastSegment;\n        if (insertIndex === -1) {\n            // Insert\n            var newProperty = \"\" + JSON.stringify(value);\n            var edit = void 0;\n            if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                var previous = parent.children[parent.children.length - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n        else {\n            if (value === void 0 && parent.children.length >= 0) {\n                //Removal\n                var removalIndex = lastSegment;\n                var toRemove = parent.children[removalIndex];\n                var edit = void 0;\n                if (parent.children.length === 1) {\n                    // only item\n                    edit = { offset: parent.offset + 1, length: parent.length - 2, content: '' };\n                }\n                else if (parent.children.length - 1 === removalIndex) {\n                    // last item\n                    var previous = parent.children[removalIndex - 1];\n                    var offset = previous.offset + previous.length;\n                    var parentEndOffset = parent.offset + parent.length;\n                    edit = { offset: offset, length: parentEndOffset - 2 - offset, content: '' };\n                }\n                else {\n                    edit = { offset: toRemove.offset, length: parent.children[removalIndex + 1].offset - toRemove.offset, content: '' };\n                }\n                return withFormatting(text, edit, formattingOptions);\n            }\n            else {\n                throw new Error('Array modification not supported yet');\n            }\n        }\n    }\n    else {\n        throw new Error(\"Can not add \" + (typeof lastSegment !== 'number' ? 'index' : 'property') + \" to parent of type \" + parent.type);\n    }\n    var _a;\n}\nfunction withFormatting(text, edit, formattingOptions) {\n    // apply the edit\n    var newText = applyEdit(text, edit);\n    // format the new text\n    var begin = edit.offset;\n    var end = edit.offset + edit.content.length;\n    if (edit.length === 0 || edit.content.length === 0) { // insert or remove\n        while (begin > 0 && !isEOL(newText, begin - 1)) {\n            begin--;\n        }\n        while (end < newText.length && !isEOL(newText, end)) {\n            end++;\n        }\n    }\n    var edits = format(newText, { offset: begin, length: end - begin }, formattingOptions);\n    // apply the formatting edits and track the begin and end offsets of the changes\n    for (var i = edits.length - 1; i >= 0; i--) {\n        var edit_1 = edits[i];\n        newText = applyEdit(newText, edit_1);\n        begin = Math.min(begin, edit_1.offset);\n        end = Math.max(end, edit_1.offset + edit_1.length);\n        end += edit_1.content.length - edit_1.length;\n    }\n    // create a single edit with all changes\n    var editLength = text.length - (newText.length - end) - begin;\n    return [{ offset: begin, length: editLength, content: newText.substring(begin, end) }];\n}\nexport function applyEdit(text, edit) {\n    return text.substring(0, edit.offset) + edit.content + text.substring(edit.offset + edit.length);\n}\nexport function isWS(text, offset) {\n    return '\\r\\n \\t'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=edit.js.map"],"sourceRoot":""}