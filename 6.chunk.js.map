{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-uri/index.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/strings.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/fillers/vscode-nls.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonCompletion.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/json.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonHover.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/objects.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/parser/jsonParser.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonValidation.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/colors.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonDocumentSymbols.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/configuration.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonSchemaService.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/jsonWorker.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/jsonLanguageService.js"],"names":["process","_encode","ch","charCodeAt","toString","toUpperCase","encodeURIComponent2","str","encodeURIComponent","replace","encodeNoop","isWindows","URI","this","_scheme","_empty","_authority","_path","_query","_fragment","_formatted","_fsPath","isUri","thing","authority","fragment","path","query","scheme","Object","defineProperty","prototype","get","enumerable","configurable","value","_driveLetterPath","test","toLowerCase","substr","with","change","ret","_validate","parse","data","_parseComponents","decodeURIComponent","file","_slash","idx","indexOf","substring","match","_regexp","exec","from","components","_schemePattern","Error","_singleSlashStart","_doubleSlashStart","skipEncoding","_asFormatted","uri","encoder","parts","push","m","_upperCaseDrive","lastIdx","join","toJSON","res","fsPath","external","$mid","revive","result","__webpack_exports__","platform","navigator","userAgent","endsWith","haystack","needle","diff","length","lastIndexOf","localize","key","message","args","_i","arguments","rest","index","format","loadMessageBundle","jsonCompletion_localize","jsonCompletion_JSONCompletion","JSONCompletion","schemaService","contributions","promiseConstructor","templateVarIdCounter","promise","Promise","doResolve","item","i","resolveCompletion","resolver","resolve","doComplete","document","position","doc","_this","items","isIncomplete","offset","offsetAt","node","getNodeFromOffsetEndInclusive","isInComment","start","currentWord","getCurrentWord","overwriteRange","type","overwriteStart","getText","main","create","positionAt","end","proposed","collector","add","suggestion","existing","label","documentation","textEdit","insertText","setAsIncomplete","error","console","log","getNumberOfProposals","getSchemaForResource","then","schema","collectionPromises","addValue","currentKey","currentProperty","isKey","parent","properties","forEach","p","separatorAfter_1","evaluateSeparatorAfter","getPropertyCompletions","getSchemaLessPropertyCompletions","location_1","getPath","contribution","collectPromise","collectPropertyCompletions","charAt","kind","Property","getLabelForValue","getInsertTextForProperty","insertTextFormat","Snippet","types","getValueCompletions","getSchemaLessValueCompletions","getContributedValueCompletions","all","offsetForSeparator","separatorAfter","addFillerValueCompletions","getMatchingSchemas","s","inverted","schemaProperties_1","keys","propertySchema","deprecationMessage","doNotSuggest","proposal","filterText","getFilterTextForValue","description","command","title","collectCompletionsForSimilarObject","obj","getInsertTextForValue","parentKey_1","visit","n","getSuggestionKind","collectSuggestionsForValues","contains","getLabelTextForMatchingNode","getInsertTextForMatchingNode","addBooleanValueCompletion","getValue","propertyNode","colonOffset","valueNode","parentKey_2","addDollarSchemaCompletions","parentKey_3","parentKey","valueNode_1","separatorAfter_2","Array","isArray","findItemAtOffset","addSchemaValueCompletions","addNullValueCompletion","parentKey_4","location_2","collectValueCompletions","collectDefaultCompletions","addDefaultValueCompletions","addEnumValueCompletions","collectTypes","allOf","anyOf","oneOf","arrayDepth","hasProposals","default","detail","defaultSnippets","body","getInsertTextForSnippetValue","getFilterTextForSnippetValue","getLabelForSnippetValue","bodyText","prefix","suffix","indent","split","enum","enm","enumDescriptions","t","getInsertTextForGuessedValue","getRegisteredSchemaIds","schemaId","Module","JSON","stringify","trim","getInsertTextForPlainText","text","stringifyObject","stringifyLiteral","newIndent","snippetValue","array","Value","content","propertyText","resultText","nValueProposals","scanner","jsonc_parser_main","setPosition","scan","children","getChildNodes","child","getTokenOffset","getTokenLength","token","jsonHover_JSONHover","JSONHover","doHover","getNodeFromOffset","hoverRangeNode","hoverRange","createHover","contents","range","location","getInfoContribution","htmlContent","title_1","markdownDescription_1","markdownEnumValueDescription_1","enumValue_1","every","markdownDescription","toMarkdown","markdownEnumDescriptions","plain","equals","one","other","undefined","oneKeys","sort","otherKeys","extendStatics","ErrorCode","__extends","setPrototypeOf","__proto__","d","b","hasOwnProperty","__","constructor","jsonParser_localize","ProblemSeverity","colorHexPattern","emailPattern","EnumMatch","jsonParser_ASTNode","ASTNode","getLastChild","includeRightBound","visitor","findNode","validate","validationResult","matchingSchemas","include","problems","severity","Warning","errorMessage","subSchemaRef","asSchema","notSchema","not","subValidationResult","ValidationResult","subMatchingSchemas","newSub","hasProblems","schemas","ms","testAlternatives","alternatives","maxOneMatch","matches","bestMatch","subSchema","compareResult","compare","merge","mergeEnumValues","propertiesMatches","propertiesValueMatches","val","enumValueMatch","_a","enumValues","code","EnumValueMismatch","map","v","const","NullASTNode","_super","name","call","BooleanASTNode","ArrayASTNode","addItem","ctn","subSchemas_1","itemValidationResult","mergePropertyMatch","additionalItems","itemSchema_1","containsSchema","some","NoOpSchemaCollector","instance","minItems","maxItems","uniqueItems","values_1","NumberASTNode","isInteger","Number","NaN","typeIsInteger","multipleOf","exclusiveMinimum","getExclusiveLimit","minimum","exclusiveMaximum","maximum","getLimit","limit","exclusive","jsonParser_StringASTNode","StringASTNode","minLength","maxLength","pattern","RegExp","patternErrorMessage","vscode_uri","e","PropertyASTNode","setValue","ObjectASTNode","addProperty","getFirstProperty","getKeyList","seenKeys","unprocessedProperties","required","propertyName","propertyProcessed","prop","splice","propertyValidationResult","patternProperties","propertyPattern","regex","slice","additionalProperties","maxProperties","minProperties","dependencies","propertyDep","requiredProp","propertyNames","f","SchemaCollector","focusOffset","exclude","apply","primaryValueMatches","mergeAll","validationResults","concat","JSONDocument","root","syntaxErrors","comments","textDocument","config","collectComments","_scanNext","token_1","_checkScanError","_errorAtRange","_error","skipUntilAfter","skipUntil","_finalize","token_2","getToken","getTokenError","InvalidUnicode","InvalidEscapeCharacter","UnexpectedEndOfNumber","UnexpectedEndOfComment","UnexpectedEndOfString","InvalidCharacter","scanNext","_parseProperty","keysSeen","_parseString","Undefined","getTokenValue","seen","ColonExpected","line","_parseValue","ValueExpected","count","needsComma","commaOffset","TrailingComma","CommaExpected","CommaOrCloseBacketExpected","_parseArray","PropertyExpected","CommaOrCloseBraceExpected","_parseObject","tokenValue","numberValue","_parseNumber","_parseLiteral","_root","jsonValidation_localize","jsonValidation_JSONValidation","JSONValidation","jsonSchemaService","validationEnabled","configure","raw","commentSeverity","allowComments","Ignore","doValidation","jsonDocument","documentSettings","diagnostics","added","addProblem","problem","signature","trailingCommaSeverity","trailingCommas","errors","astRoot","property","semanticErrors","schemaAllowsComments","message_1","c","schemaRef","Digit0","Digit9","A","a","hexDigit","charCode","colorFromHex","red","green","blue","alpha","jsonDocumentSymbols_JSONDocumentSymbols","JSONDocumentSymbols","findDocumentSymbols","resourceString","result_1","Function","collectOutlineEntries","containerName","childContainerName","getSymbolKind","nodeType","String","Boolean","Variable","findDocumentColors","visitedNode","matchingSchemas_1","nodeId","color","getColorPresentations","red256","Math","round","green256","blue256","toTwoDigitHex","r","configuration_localize","schemaContributions","schemaAssociations","http://json-schema.org/draft-04/schema#","$schema","definitions","schemaArray","$ref","positiveInteger","positiveIntegerDefault0","simpleTypes","stringArray","id","jsonSchemaService_localize","jsonSchemaService_FilePatternAssociation","FilePatternAssociation","patternRegExp","convertSimple2RegExpPattern","addSchema","matchesPattern","fileName","getSchemas","SchemaHandle","service","url","unresolvedSchemaContent","unresolvedSchema","UnresolvedSchema","getUnresolvedSchema","loadSchema","getResolvedSchema","resolvedSchema","unresolved","resolveSchemaContent","clearSchema","jsonSchemaService_ResolvedSchema","ResolvedSchema","getSection","getSectionRecursive","next","shift","parseInt","isNaN","jsonSchemaService_JSONSchemaService","JSONSchemaService","requestService","contextService","callOnDispose","contributionSchemas","contributionAssociations","schemasById","filePatternAssociations","filePatternAssociationById","registeredSchemasIds","filter","dispose","pop","onResourceChange","normalizeId","schemaFile","setSchemaContributions","normalizedId","addSchemaHandle","associations","fpa","getOrAddFilePatternAssociation","schemaHandle","getOrAddSchemaHandle","registerExternalSchema","filePatterns","clearExternalSchemas","toDisplayString","schemaContent","jsonErrors","schemaToResolve","schemaURL","resolveErrors","target","sourceRoot","sourceURI","section","current","part","findSection","resolveExternalLink","linkPath","parentSchemaURL","resolveRelativePath","loc","resolveRefs","parentSchema","toWalk","openPromises","handleRef","segments","entries","entries_1","entry","collectEntries","maps","maps_1","collectMapEntries","arrays","arrays_1","_b","array_1","collectArrayEntries","_","resource","schemaProperties","schemeId","startsWith","_c","createCombinedSchema","schemaIds","combinedSchemaId","combinedSchema","__webpack_require__","jsonWorker_Promise","monaco","PromiseAdapter","executor","wrapped","onfulfilled","onrejected","getWrapped","cancel","as","reject","wrapError","values","jsonWorker_JSONWorker","JSONWorker","ctx","createData","_ctx","_languageSettings","languageSettings","_languageId","languageId","_languageService","params","schemaRequestService","workspaceContext","jsonCompletion","jsonHover","jsonDocumentSymbols","jsonValidation","settings","fileMatch","resetSchema","bind","parseJSONDocument","findColorSymbols","o","options","tabSize","insertSpaces","eol","getLanguageService","_getTextDocument","textEdits","symbols","models_1","getMirrorModels","model","version"],"mappings":"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","file":"6.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nfunction _encode(ch) {\n    return '%' + ch.charCodeAt(0).toString(16).toUpperCase();\n}\n// see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\nfunction encodeURIComponent2(str) {\n    return encodeURIComponent(str).replace(/[!'()*]/g, _encode);\n}\nfunction encodeNoop(str) {\n    return str.replace(/[#?]/, _encode);\n}\n/**\n * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.\n * This class is a simple parser which creates the basic component paths\n * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation\n * and encoding.\n *\n *       foo://example.com:8042/over/there?name=ferret#nose\n *       \\_/   \\______________/\\_________/ \\_________/ \\__/\n *        |           |            |            |        |\n *     scheme     authority       path        query   fragment\n *        |   _____________________|__\n *       / \\ /                        \\\n *       urn:example:animal:ferret:nose\n *\n *\n */\nvar URI = (function () {\n    function URI() {\n        this._scheme = URI._empty;\n        this._authority = URI._empty;\n        this._path = URI._empty;\n        this._query = URI._empty;\n        this._fragment = URI._empty;\n        this._formatted = null;\n        this._fsPath = null;\n    }\n    URI.isUri = function (thing) {\n        if (thing instanceof URI) {\n            return true;\n        }\n        if (!thing) {\n            return false;\n        }\n        return typeof thing.authority === 'string'\n            && typeof thing.fragment === 'string'\n            && typeof thing.path === 'string'\n            && typeof thing.query === 'string'\n            && typeof thing.scheme === 'string';\n    };\n    Object.defineProperty(URI.prototype, \"scheme\", {\n        /**\n         * scheme is the 'http' part of 'http://www.msft.com/some/path?query#fragment'.\n         * The part before the first colon.\n         */\n        get: function () {\n            return this._scheme;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(URI.prototype, \"authority\", {\n        /**\n         * authority is the 'www.msft.com' part of 'http://www.msft.com/some/path?query#fragment'.\n         * The part between the first double slashes and the next slash.\n         */\n        get: function () {\n            return this._authority;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(URI.prototype, \"path\", {\n        /**\n         * path is the '/some/path' part of 'http://www.msft.com/some/path?query#fragment'.\n         */\n        get: function () {\n            return this._path;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(URI.prototype, \"query\", {\n        /**\n         * query is the 'query' part of 'http://www.msft.com/some/path?query#fragment'.\n         */\n        get: function () {\n            return this._query;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(URI.prototype, \"fragment\", {\n        /**\n         * fragment is the 'fragment' part of 'http://www.msft.com/some/path?query#fragment'.\n         */\n        get: function () {\n            return this._fragment;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(URI.prototype, \"fsPath\", {\n        // ---- filesystem path -----------------------\n        /**\n         * Returns a string representing the corresponding file system path of this URI.\n         * Will handle UNC paths and normalize windows drive letters to lower-case. Also\n         * uses the platform specific path separator. Will *not* validate the path for\n         * invalid characters and semantics. Will *not* look at the scheme of this URI.\n         */\n        get: function () {\n            if (!this._fsPath) {\n                var value;\n                if (this._authority && this._path && this.scheme === 'file') {\n                    // unc path: file://shares/c$/far/boo\n                    value = \"//\" + this._authority + this._path;\n                }\n                else if (URI._driveLetterPath.test(this._path)) {\n                    // windows drive letter: file:///c:/far/boo\n                    value = this._path[1].toLowerCase() + this._path.substr(2);\n                }\n                else {\n                    // other path\n                    value = this._path;\n                }\n                if (isWindows) {\n                    value = value.replace(/\\//g, '\\\\');\n                }\n                this._fsPath = value;\n            }\n            return this._fsPath;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // ---- modify to new -------------------------\n    URI.prototype.with = function (change) {\n        if (!change) {\n            return this;\n        }\n        var scheme = change.scheme, authority = change.authority, path = change.path, query = change.query, fragment = change.fragment;\n        if (scheme === void 0) {\n            scheme = this.scheme;\n        }\n        else if (scheme === null) {\n            scheme = '';\n        }\n        if (authority === void 0) {\n            authority = this.authority;\n        }\n        else if (authority === null) {\n            authority = '';\n        }\n        if (path === void 0) {\n            path = this.path;\n        }\n        else if (path === null) {\n            path = '';\n        }\n        if (query === void 0) {\n            query = this.query;\n        }\n        else if (query === null) {\n            query = '';\n        }\n        if (fragment === void 0) {\n            fragment = this.fragment;\n        }\n        else if (fragment === null) {\n            fragment = '';\n        }\n        if (scheme === this.scheme\n            && authority === this.authority\n            && path === this.path\n            && query === this.query\n            && fragment === this.fragment) {\n            return this;\n        }\n        var ret = new URI();\n        ret._scheme = scheme;\n        ret._authority = authority;\n        ret._path = path;\n        ret._query = query;\n        ret._fragment = fragment;\n        URI._validate(ret);\n        return ret;\n    };\n    // ---- parse & validate ------------------------\n    URI.parse = function (value) {\n        var ret = new URI();\n        var data = URI._parseComponents(value);\n        ret._scheme = data.scheme;\n        ret._authority = decodeURIComponent(data.authority);\n        ret._path = decodeURIComponent(data.path);\n        ret._query = decodeURIComponent(data.query);\n        ret._fragment = decodeURIComponent(data.fragment);\n        URI._validate(ret);\n        return ret;\n    };\n    URI.file = function (path) {\n        var ret = new URI();\n        ret._scheme = 'file';\n        // normalize to fwd-slashes on windows,\n        // on other systems bwd-slaches are valid\n        // filename character, eg /f\\oo/ba\\r.txt\n        if (isWindows) {\n            path = path.replace(/\\\\/g, URI._slash);\n        }\n        // check for authority as used in UNC shares\n        // or use the path as given\n        if (path[0] === URI._slash && path[0] === path[1]) {\n            var idx = path.indexOf(URI._slash, 2);\n            if (idx === -1) {\n                ret._authority = path.substring(2);\n            }\n            else {\n                ret._authority = path.substring(2, idx);\n                ret._path = path.substring(idx);\n            }\n        }\n        else {\n            ret._path = path;\n        }\n        // Ensure that path starts with a slash\n        // or that it is at least a slash\n        if (ret._path[0] !== URI._slash) {\n            ret._path = URI._slash + ret._path;\n        }\n        URI._validate(ret);\n        return ret;\n    };\n    URI._parseComponents = function (value) {\n        var ret = {\n            scheme: URI._empty,\n            authority: URI._empty,\n            path: URI._empty,\n            query: URI._empty,\n            fragment: URI._empty,\n        };\n        var match = URI._regexp.exec(value);\n        if (match) {\n            ret.scheme = match[2] || ret.scheme;\n            ret.authority = match[4] || ret.authority;\n            ret.path = match[5] || ret.path;\n            ret.query = match[7] || ret.query;\n            ret.fragment = match[9] || ret.fragment;\n        }\n        return ret;\n    };\n    URI.from = function (components) {\n        return new URI().with(components);\n    };\n    URI._validate = function (ret) {\n        // scheme, https://tools.ietf.org/html/rfc3986#section-3.1\n        // ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n        if (ret.scheme && !URI._schemePattern.test(ret.scheme)) {\n            throw new Error('[UriError]: Scheme contains illegal characters.');\n        }\n        // path, http://tools.ietf.org/html/rfc3986#section-3.3\n        // If a URI contains an authority component, then the path component\n        // must either be empty or begin with a slash (\"/\") character.  If a URI\n        // does not contain an authority component, then the path cannot begin\n        // with two slash characters (\"//\").\n        if (ret.path) {\n            if (ret.authority) {\n                if (!URI._singleSlashStart.test(ret.path)) {\n                    throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character');\n                }\n            }\n            else {\n                if (URI._doubleSlashStart.test(ret.path)) {\n                    throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")');\n                }\n            }\n        }\n    };\n    // ---- printing/externalize ---------------------------\n    /**\n     *\n     * @param skipEncoding Do not encode the result, default is `false`\n     */\n    URI.prototype.toString = function (skipEncoding) {\n        if (skipEncoding === void 0) { skipEncoding = false; }\n        if (!skipEncoding) {\n            if (!this._formatted) {\n                this._formatted = URI._asFormatted(this, false);\n            }\n            return this._formatted;\n        }\n        else {\n            // we don't cache that\n            return URI._asFormatted(this, true);\n        }\n    };\n    URI._asFormatted = function (uri, skipEncoding) {\n        var encoder = !skipEncoding\n            ? encodeURIComponent2\n            : encodeNoop;\n        var parts = [];\n        var scheme = uri.scheme, authority = uri.authority, path = uri.path, query = uri.query, fragment = uri.fragment;\n        if (scheme) {\n            parts.push(scheme, ':');\n        }\n        if (authority || scheme === 'file') {\n            parts.push('//');\n        }\n        if (authority) {\n            authority = authority.toLowerCase();\n            var idx = authority.indexOf(':');\n            if (idx === -1) {\n                parts.push(encoder(authority));\n            }\n            else {\n                parts.push(encoder(authority.substr(0, idx)), authority.substr(idx));\n            }\n        }\n        if (path) {\n            // lower-case windows drive letters in /C:/fff or C:/fff\n            var m = URI._upperCaseDrive.exec(path);\n            if (m) {\n                if (m[1]) {\n                    path = '/' + m[2].toLowerCase() + path.substr(3); // \"/c:\".length === 3\n                }\n                else {\n                    path = m[2].toLowerCase() + path.substr(2); // // \"c:\".length === 2\n                }\n            }\n            // encode every segement but not slashes\n            // make sure that # and ? are always encoded\n            // when occurring in paths - otherwise the result\n            // cannot be parsed back again\n            var lastIdx = 0;\n            while (true) {\n                var idx = path.indexOf(URI._slash, lastIdx);\n                if (idx === -1) {\n                    parts.push(encoder(path.substring(lastIdx)));\n                    break;\n                }\n                parts.push(encoder(path.substring(lastIdx, idx)), URI._slash);\n                lastIdx = idx + 1;\n            }\n            ;\n        }\n        if (query) {\n            parts.push('?', encoder(query));\n        }\n        if (fragment) {\n            parts.push('#', encoder(fragment));\n        }\n        return parts.join(URI._empty);\n    };\n    URI.prototype.toJSON = function () {\n        var res = {\n            fsPath: this.fsPath,\n            external: this.toString(),\n            $mid: 1\n        };\n        if (this.path) {\n            res.path = this.path;\n        }\n        if (this.scheme) {\n            res.scheme = this.scheme;\n        }\n        if (this.authority) {\n            res.authority = this.authority;\n        }\n        if (this.query) {\n            res.query = this.query;\n        }\n        if (this.fragment) {\n            res.fragment = this.fragment;\n        }\n        return res;\n    };\n    URI.revive = function (data) {\n        var result = new URI();\n        result._scheme = data.scheme || URI._empty;\n        result._authority = data.authority || URI._empty;\n        result._path = data.path || URI._empty;\n        result._query = data.query || URI._empty;\n        result._fragment = data.fragment || URI._empty;\n        result._fsPath = data.fsPath;\n        result._formatted = data.external;\n        URI._validate(result);\n        return result;\n    };\n    return URI;\n}());\nexport default URI;\nURI._empty = '';\nURI._slash = '/';\nURI._regexp = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\nURI._driveLetterPath = /^\\/[a-zA-z]:/;\nURI._upperCaseDrive = /^(\\/)?([A-Z]:)/;\nURI._schemePattern = /^\\w[\\w\\d+.-]*$/;\nURI._singleSlashStart = /^\\//;\nURI._doubleSlashStart = /^\\/\\//;\nvar isWindows;\nif (typeof process === 'object') {\n    isWindows = process.platform === 'win32';\n}\nelse if (typeof navigator === 'object') {\n    var userAgent = navigator.userAgent;\n    isWindows = userAgent.indexOf('Windows') >= 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport function startsWith(haystack, needle) {\n    if (haystack.length < needle.length) {\n        return false;\n    }\n    for (var i = 0; i < needle.length; i++) {\n        if (haystack[i] !== needle[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Determines if haystack ends with needle.\n */\nexport function endsWith(haystack, needle) {\n    var diff = haystack.length - needle.length;\n    if (diff > 0) {\n        return haystack.lastIndexOf(needle) === diff;\n    }\n    else if (diff === 0) {\n        return haystack === needle;\n    }\n    else {\n        return false;\n    }\n}\nexport function convertSimple2RegExpPattern(pattern) {\n    return pattern.replace(/[\\-\\\\\\{\\}\\+\\?\\|\\^\\$\\.\\,\\[\\]\\(\\)\\#\\s]/g, '\\\\$&').replace(/[\\*]/g, '.*');\n}\nexport function repeat(value, count) {\n    var s = '';\n    while (count > 0) {\n        if ((count & 1) === 1) {\n            s += value;\n        }\n        value += value;\n        count = count >>> 1;\n    }\n    return s;\n}\n//# sourceMappingURL=strings.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction format(message, args) {\n    var result;\n    if (args.length === 0) {\n        result = message;\n    }\n    else {\n        result = message.replace(/\\{(\\d+)\\}/g, function (match, rest) {\n            var index = rest[0];\n            return typeof args[index] !== 'undefined' ? args[index] : match;\n        });\n    }\n    return result;\n}\nfunction localize(key, message) {\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n    }\n    return format(message, args);\n}\nexport function loadMessageBundle(file) {\n    return localize;\n}\nexport function config(opt) {\n    return loadMessageBundle;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as Json from '../../jsonc-parser/main.js';\nimport { stringifyObject } from '../utils/json.js';\nimport { endsWith } from '../utils/strings.js';\nimport { CompletionItem, CompletionItemKind, Range, TextEdit, InsertTextFormat } from '../../vscode-languageserver-types/main.js';\nimport * as nls from '../../../fillers/vscode-nls.js';\nvar localize = nls.loadMessageBundle();\nvar JSONCompletion = /** @class */ (function () {\n    function JSONCompletion(schemaService, contributions, promiseConstructor) {\n        if (contributions === void 0) { contributions = []; }\n        this.templateVarIdCounter = 0;\n        this.schemaService = schemaService;\n        this.contributions = contributions;\n        this.promise = promiseConstructor || Promise;\n    }\n    JSONCompletion.prototype.doResolve = function (item) {\n        for (var i = this.contributions.length - 1; i >= 0; i--) {\n            if (this.contributions[i].resolveCompletion) {\n                var resolver = this.contributions[i].resolveCompletion(item);\n                if (resolver) {\n                    return resolver;\n                }\n            }\n        }\n        return this.promise.resolve(item);\n    };\n    JSONCompletion.prototype.doComplete = function (document, position, doc) {\n        var _this = this;\n        var result = {\n            items: [],\n            isIncomplete: false\n        };\n        var offset = document.offsetAt(position);\n        var node = doc.getNodeFromOffsetEndInclusive(offset);\n        if (this.isInComment(document, node ? node.start : 0, offset)) {\n            return Promise.resolve(result);\n        }\n        var currentWord = this.getCurrentWord(document, offset);\n        var overwriteRange = null;\n        if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n            overwriteRange = Range.create(document.positionAt(node.start), document.positionAt(node.end));\n        }\n        else {\n            var overwriteStart = offset - currentWord.length;\n            if (overwriteStart > 0 && document.getText()[overwriteStart - 1] === '\"') {\n                overwriteStart--;\n            }\n            overwriteRange = Range.create(document.positionAt(overwriteStart), position);\n        }\n        var proposed = {};\n        var collector = {\n            add: function (suggestion) {\n                var existing = proposed[suggestion.label];\n                if (!existing) {\n                    proposed[suggestion.label] = suggestion;\n                    if (overwriteRange) {\n                        suggestion.textEdit = TextEdit.replace(overwriteRange, suggestion.insertText);\n                    }\n                    result.items.push(suggestion);\n                }\n                else if (!existing.documentation) {\n                    existing.documentation = suggestion.documentation;\n                }\n            },\n            setAsIncomplete: function () {\n                result.isIncomplete = true;\n            },\n            error: function (message) {\n                console.error(message);\n            },\n            log: function (message) {\n                console.log(message);\n            },\n            getNumberOfProposals: function () {\n                return result.items.length;\n            }\n        };\n        return this.schemaService.getSchemaForResource(document.uri, doc).then(function (schema) {\n            var collectionPromises = [];\n            var addValue = true;\n            var currentKey = '';\n            var currentProperty = null;\n            if (node) {\n                if (node.type === 'string') {\n                    var stringNode = node;\n                    if (stringNode.isKey) {\n                        addValue = !(node.parent && (node.parent.value));\n                        currentProperty = node.parent ? node.parent : null;\n                        currentKey = document.getText().substring(node.start + 1, node.end - 1);\n                        if (node.parent) {\n                            node = node.parent.parent;\n                        }\n                    }\n                }\n            }\n            // proposals for properties\n            if (node && node.type === 'object') {\n                // don't suggest keys when the cursor is just before the opening curly brace\n                if (node.start === offset) {\n                    return result;\n                }\n                // don't suggest properties that are already present\n                var properties = node.properties;\n                properties.forEach(function (p) {\n                    if (!currentProperty || currentProperty !== p) {\n                        proposed[p.key.value] = CompletionItem.create('__');\n                    }\n                });\n                var separatorAfter_1 = '';\n                if (addValue) {\n                    separatorAfter_1 = _this.evaluateSeparatorAfter(document, document.offsetAt(overwriteRange.end));\n                }\n                if (schema) {\n                    // property proposals with schema\n                    _this.getPropertyCompletions(schema, doc, node, addValue, separatorAfter_1, collector);\n                }\n                else {\n                    // property proposals without schema\n                    _this.getSchemaLessPropertyCompletions(doc, node, currentKey, collector);\n                }\n                var location_1 = node.getPath();\n                _this.contributions.forEach(function (contribution) {\n                    var collectPromise = contribution.collectPropertyCompletions(document.uri, location_1, currentWord, addValue, separatorAfter_1 === '', collector);\n                    if (collectPromise) {\n                        collectionPromises.push(collectPromise);\n                    }\n                });\n                if ((!schema && currentWord.length > 0 && document.getText().charAt(offset - currentWord.length - 1) !== '\"')) {\n                    collector.add({\n                        kind: CompletionItemKind.Property,\n                        label: _this.getLabelForValue(currentWord),\n                        insertText: _this.getInsertTextForProperty(currentWord, null, false, separatorAfter_1),\n                        insertTextFormat: InsertTextFormat.Snippet, documentation: ''\n                    });\n                }\n            }\n            // proposals for values\n            var types = {};\n            if (schema) {\n                // value proposals with schema\n                _this.getValueCompletions(schema, doc, node, offset, document, collector, types);\n            }\n            else {\n                // value proposals without schema\n                _this.getSchemaLessValueCompletions(doc, node, offset, document, collector);\n            }\n            if (_this.contributions.length > 0) {\n                _this.getContributedValueCompletions(doc, node, offset, document, collector, collectionPromises);\n            }\n            return _this.promise.all(collectionPromises).then(function () {\n                if (collector.getNumberOfProposals() === 0) {\n                    var offsetForSeparator = offset;\n                    if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n                        offsetForSeparator = node.end;\n                    }\n                    var separatorAfter = _this.evaluateSeparatorAfter(document, offsetForSeparator);\n                    _this.addFillerValueCompletions(types, separatorAfter, collector);\n                }\n                return result;\n            });\n        });\n    };\n    JSONCompletion.prototype.getPropertyCompletions = function (schema, doc, node, addValue, separatorAfter, collector) {\n        var _this = this;\n        var matchingSchemas = doc.getMatchingSchemas(schema.schema, node.start);\n        matchingSchemas.forEach(function (s) {\n            if (s.node === node && !s.inverted) {\n                var schemaProperties_1 = s.schema.properties;\n                if (schemaProperties_1) {\n                    Object.keys(schemaProperties_1).forEach(function (key) {\n                        var propertySchema = schemaProperties_1[key];\n                        if (typeof propertySchema === 'object' && !propertySchema.deprecationMessage && !propertySchema.doNotSuggest) {\n                            var proposal = {\n                                kind: CompletionItemKind.Property,\n                                label: key,\n                                insertText: _this.getInsertTextForProperty(key, propertySchema, addValue, separatorAfter),\n                                insertTextFormat: InsertTextFormat.Snippet,\n                                filterText: _this.getFilterTextForValue(key),\n                                documentation: propertySchema.description || '',\n                            };\n                            if (endsWith(proposal.insertText, \"$1\" + separatorAfter)) {\n                                proposal.command = {\n                                    title: 'Suggest',\n                                    command: 'editor.action.triggerSuggest'\n                                };\n                            }\n                            collector.add(proposal);\n                        }\n                    });\n                }\n            }\n        });\n    };\n    JSONCompletion.prototype.getSchemaLessPropertyCompletions = function (doc, node, currentKey, collector) {\n        var _this = this;\n        var collectCompletionsForSimilarObject = function (obj) {\n            obj.properties.forEach(function (p) {\n                var key = p.key.value;\n                collector.add({\n                    kind: CompletionItemKind.Property,\n                    label: key,\n                    insertText: _this.getInsertTextForValue(key, ''),\n                    insertTextFormat: InsertTextFormat.Snippet,\n                    filterText: _this.getFilterTextForValue(key),\n                    documentation: ''\n                });\n            });\n        };\n        if (node.parent) {\n            if (node.parent.type === 'property') {\n                // if the object is a property value, check the tree for other objects that hang under a property of the same name\n                var parentKey_1 = node.parent.key.value;\n                doc.visit(function (n) {\n                    var p = n;\n                    if (n.type === 'property' && n !== node.parent && p.key.value === parentKey_1 && p.value && p.value.type === 'object') {\n                        collectCompletionsForSimilarObject(p.value);\n                    }\n                    return true;\n                });\n            }\n            else if (node.parent.type === 'array') {\n                // if the object is in an array, use all other array elements as similar objects\n                node.parent.items.forEach(function (n) {\n                    if (n.type === 'object' && n !== node) {\n                        collectCompletionsForSimilarObject(n);\n                    }\n                });\n            }\n        }\n        else if (node.type === 'object') {\n            collector.add({\n                kind: CompletionItemKind.Property,\n                label: '$schema',\n                insertText: this.getInsertTextForProperty('$schema', null, true, ''),\n                insertTextFormat: InsertTextFormat.Snippet, documentation: '',\n                filterText: this.getFilterTextForValue(\"$schema\")\n            });\n        }\n    };\n    JSONCompletion.prototype.getSchemaLessValueCompletions = function (doc, node, offset, document, collector) {\n        var _this = this;\n        var offsetForSeparator = offset;\n        if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n            offsetForSeparator = node.end;\n            node = node.parent;\n        }\n        if (!node) {\n            collector.add({\n                kind: this.getSuggestionKind('object'),\n                label: 'Empty object',\n                insertText: this.getInsertTextForValue({}, ''),\n                insertTextFormat: InsertTextFormat.Snippet,\n                documentation: ''\n            });\n            collector.add({\n                kind: this.getSuggestionKind('array'),\n                label: 'Empty array',\n                insertText: this.getInsertTextForValue([], ''),\n                insertTextFormat: InsertTextFormat.Snippet,\n                documentation: ''\n            });\n            return;\n        }\n        var separatorAfter = this.evaluateSeparatorAfter(document, offsetForSeparator);\n        var collectSuggestionsForValues = function (value) {\n            if (!value.parent.contains(offset, true)) {\n                collector.add({\n                    kind: _this.getSuggestionKind(value.type),\n                    label: _this.getLabelTextForMatchingNode(value, document),\n                    insertText: _this.getInsertTextForMatchingNode(value, document, separatorAfter),\n                    insertTextFormat: InsertTextFormat.Snippet, documentation: ''\n                });\n            }\n            if (value.type === 'boolean') {\n                _this.addBooleanValueCompletion(!value.getValue(), separatorAfter, collector);\n            }\n        };\n        if (node.type === 'property') {\n            var propertyNode = node;\n            if (offset > propertyNode.colonOffset) {\n                var valueNode = propertyNode.value;\n                if (valueNode && (offset > valueNode.end || valueNode.type === 'object' || valueNode.type === 'array')) {\n                    return;\n                }\n                // suggest values at the same key\n                var parentKey_2 = propertyNode.key.value;\n                doc.visit(function (n) {\n                    var p = n;\n                    if (n.type === 'property' && p.key.value === parentKey_2 && p.value) {\n                        collectSuggestionsForValues(p.value);\n                    }\n                    return true;\n                });\n                if (parentKey_2 === '$schema' && node.parent && !node.parent.parent) {\n                    this.addDollarSchemaCompletions(separatorAfter, collector);\n                }\n            }\n        }\n        if (node.type === 'array') {\n            if (node.parent && node.parent.type === 'property') {\n                // suggest items of an array at the same key\n                var parentKey_3 = node.parent.key.value;\n                doc.visit(function (n) {\n                    var p = n;\n                    if (n.type === 'property' && p.key.value === parentKey_3 && p.value && p.value.type === 'array') {\n                        (p.value.items).forEach(function (n) {\n                            collectSuggestionsForValues(n);\n                        });\n                    }\n                    return true;\n                });\n            }\n            else {\n                // suggest items in the same array\n                node.items.forEach(function (n) {\n                    collectSuggestionsForValues(n);\n                });\n            }\n        }\n    };\n    JSONCompletion.prototype.getValueCompletions = function (schema, doc, node, offset, document, collector, types) {\n        var _this = this;\n        var offsetForSeparator = offset;\n        var parentKey = null;\n        var valueNode = null;\n        if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n            offsetForSeparator = node.end;\n            valueNode = node;\n            node = node.parent;\n        }\n        if (!node) {\n            this.addSchemaValueCompletions(schema.schema, '', collector, types);\n            return;\n        }\n        if ((node.type === 'property') && offset > node.colonOffset) {\n            var propertyNode = node;\n            var valueNode_1 = propertyNode.value;\n            if (valueNode_1 && offset > valueNode_1.end) {\n                return; // we are past the value node\n            }\n            parentKey = propertyNode.key.value;\n            node = node.parent;\n        }\n        if (node && (parentKey !== null || node.type === 'array')) {\n            var separatorAfter_2 = this.evaluateSeparatorAfter(document, offsetForSeparator);\n            var matchingSchemas = doc.getMatchingSchemas(schema.schema, node.start, valueNode);\n            matchingSchemas.forEach(function (s) {\n                if (s.node === node && !s.inverted && s.schema) {\n                    if (s.schema.items) {\n                        if (Array.isArray(s.schema.items)) {\n                            var index = _this.findItemAtOffset(node, document, offset);\n                            if (index < s.schema.items.length) {\n                                _this.addSchemaValueCompletions(s.schema.items[index], separatorAfter_2, collector, types);\n                            }\n                        }\n                        else {\n                            _this.addSchemaValueCompletions(s.schema.items, separatorAfter_2, collector, types);\n                        }\n                    }\n                    if (s.schema.properties) {\n                        var propertySchema = s.schema.properties[parentKey];\n                        if (propertySchema) {\n                            _this.addSchemaValueCompletions(propertySchema, separatorAfter_2, collector, types);\n                        }\n                    }\n                }\n            });\n            if (parentKey === '$schema' && !node.parent) {\n                this.addDollarSchemaCompletions(separatorAfter_2, collector);\n            }\n            if (types['boolean']) {\n                this.addBooleanValueCompletion(true, separatorAfter_2, collector);\n                this.addBooleanValueCompletion(false, separatorAfter_2, collector);\n            }\n            if (types['null']) {\n                this.addNullValueCompletion(separatorAfter_2, collector);\n            }\n        }\n    };\n    JSONCompletion.prototype.getContributedValueCompletions = function (doc, node, offset, document, collector, collectionPromises) {\n        if (!node) {\n            this.contributions.forEach(function (contribution) {\n                var collectPromise = contribution.collectDefaultCompletions(document.uri, collector);\n                if (collectPromise) {\n                    collectionPromises.push(collectPromise);\n                }\n            });\n        }\n        else {\n            if (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null') {\n                node = node.parent;\n            }\n            if ((node.type === 'property') && offset > node.colonOffset) {\n                var parentKey_4 = node.key.value;\n                var valueNode = node.value;\n                if (!valueNode || offset <= valueNode.end) {\n                    var location_2 = node.parent.getPath();\n                    this.contributions.forEach(function (contribution) {\n                        var collectPromise = contribution.collectValueCompletions(document.uri, location_2, parentKey_4, collector);\n                        if (collectPromise) {\n                            collectionPromises.push(collectPromise);\n                        }\n                    });\n                }\n            }\n        }\n    };\n    JSONCompletion.prototype.addSchemaValueCompletions = function (schema, separatorAfter, collector, types) {\n        var _this = this;\n        if (typeof schema === 'object') {\n            this.addDefaultValueCompletions(schema, separatorAfter, collector);\n            this.addEnumValueCompletions(schema, separatorAfter, collector);\n            this.collectTypes(schema, types);\n            if (Array.isArray(schema.allOf)) {\n                schema.allOf.forEach(function (s) { return _this.addSchemaValueCompletions(s, separatorAfter, collector, types); });\n            }\n            if (Array.isArray(schema.anyOf)) {\n                schema.anyOf.forEach(function (s) { return _this.addSchemaValueCompletions(s, separatorAfter, collector, types); });\n            }\n            if (Array.isArray(schema.oneOf)) {\n                schema.oneOf.forEach(function (s) { return _this.addSchemaValueCompletions(s, separatorAfter, collector, types); });\n            }\n        }\n    };\n    JSONCompletion.prototype.addDefaultValueCompletions = function (schema, separatorAfter, collector, arrayDepth) {\n        var _this = this;\n        if (arrayDepth === void 0) { arrayDepth = 0; }\n        var hasProposals = false;\n        if (schema.default) {\n            var type = schema.type;\n            var value = schema.default;\n            for (var i = arrayDepth; i > 0; i--) {\n                value = [value];\n                type = 'array';\n            }\n            collector.add({\n                kind: this.getSuggestionKind(type),\n                label: this.getLabelForValue(value),\n                insertText: this.getInsertTextForValue(value, separatorAfter),\n                insertTextFormat: InsertTextFormat.Snippet,\n                detail: localize('json.suggest.default', 'Default value'),\n            });\n            hasProposals = true;\n        }\n        if (Array.isArray(schema.defaultSnippets)) {\n            schema.defaultSnippets.forEach(function (s) {\n                var type = schema.type;\n                var value = s.body;\n                var label = s.label;\n                var insertText;\n                var filterText;\n                if (typeof value !== 'undefined') {\n                    var type_1 = schema.type;\n                    for (var i = arrayDepth; i > 0; i--) {\n                        value = [value];\n                        type_1 = 'array';\n                    }\n                    insertText = _this.getInsertTextForSnippetValue(value, separatorAfter);\n                    filterText = _this.getFilterTextForSnippetValue(value);\n                    label = label || _this.getLabelForSnippetValue(value);\n                }\n                else if (typeof s.bodyText === 'string') {\n                    var prefix = '', suffix = '', indent = '';\n                    for (var i = arrayDepth; i > 0; i--) {\n                        prefix = prefix + indent + '[\\n';\n                        suffix = suffix + '\\n' + indent + ']';\n                        indent += '\\t';\n                        type = 'array';\n                    }\n                    insertText = prefix + indent + s.bodyText.split('\\n').join('\\n' + indent) + suffix + separatorAfter;\n                    label = label || insertText;\n                    filterText = insertText.replace(/[\\n]/g, ''); // remove new lines\n                }\n                collector.add({\n                    kind: _this.getSuggestionKind(type),\n                    label: label,\n                    documentation: s.description,\n                    insertText: insertText,\n                    insertTextFormat: InsertTextFormat.Snippet,\n                    filterText: filterText\n                });\n                hasProposals = true;\n            });\n        }\n        if (!hasProposals && typeof schema.items === 'object' && !Array.isArray(schema.items)) {\n            this.addDefaultValueCompletions(schema.items, separatorAfter, collector, arrayDepth + 1);\n        }\n    };\n    JSONCompletion.prototype.addEnumValueCompletions = function (schema, separatorAfter, collector) {\n        if (Array.isArray(schema.enum)) {\n            for (var i = 0, length = schema.enum.length; i < length; i++) {\n                var enm = schema.enum[i];\n                var documentation = schema.description;\n                if (schema.enumDescriptions && i < schema.enumDescriptions.length) {\n                    documentation = schema.enumDescriptions[i];\n                }\n                collector.add({\n                    kind: this.getSuggestionKind(schema.type),\n                    label: this.getLabelForValue(enm),\n                    insertText: this.getInsertTextForValue(enm, separatorAfter),\n                    insertTextFormat: InsertTextFormat.Snippet,\n                    documentation: documentation\n                });\n            }\n        }\n    };\n    JSONCompletion.prototype.collectTypes = function (schema, types) {\n        var type = schema.type;\n        if (Array.isArray(type)) {\n            type.forEach(function (t) { return types[t] = true; });\n        }\n        else {\n            types[type] = true;\n        }\n    };\n    JSONCompletion.prototype.addFillerValueCompletions = function (types, separatorAfter, collector) {\n        if (types['object']) {\n            collector.add({\n                kind: this.getSuggestionKind('object'),\n                label: '{}',\n                insertText: this.getInsertTextForGuessedValue({}, separatorAfter),\n                insertTextFormat: InsertTextFormat.Snippet,\n                detail: localize('defaults.object', 'New object'),\n                documentation: ''\n            });\n        }\n        if (types['array']) {\n            collector.add({\n                kind: this.getSuggestionKind('array'),\n                label: '[]',\n                insertText: this.getInsertTextForGuessedValue([], separatorAfter),\n                insertTextFormat: InsertTextFormat.Snippet,\n                detail: localize('defaults.array', 'New array'),\n                documentation: ''\n            });\n        }\n    };\n    JSONCompletion.prototype.addBooleanValueCompletion = function (value, separatorAfter, collector) {\n        collector.add({\n            kind: this.getSuggestionKind('boolean'),\n            label: value ? 'true' : 'false',\n            insertText: this.getInsertTextForValue(value, separatorAfter),\n            insertTextFormat: InsertTextFormat.Snippet,\n            documentation: ''\n        });\n    };\n    JSONCompletion.prototype.addNullValueCompletion = function (separatorAfter, collector) {\n        collector.add({\n            kind: this.getSuggestionKind('null'),\n            label: 'null',\n            insertText: 'null' + separatorAfter,\n            insertTextFormat: InsertTextFormat.Snippet,\n            documentation: ''\n        });\n    };\n    JSONCompletion.prototype.addDollarSchemaCompletions = function (separatorAfter, collector) {\n        var _this = this;\n        var schemaIds = this.schemaService.getRegisteredSchemaIds(function (schema) { return schema === 'http' || schema === 'https'; });\n        schemaIds.forEach(function (schemaId) { return collector.add({\n            kind: CompletionItemKind.Module,\n            label: _this.getLabelForValue(schemaId),\n            filterText: _this.getFilterTextForValue(schemaId),\n            insertText: _this.getInsertTextForValue(schemaId, separatorAfter),\n            insertTextFormat: InsertTextFormat.Snippet, documentation: ''\n        }); });\n    };\n    JSONCompletion.prototype.getLabelForValue = function (value) {\n        var label = JSON.stringify(value);\n        if (label.length > 57) {\n            return label.substr(0, 57).trim() + '...';\n        }\n        return label;\n    };\n    JSONCompletion.prototype.getFilterTextForValue = function (value) {\n        return JSON.stringify(value);\n    };\n    JSONCompletion.prototype.getFilterTextForSnippetValue = function (value) {\n        return JSON.stringify(value).replace(/\\$\\{\\d+:([^}]+)\\}|\\$\\d+/g, '$1');\n    };\n    JSONCompletion.prototype.getLabelForSnippetValue = function (value) {\n        var label = JSON.stringify(value);\n        label = label.replace(/\\$\\{\\d+:([^}]+)\\}|\\$\\d+/g, '$1');\n        if (label.length > 57) {\n            return label.substr(0, 57).trim() + '...';\n        }\n        return label;\n    };\n    JSONCompletion.prototype.getInsertTextForPlainText = function (text) {\n        return text.replace(/[\\\\\\$\\}]/g, '\\\\$&'); // escape $, \\ and } \n    };\n    JSONCompletion.prototype.getInsertTextForValue = function (value, separatorAfter) {\n        var text = JSON.stringify(value, null, '\\t');\n        if (text === '{}') {\n            return '{\\n\\t$1\\n}' + separatorAfter;\n        }\n        else if (text === '[]') {\n            return '[\\n\\t$1\\n]' + separatorAfter;\n        }\n        return this.getInsertTextForPlainText(text + separatorAfter);\n    };\n    JSONCompletion.prototype.getInsertTextForSnippetValue = function (value, separatorAfter) {\n        var replacer = function (value) {\n            if (typeof value === 'string') {\n                if (value[0] === '^') {\n                    return value.substr(1);\n                }\n            }\n            return JSON.stringify(value);\n        };\n        return stringifyObject(value, '', replacer) + separatorAfter;\n    };\n    JSONCompletion.prototype.getInsertTextForGuessedValue = function (value, separatorAfter) {\n        switch (typeof value) {\n            case 'object':\n                if (value === null) {\n                    return '${1:null}' + separatorAfter;\n                }\n                return this.getInsertTextForValue(value, separatorAfter);\n            case 'string':\n                var snippetValue = JSON.stringify(value);\n                snippetValue = snippetValue.substr(1, snippetValue.length - 2); // remove quotes\n                snippetValue = this.getInsertTextForPlainText(snippetValue); // escape \\ and }\n                return '\"${1:' + snippetValue + '}\"' + separatorAfter;\n            case 'number':\n            case 'boolean':\n                return '${1:' + JSON.stringify(value) + '}' + separatorAfter;\n        }\n        return this.getInsertTextForValue(value, separatorAfter);\n    };\n    JSONCompletion.prototype.getSuggestionKind = function (type) {\n        if (Array.isArray(type)) {\n            var array = type;\n            type = array.length > 0 ? array[0] : null;\n        }\n        if (!type) {\n            return CompletionItemKind.Value;\n        }\n        switch (type) {\n            case 'string': return CompletionItemKind.Value;\n            case 'object': return CompletionItemKind.Module;\n            case 'property': return CompletionItemKind.Property;\n            default: return CompletionItemKind.Value;\n        }\n    };\n    JSONCompletion.prototype.getLabelTextForMatchingNode = function (node, document) {\n        switch (node.type) {\n            case 'array':\n                return '[]';\n            case 'object':\n                return '{}';\n            default:\n                var content = document.getText().substr(node.start, node.end - node.start);\n                return content;\n        }\n    };\n    JSONCompletion.prototype.getInsertTextForMatchingNode = function (node, document, separatorAfter) {\n        switch (node.type) {\n            case 'array':\n                return this.getInsertTextForValue([], separatorAfter);\n            case 'object':\n                return this.getInsertTextForValue({}, separatorAfter);\n            default:\n                var content = document.getText().substr(node.start, node.end - node.start) + separatorAfter;\n                return this.getInsertTextForPlainText(content);\n        }\n    };\n    JSONCompletion.prototype.getInsertTextForProperty = function (key, propertySchema, addValue, separatorAfter) {\n        var propertyText = this.getInsertTextForValue(key, '');\n        if (!addValue) {\n            return propertyText;\n        }\n        var resultText = propertyText + ': ';\n        var value;\n        var nValueProposals = 0;\n        if (propertySchema) {\n            if (Array.isArray(propertySchema.defaultSnippets)) {\n                if (propertySchema.defaultSnippets.length === 1) {\n                    var body = propertySchema.defaultSnippets[0].body;\n                    if (typeof body !== 'undefined') {\n                        value = this.getInsertTextForSnippetValue(body, '');\n                    }\n                }\n                nValueProposals += propertySchema.defaultSnippets.length;\n            }\n            if (propertySchema.enum) {\n                if (!value && propertySchema.enum.length === 1) {\n                    value = this.getInsertTextForGuessedValue(propertySchema.enum[0], '');\n                }\n                nValueProposals += propertySchema.enum.length;\n            }\n            if (typeof propertySchema.default !== 'undefined') {\n                if (!value) {\n                    value = this.getInsertTextForGuessedValue(propertySchema.default, '');\n                }\n                nValueProposals++;\n            }\n            if (nValueProposals === 0) {\n                var type = Array.isArray(propertySchema.type) ? propertySchema.type[0] : propertySchema.type;\n                if (!type) {\n                    if (propertySchema.properties) {\n                        type = 'object';\n                    }\n                    else if (propertySchema.items) {\n                        type = 'array';\n                    }\n                }\n                switch (type) {\n                    case 'boolean':\n                        value = '$1';\n                        break;\n                    case 'string':\n                        value = '\"$1\"';\n                        break;\n                    case 'object':\n                        value = '{\\n\\t$1\\n}';\n                        break;\n                    case 'array':\n                        value = '[\\n\\t$1\\n]';\n                        break;\n                    case 'number':\n                    case 'integer':\n                        value = '${1:0}';\n                        break;\n                    case 'null':\n                        value = '${1:null}';\n                        break;\n                    default:\n                        return propertyText;\n                }\n            }\n        }\n        if (!value || nValueProposals > 1) {\n            value = '$1';\n        }\n        return resultText + value + separatorAfter;\n    };\n    JSONCompletion.prototype.getCurrentWord = function (document, offset) {\n        var i = offset - 1;\n        var text = document.getText();\n        while (i >= 0 && ' \\t\\n\\r\\v\":{[,]}'.indexOf(text.charAt(i)) === -1) {\n            i--;\n        }\n        return text.substring(i + 1, offset);\n    };\n    JSONCompletion.prototype.evaluateSeparatorAfter = function (document, offset) {\n        var scanner = Json.createScanner(document.getText(), true);\n        scanner.setPosition(offset);\n        var token = scanner.scan();\n        switch (token) {\n            case 5 /* CommaToken */:\n            case 2 /* CloseBraceToken */:\n            case 4 /* CloseBracketToken */:\n            case 17 /* EOF */:\n                return '';\n            default:\n                return ',';\n        }\n    };\n    JSONCompletion.prototype.findItemAtOffset = function (node, document, offset) {\n        var scanner = Json.createScanner(document.getText(), true);\n        var children = node.getChildNodes();\n        for (var i = children.length - 1; i >= 0; i--) {\n            var child = children[i];\n            if (offset > child.end) {\n                scanner.setPosition(child.end);\n                var token = scanner.scan();\n                if (token === 5 /* CommaToken */ && offset >= scanner.getTokenOffset() + scanner.getTokenLength()) {\n                    return i + 1;\n                }\n                return i;\n            }\n            else if (offset >= child.start) {\n                return i;\n            }\n        }\n        return 0;\n    };\n    JSONCompletion.prototype.isInComment = function (document, start, offset) {\n        var scanner = Json.createScanner(document.getText(), false);\n        scanner.setPosition(start);\n        var token = scanner.scan();\n        while (token !== 17 /* EOF */ && (scanner.getTokenOffset() + scanner.getTokenLength() < offset)) {\n            token = scanner.scan();\n        }\n        return (token === 12 /* LineCommentTrivia */ || token === 13 /* BlockCommentTrivia */) && scanner.getTokenOffset() <= offset;\n    };\n    return JSONCompletion;\n}());\nexport { JSONCompletion };\n//# sourceMappingURL=jsonCompletion.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport function stringifyObject(obj, indent, stringifyLiteral) {\n    if (obj !== null && typeof obj === 'object') {\n        var newIndent = indent + '\\t';\n        if (Array.isArray(obj)) {\n            if (obj.length === 0) {\n                return '[]';\n            }\n            var result = '[\\n';\n            for (var i = 0; i < obj.length; i++) {\n                result += newIndent + stringifyObject(obj[i], newIndent, stringifyLiteral);\n                if (i < obj.length - 1) {\n                    result += ',';\n                }\n                result += '\\n';\n            }\n            result += indent + ']';\n            return result;\n        }\n        else {\n            var keys = Object.keys(obj);\n            if (keys.length === 0) {\n                return '{}';\n            }\n            var result = '{\\n';\n            for (var i = 0; i < keys.length; i++) {\n                var key = keys[i];\n                result += newIndent + JSON.stringify(key) + ': ' + stringifyObject(obj[key], newIndent, stringifyLiteral);\n                if (i < keys.length - 1) {\n                    result += ',';\n                }\n                result += '\\n';\n            }\n            result += indent + '}';\n            return result;\n        }\n    }\n    return stringifyLiteral(obj);\n}\n//# sourceMappingURL=json.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { Range } from '../../vscode-languageserver-types/main.js';\nvar JSONHover = /** @class */ (function () {\n    function JSONHover(schemaService, contributions, promiseConstructor) {\n        if (contributions === void 0) { contributions = []; }\n        this.schemaService = schemaService;\n        this.contributions = contributions;\n        this.promise = promiseConstructor || Promise;\n    }\n    JSONHover.prototype.doHover = function (document, position, doc) {\n        var offset = document.offsetAt(position);\n        var node = doc.getNodeFromOffset(offset);\n        if (!node || (node.type === 'object' || node.type === 'array') && offset > node.start + 1 && offset < node.end - 1) {\n            return this.promise.resolve(null);\n        }\n        var hoverRangeNode = node;\n        // use the property description when hovering over an object key\n        if (node.type === 'string') {\n            var stringNode = node;\n            if (stringNode.isKey) {\n                var propertyNode = node.parent;\n                node = propertyNode.value;\n                if (!node) {\n                    return this.promise.resolve(null);\n                }\n            }\n        }\n        var hoverRange = Range.create(document.positionAt(hoverRangeNode.start), document.positionAt(hoverRangeNode.end));\n        var createHover = function (contents) {\n            var result = {\n                contents: contents,\n                range: hoverRange\n            };\n            return result;\n        };\n        var location = node.getPath();\n        for (var i = this.contributions.length - 1; i >= 0; i--) {\n            var contribution = this.contributions[i];\n            var promise = contribution.getInfoContribution(document.uri, location);\n            if (promise) {\n                return promise.then(function (htmlContent) { return createHover(htmlContent); });\n            }\n        }\n        return this.schemaService.getSchemaForResource(document.uri, doc).then(function (schema) {\n            if (schema) {\n                var matchingSchemas = doc.getMatchingSchemas(schema.schema, node.start);\n                var title_1 = null;\n                var markdownDescription_1 = null;\n                var markdownEnumValueDescription_1 = null, enumValue_1 = null;\n                matchingSchemas.every(function (s) {\n                    if (s.node === node && !s.inverted && s.schema) {\n                        title_1 = title_1 || s.schema.title;\n                        markdownDescription_1 = markdownDescription_1 || s.schema.markdownDescription || toMarkdown(s.schema.description);\n                        if (s.schema.enum) {\n                            var idx = s.schema.enum.indexOf(node.getValue());\n                            if (s.schema.markdownEnumDescriptions) {\n                                markdownEnumValueDescription_1 = s.schema.markdownEnumDescriptions[idx];\n                            }\n                            else if (s.schema.enumDescriptions) {\n                                markdownEnumValueDescription_1 = toMarkdown(s.schema.enumDescriptions[idx]);\n                            }\n                            if (markdownEnumValueDescription_1) {\n                                enumValue_1 = s.schema.enum[idx];\n                                if (typeof enumValue_1 !== 'string') {\n                                    enumValue_1 = JSON.stringify(enumValue_1);\n                                }\n                            }\n                        }\n                    }\n                    return true;\n                });\n                var result = '';\n                if (title_1) {\n                    result = toMarkdown(title_1);\n                }\n                if (markdownDescription_1) {\n                    if (result.length > 0) {\n                        result += \"\\n\\n\";\n                    }\n                    result += markdownDescription_1;\n                }\n                if (markdownEnumValueDescription_1) {\n                    if (result.length > 0) {\n                        result += \"\\n\\n\";\n                    }\n                    result += \"`\" + toMarkdown(enumValue_1) + \"`: \" + markdownEnumValueDescription_1;\n                }\n                return createHover([result]);\n            }\n            return null;\n        });\n    };\n    return JSONHover;\n}());\nexport { JSONHover };\nfunction toMarkdown(plain) {\n    if (plain) {\n        var res = plain.replace(/([^\\n\\r])(\\r?\\n)([^\\n\\r])/gm, '$1\\n\\n$3'); // single new lines to \\n\\n (Markdown paragraph)\n        return res.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    return void 0;\n}\n//# sourceMappingURL=jsonHover.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport function equals(one, other) {\n    if (one === other) {\n        return true;\n    }\n    if (one === null || one === undefined || other === null || other === undefined) {\n        return false;\n    }\n    if (typeof one !== typeof other) {\n        return false;\n    }\n    if (typeof one !== 'object') {\n        return false;\n    }\n    if ((Array.isArray(one)) !== (Array.isArray(other))) {\n        return false;\n    }\n    var i, key;\n    if (Array.isArray(one)) {\n        if (one.length !== other.length) {\n            return false;\n        }\n        for (i = 0; i < one.length; i++) {\n            if (!equals(one[i], other[i])) {\n                return false;\n            }\n        }\n    }\n    else {\n        var oneKeys = [];\n        for (key in one) {\n            oneKeys.push(key);\n        }\n        oneKeys.sort();\n        var otherKeys = [];\n        for (key in other) {\n            otherKeys.push(key);\n        }\n        otherKeys.sort();\n        if (!equals(oneKeys, otherKeys)) {\n            return false;\n        }\n        for (i = 0; i < oneKeys.length; i++) {\n            if (!equals(one[oneKeys[i]], other[oneKeys[i]])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=objects.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport * as Json from '../../jsonc-parser/main.js';\nimport * as objects from '../utils/objects.js';\nimport * as nls from '../../../fillers/vscode-nls.js';\nimport Uri from '../../vscode-uri/index.js';\nvar localize = nls.loadMessageBundle();\nexport var ErrorCode;\n(function (ErrorCode) {\n    ErrorCode[ErrorCode[\"Undefined\"] = 0] = \"Undefined\";\n    ErrorCode[ErrorCode[\"EnumValueMismatch\"] = 1] = \"EnumValueMismatch\";\n    ErrorCode[ErrorCode[\"UnexpectedEndOfComment\"] = 257] = \"UnexpectedEndOfComment\";\n    ErrorCode[ErrorCode[\"UnexpectedEndOfString\"] = 258] = \"UnexpectedEndOfString\";\n    ErrorCode[ErrorCode[\"UnexpectedEndOfNumber\"] = 259] = \"UnexpectedEndOfNumber\";\n    ErrorCode[ErrorCode[\"InvalidUnicode\"] = 260] = \"InvalidUnicode\";\n    ErrorCode[ErrorCode[\"InvalidEscapeCharacter\"] = 261] = \"InvalidEscapeCharacter\";\n    ErrorCode[ErrorCode[\"InvalidCharacter\"] = 262] = \"InvalidCharacter\";\n    ErrorCode[ErrorCode[\"PropertyExpected\"] = 513] = \"PropertyExpected\";\n    ErrorCode[ErrorCode[\"CommaExpected\"] = 514] = \"CommaExpected\";\n    ErrorCode[ErrorCode[\"ColonExpected\"] = 515] = \"ColonExpected\";\n    ErrorCode[ErrorCode[\"ValueExpected\"] = 516] = \"ValueExpected\";\n    ErrorCode[ErrorCode[\"CommaOrCloseBacketExpected\"] = 517] = \"CommaOrCloseBacketExpected\";\n    ErrorCode[ErrorCode[\"CommaOrCloseBraceExpected\"] = 518] = \"CommaOrCloseBraceExpected\";\n    ErrorCode[ErrorCode[\"TrailingComma\"] = 519] = \"TrailingComma\";\n})(ErrorCode || (ErrorCode = {}));\nvar colorHexPattern = /^#([0-9A-Fa-f]{3,4}|([0-9A-Fa-f]{2}){3,4})$/;\nvar emailPattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\nexport var ProblemSeverity;\n(function (ProblemSeverity) {\n    ProblemSeverity[\"Ignore\"] = \"ignore\";\n    ProblemSeverity[\"Error\"] = \"error\";\n    ProblemSeverity[\"Warning\"] = \"warning\";\n})(ProblemSeverity || (ProblemSeverity = {}));\nvar ASTNode = /** @class */ (function () {\n    function ASTNode(parent, type, location, start, end) {\n        this.type = type;\n        this.location = location;\n        this.start = start;\n        this.end = end;\n        this.parent = parent;\n    }\n    ASTNode.prototype.getPath = function () {\n        var path = this.parent ? this.parent.getPath() : [];\n        if (this.location !== null) {\n            path.push(this.location);\n        }\n        return path;\n    };\n    ASTNode.prototype.getChildNodes = function () {\n        return [];\n    };\n    ASTNode.prototype.getLastChild = function () {\n        return null;\n    };\n    ASTNode.prototype.getValue = function () {\n        // override in children\n        return;\n    };\n    ASTNode.prototype.contains = function (offset, includeRightBound) {\n        if (includeRightBound === void 0) { includeRightBound = false; }\n        return offset >= this.start && offset < this.end || includeRightBound && offset === this.end;\n    };\n    ASTNode.prototype.toString = function () {\n        return 'type: ' + this.type + ' (' + this.start + '/' + this.end + ')' + (this.parent ? ' parent: {' + this.parent.toString() + '}' : '');\n    };\n    ASTNode.prototype.visit = function (visitor) {\n        return visitor(this);\n    };\n    ASTNode.prototype.getNodeFromOffset = function (offset) {\n        var findNode = function (node) {\n            if (offset >= node.start && offset < node.end) {\n                var children = node.getChildNodes();\n                for (var i = 0; i < children.length && children[i].start <= offset; i++) {\n                    var item = findNode(children[i]);\n                    if (item) {\n                        return item;\n                    }\n                }\n                return node;\n            }\n            return null;\n        };\n        return findNode(this);\n    };\n    ASTNode.prototype.getNodeFromOffsetEndInclusive = function (offset) {\n        var findNode = function (node) {\n            if (offset >= node.start && offset <= node.end) {\n                var children = node.getChildNodes();\n                for (var i = 0; i < children.length && children[i].start <= offset; i++) {\n                    var item = findNode(children[i]);\n                    if (item) {\n                        return item;\n                    }\n                }\n                return node;\n            }\n            return null;\n        };\n        return findNode(this);\n    };\n    ASTNode.prototype.validate = function (schema, validationResult, matchingSchemas) {\n        var _this = this;\n        if (!matchingSchemas.include(this)) {\n            return;\n        }\n        if (Array.isArray(schema.type)) {\n            if (schema.type.indexOf(this.type) === -1) {\n                validationResult.problems.push({\n                    location: { start: this.start, end: this.end },\n                    severity: ProblemSeverity.Warning,\n                    message: schema.errorMessage || localize('typeArrayMismatchWarning', 'Incorrect type. Expected one of {0}.', schema.type.join(', '))\n                });\n            }\n        }\n        else if (schema.type) {\n            if (this.type !== schema.type) {\n                validationResult.problems.push({\n                    location: { start: this.start, end: this.end },\n                    severity: ProblemSeverity.Warning,\n                    message: schema.errorMessage || localize('typeMismatchWarning', 'Incorrect type. Expected \"{0}\".', schema.type)\n                });\n            }\n        }\n        if (Array.isArray(schema.allOf)) {\n            schema.allOf.forEach(function (subSchemaRef) {\n                _this.validate(asSchema(subSchemaRef), validationResult, matchingSchemas);\n            });\n        }\n        var notSchema = asSchema(schema.not);\n        if (notSchema) {\n            var subValidationResult = new ValidationResult();\n            var subMatchingSchemas = matchingSchemas.newSub();\n            this.validate(notSchema, subValidationResult, subMatchingSchemas);\n            if (!subValidationResult.hasProblems()) {\n                validationResult.problems.push({\n                    location: { start: this.start, end: this.end },\n                    severity: ProblemSeverity.Warning,\n                    message: localize('notSchemaWarning', \"Matches a schema that is not allowed.\")\n                });\n            }\n            subMatchingSchemas.schemas.forEach(function (ms) {\n                ms.inverted = !ms.inverted;\n                matchingSchemas.add(ms);\n            });\n        }\n        var testAlternatives = function (alternatives, maxOneMatch) {\n            var matches = [];\n            // remember the best match that is used for error messages\n            var bestMatch = null;\n            alternatives.forEach(function (subSchemaRef) {\n                var subSchema = asSchema(subSchemaRef);\n                var subValidationResult = new ValidationResult();\n                var subMatchingSchemas = matchingSchemas.newSub();\n                _this.validate(subSchema, subValidationResult, subMatchingSchemas);\n                if (!subValidationResult.hasProblems()) {\n                    matches.push(subSchema);\n                }\n                if (!bestMatch) {\n                    bestMatch = { schema: subSchema, validationResult: subValidationResult, matchingSchemas: subMatchingSchemas };\n                }\n                else {\n                    if (!maxOneMatch && !subValidationResult.hasProblems() && !bestMatch.validationResult.hasProblems()) {\n                        // no errors, both are equally good matches\n                        bestMatch.matchingSchemas.merge(subMatchingSchemas);\n                        bestMatch.validationResult.propertiesMatches += subValidationResult.propertiesMatches;\n                        bestMatch.validationResult.propertiesValueMatches += subValidationResult.propertiesValueMatches;\n                    }\n                    else {\n                        var compareResult = subValidationResult.compare(bestMatch.validationResult);\n                        if (compareResult > 0) {\n                            // our node is the best matching so far\n                            bestMatch = { schema: subSchema, validationResult: subValidationResult, matchingSchemas: subMatchingSchemas };\n                        }\n                        else if (compareResult === 0) {\n                            // there's already a best matching but we are as good\n                            bestMatch.matchingSchemas.merge(subMatchingSchemas);\n                            bestMatch.validationResult.mergeEnumValues(subValidationResult);\n                        }\n                    }\n                }\n            });\n            if (matches.length > 1 && maxOneMatch) {\n                validationResult.problems.push({\n                    location: { start: _this.start, end: _this.start + 1 },\n                    severity: ProblemSeverity.Warning,\n                    message: localize('oneOfWarning', \"Matches multiple schemas when only one must validate.\")\n                });\n            }\n            if (bestMatch !== null) {\n                validationResult.merge(bestMatch.validationResult);\n                validationResult.propertiesMatches += bestMatch.validationResult.propertiesMatches;\n                validationResult.propertiesValueMatches += bestMatch.validationResult.propertiesValueMatches;\n                matchingSchemas.merge(bestMatch.matchingSchemas);\n            }\n            return matches.length;\n        };\n        if (Array.isArray(schema.anyOf)) {\n            testAlternatives(schema.anyOf, false);\n        }\n        if (Array.isArray(schema.oneOf)) {\n            testAlternatives(schema.oneOf, true);\n        }\n        if (Array.isArray(schema.enum)) {\n            var val = this.getValue();\n            var enumValueMatch = false;\n            for (var _i = 0, _a = schema.enum; _i < _a.length; _i++) {\n                var e = _a[_i];\n                if (objects.equals(val, e)) {\n                    enumValueMatch = true;\n                    break;\n                }\n            }\n            validationResult.enumValues = schema.enum;\n            validationResult.enumValueMatch = enumValueMatch;\n            if (!enumValueMatch) {\n                validationResult.problems.push({\n                    location: { start: this.start, end: this.end },\n                    severity: ProblemSeverity.Warning,\n                    code: ErrorCode.EnumValueMismatch,\n                    message: schema.errorMessage || localize('enumWarning', 'Value is not accepted. Valid values: {0}.', schema.enum.map(function (v) { return JSON.stringify(v); }).join(', '))\n                });\n            }\n        }\n        if (schema.const) {\n            var val = this.getValue();\n            if (!objects.equals(val, schema.const)) {\n                validationResult.problems.push({\n                    location: { start: this.start, end: this.end },\n                    severity: ProblemSeverity.Warning,\n                    code: ErrorCode.EnumValueMismatch,\n                    message: schema.errorMessage || localize('constWarning', 'Value must be {0}.', JSON.stringify(schema.const))\n                });\n                validationResult.enumValueMatch = false;\n            }\n            else {\n                validationResult.enumValueMatch = true;\n            }\n            validationResult.enumValues = [schema.const];\n        }\n        if (schema.deprecationMessage && this.parent) {\n            validationResult.problems.push({\n                location: { start: this.parent.start, end: this.parent.end },\n                severity: ProblemSeverity.Warning,\n                message: schema.deprecationMessage\n            });\n        }\n        matchingSchemas.add({ node: this, schema: schema });\n    };\n    return ASTNode;\n}());\nexport { ASTNode };\nvar NullASTNode = /** @class */ (function (_super) {\n    __extends(NullASTNode, _super);\n    function NullASTNode(parent, name, start, end) {\n        return _super.call(this, parent, 'null', name, start, end) || this;\n    }\n    NullASTNode.prototype.getValue = function () {\n        return null;\n    };\n    return NullASTNode;\n}(ASTNode));\nexport { NullASTNode };\nvar BooleanASTNode = /** @class */ (function (_super) {\n    __extends(BooleanASTNode, _super);\n    function BooleanASTNode(parent, name, value, start, end) {\n        var _this = _super.call(this, parent, 'boolean', name, start, end) || this;\n        _this.value = value;\n        return _this;\n    }\n    BooleanASTNode.prototype.getValue = function () {\n        return this.value;\n    };\n    return BooleanASTNode;\n}(ASTNode));\nexport { BooleanASTNode };\nvar ArrayASTNode = /** @class */ (function (_super) {\n    __extends(ArrayASTNode, _super);\n    function ArrayASTNode(parent, name, start, end) {\n        var _this = _super.call(this, parent, 'array', name, start, end) || this;\n        _this.items = [];\n        return _this;\n    }\n    ArrayASTNode.prototype.getChildNodes = function () {\n        return this.items;\n    };\n    ArrayASTNode.prototype.getLastChild = function () {\n        return this.items[this.items.length - 1];\n    };\n    ArrayASTNode.prototype.getValue = function () {\n        return this.items.map(function (v) { return v.getValue(); });\n    };\n    ArrayASTNode.prototype.addItem = function (item) {\n        if (item) {\n            this.items.push(item);\n            return true;\n        }\n        return false;\n    };\n    ArrayASTNode.prototype.visit = function (visitor) {\n        var ctn = visitor(this);\n        for (var i = 0; i < this.items.length && ctn; i++) {\n            ctn = this.items[i].visit(visitor);\n        }\n        return ctn;\n    };\n    ArrayASTNode.prototype.validate = function (schema, validationResult, matchingSchemas) {\n        var _this = this;\n        if (!matchingSchemas.include(this)) {\n            return;\n        }\n        _super.prototype.validate.call(this, schema, validationResult, matchingSchemas);\n        if (Array.isArray(schema.items)) {\n            var subSchemas_1 = schema.items;\n            subSchemas_1.forEach(function (subSchemaRef, index) {\n                var subSchema = asSchema(subSchemaRef);\n                var itemValidationResult = new ValidationResult();\n                var item = _this.items[index];\n                if (item) {\n                    item.validate(subSchema, itemValidationResult, matchingSchemas);\n                    validationResult.mergePropertyMatch(itemValidationResult);\n                }\n                else if (_this.items.length >= subSchemas_1.length) {\n                    validationResult.propertiesValueMatches++;\n                }\n            });\n            if (this.items.length > subSchemas_1.length) {\n                if (typeof schema.additionalItems === 'object') {\n                    for (var i = subSchemas_1.length; i < this.items.length; i++) {\n                        var itemValidationResult = new ValidationResult();\n                        this.items[i].validate(schema.additionalItems, itemValidationResult, matchingSchemas);\n                        validationResult.mergePropertyMatch(itemValidationResult);\n                    }\n                }\n                else if (schema.additionalItems === false) {\n                    validationResult.problems.push({\n                        location: { start: this.start, end: this.end },\n                        severity: ProblemSeverity.Warning,\n                        message: localize('additionalItemsWarning', 'Array has too many items according to schema. Expected {0} or fewer.', subSchemas_1.length)\n                    });\n                }\n            }\n        }\n        else {\n            var itemSchema_1 = asSchema(schema.items);\n            if (itemSchema_1) {\n                this.items.forEach(function (item) {\n                    var itemValidationResult = new ValidationResult();\n                    item.validate(itemSchema_1, itemValidationResult, matchingSchemas);\n                    validationResult.mergePropertyMatch(itemValidationResult);\n                });\n            }\n        }\n        var containsSchema = asSchema(schema.contains);\n        if (containsSchema) {\n            var doesContain = this.items.some(function (item) {\n                var itemValidationResult = new ValidationResult();\n                item.validate(containsSchema, itemValidationResult, NoOpSchemaCollector.instance);\n                return !itemValidationResult.hasProblems();\n            });\n            if (!doesContain) {\n                validationResult.problems.push({\n                    location: { start: this.start, end: this.end },\n                    severity: ProblemSeverity.Warning,\n                    message: schema.errorMessage || localize('requiredItemMissingWarning', 'Array does not contain required item.', schema.minItems)\n                });\n            }\n        }\n        if (schema.minItems && this.items.length < schema.minItems) {\n            validationResult.problems.push({\n                location: { start: this.start, end: this.end },\n                severity: ProblemSeverity.Warning,\n                message: localize('minItemsWarning', 'Array has too few items. Expected {0} or more.', schema.minItems)\n            });\n        }\n        if (schema.maxItems && this.items.length > schema.maxItems) {\n            validationResult.problems.push({\n                location: { start: this.start, end: this.end },\n                severity: ProblemSeverity.Warning,\n                message: localize('maxItemsWarning', 'Array has too many items. Expected {0} or fewer.', schema.minItems)\n            });\n        }\n        if (schema.uniqueItems === true) {\n            var values_1 = this.items.map(function (node) {\n                return node.getValue();\n            });\n            var duplicates = values_1.some(function (value, index) {\n                return index !== values_1.lastIndexOf(value);\n            });\n            if (duplicates) {\n                validationResult.problems.push({\n                    location: { start: this.start, end: this.end },\n                    severity: ProblemSeverity.Warning,\n                    message: localize('uniqueItemsWarning', 'Array has duplicate items.')\n                });\n            }\n        }\n    };\n    return ArrayASTNode;\n}(ASTNode));\nexport { ArrayASTNode };\nvar NumberASTNode = /** @class */ (function (_super) {\n    __extends(NumberASTNode, _super);\n    function NumberASTNode(parent, name, start, end) {\n        var _this = _super.call(this, parent, 'number', name, start, end) || this;\n        _this.isInteger = true;\n        _this.value = Number.NaN;\n        return _this;\n    }\n    NumberASTNode.prototype.getValue = function () {\n        return this.value;\n    };\n    NumberASTNode.prototype.validate = function (schema, validationResult, matchingSchemas) {\n        if (!matchingSchemas.include(this)) {\n            return;\n        }\n        // work around type validation in the base class\n        var typeIsInteger = false;\n        if (schema.type === 'integer' || (Array.isArray(schema.type) && schema.type.indexOf('integer') !== -1)) {\n            typeIsInteger = true;\n        }\n        if (typeIsInteger && this.isInteger === true) {\n            this.type = 'integer';\n        }\n        _super.prototype.validate.call(this, schema, validationResult, matchingSchemas);\n        this.type = 'number';\n        var val = this.getValue();\n        if (typeof schema.multipleOf === 'number') {\n            if (val % schema.multipleOf !== 0) {\n                validationResult.problems.push({\n                    location: { start: this.start, end: this.end },\n                    severity: ProblemSeverity.Warning,\n                    message: localize('multipleOfWarning', 'Value is not divisible by {0}.', schema.multipleOf)\n                });\n            }\n        }\n        function getExclusiveLimit(limit, exclusive) {\n            if (typeof exclusive === 'number') {\n                return exclusive;\n            }\n            if (typeof exclusive === 'boolean' && exclusive) {\n                return limit;\n            }\n            return void 0;\n        }\n        function getLimit(limit, exclusive) {\n            if (typeof exclusive !== 'boolean' || !exclusive) {\n                return limit;\n            }\n            return void 0;\n        }\n        var exclusiveMinimum = getExclusiveLimit(schema.minimum, schema.exclusiveMinimum);\n        if (typeof exclusiveMinimum === 'number' && val <= exclusiveMinimum) {\n            validationResult.problems.push({\n                location: { start: this.start, end: this.end },\n                severity: ProblemSeverity.Warning,\n                message: localize('exclusiveMinimumWarning', 'Value is below the exclusive minimum of {0}.', exclusiveMinimum)\n            });\n        }\n        var exclusiveMaximum = getExclusiveLimit(schema.maximum, schema.exclusiveMaximum);\n        if (typeof exclusiveMaximum === 'number' && val >= exclusiveMaximum) {\n            validationResult.problems.push({\n                location: { start: this.start, end: this.end },\n                severity: ProblemSeverity.Warning,\n                message: localize('exclusiveMaximumWarning', 'Value is above the exclusive maximum of {0}.', exclusiveMaximum)\n            });\n        }\n        var minimum = getLimit(schema.minimum, schema.exclusiveMinimum);\n        if (typeof minimum === 'number' && val < minimum) {\n            validationResult.problems.push({\n                location: { start: this.start, end: this.end },\n                severity: ProblemSeverity.Warning,\n                message: localize('minimumWarning', 'Value is below the minimum of {0}.', minimum)\n            });\n        }\n        var maximum = getLimit(schema.maximum, schema.exclusiveMaximum);\n        if (typeof maximum === 'number' && val > maximum) {\n            validationResult.problems.push({\n                location: { start: this.start, end: this.end },\n                severity: ProblemSeverity.Warning,\n                message: localize('maximumWarning', 'Value is above the maximum of {0}.', maximum)\n            });\n        }\n    };\n    return NumberASTNode;\n}(ASTNode));\nexport { NumberASTNode };\nvar StringASTNode = /** @class */ (function (_super) {\n    __extends(StringASTNode, _super);\n    function StringASTNode(parent, name, isKey, start, end) {\n        var _this = _super.call(this, parent, 'string', name, start, end) || this;\n        _this.isKey = isKey;\n        _this.value = '';\n        return _this;\n    }\n    StringASTNode.prototype.getValue = function () {\n        return this.value;\n    };\n    StringASTNode.prototype.validate = function (schema, validationResult, matchingSchemas) {\n        if (!matchingSchemas.include(this)) {\n            return;\n        }\n        _super.prototype.validate.call(this, schema, validationResult, matchingSchemas);\n        if (schema.minLength && this.value.length < schema.minLength) {\n            validationResult.problems.push({\n                location: { start: this.start, end: this.end },\n                severity: ProblemSeverity.Warning,\n                message: localize('minLengthWarning', 'String is shorter than the minimum length of {0}.', schema.minLength)\n            });\n        }\n        if (schema.maxLength && this.value.length > schema.maxLength) {\n            validationResult.problems.push({\n                location: { start: this.start, end: this.end },\n                severity: ProblemSeverity.Warning,\n                message: localize('maxLengthWarning', 'String is longer than the maximum length of {0}.', schema.maxLength)\n            });\n        }\n        if (schema.pattern) {\n            var regex = new RegExp(schema.pattern);\n            if (!regex.test(this.value)) {\n                validationResult.problems.push({\n                    location: { start: this.start, end: this.end },\n                    severity: ProblemSeverity.Warning,\n                    message: schema.patternErrorMessage || schema.errorMessage || localize('patternWarning', 'String does not match the pattern of \"{0}\".', schema.pattern)\n                });\n            }\n        }\n        if (schema.format) {\n            switch (schema.format) {\n                case 'uri':\n                case 'uri-reference':\n                    {\n                        var errorMessage = void 0;\n                        if (!this.value) {\n                            errorMessage = localize('uriEmpty', 'URI expected.');\n                        }\n                        else {\n                            try {\n                                var uri = Uri.parse(this.value);\n                                if (!uri.scheme && schema.format === 'uri') {\n                                    errorMessage = localize('uriSchemeMissing', 'URI with a scheme is expected.');\n                                }\n                            }\n                            catch (e) {\n                                errorMessage = e.message;\n                            }\n                        }\n                        if (errorMessage) {\n                            validationResult.problems.push({\n                                location: { start: this.start, end: this.end },\n                                severity: ProblemSeverity.Warning,\n                                message: schema.patternErrorMessage || schema.errorMessage || localize('uriFormatWarning', 'String is not a URI: {0}', errorMessage)\n                            });\n                        }\n                    }\n                    break;\n                case 'email':\n                    {\n                        if (!this.value.match(emailPattern)) {\n                            validationResult.problems.push({\n                                location: { start: this.start, end: this.end },\n                                severity: ProblemSeverity.Warning,\n                                message: schema.patternErrorMessage || schema.errorMessage || localize('emailFormatWarning', 'String is not an e-mail address.')\n                            });\n                        }\n                    }\n                    break;\n                case 'color-hex':\n                    {\n                        if (!this.value.match(colorHexPattern)) {\n                            validationResult.problems.push({\n                                location: { start: this.start, end: this.end },\n                                severity: ProblemSeverity.Warning,\n                                message: schema.patternErrorMessage || schema.errorMessage || localize('colorHexFormatWarning', 'Invalid color format. Use #RGB, #RGBA, #RRGGBB or #RRGGBBAA.')\n                            });\n                        }\n                    }\n                    break;\n                default:\n            }\n        }\n    };\n    return StringASTNode;\n}(ASTNode));\nexport { StringASTNode };\nvar PropertyASTNode = /** @class */ (function (_super) {\n    __extends(PropertyASTNode, _super);\n    function PropertyASTNode(parent, key) {\n        var _this = _super.call(this, parent, 'property', null, key.start) || this;\n        _this.key = key;\n        key.parent = _this;\n        key.location = key.value;\n        _this.colonOffset = -1;\n        return _this;\n    }\n    PropertyASTNode.prototype.getChildNodes = function () {\n        return this.value ? [this.key, this.value] : [this.key];\n    };\n    PropertyASTNode.prototype.getLastChild = function () {\n        return this.value;\n    };\n    PropertyASTNode.prototype.setValue = function (value) {\n        this.value = value;\n        return value !== null;\n    };\n    PropertyASTNode.prototype.visit = function (visitor) {\n        return visitor(this) && this.key.visit(visitor) && this.value && this.value.visit(visitor);\n    };\n    PropertyASTNode.prototype.validate = function (schema, validationResult, matchingSchemas) {\n        if (!matchingSchemas.include(this)) {\n            return;\n        }\n        if (this.value) {\n            this.value.validate(schema, validationResult, matchingSchemas);\n        }\n    };\n    return PropertyASTNode;\n}(ASTNode));\nexport { PropertyASTNode };\nvar ObjectASTNode = /** @class */ (function (_super) {\n    __extends(ObjectASTNode, _super);\n    function ObjectASTNode(parent, name, start, end) {\n        var _this = _super.call(this, parent, 'object', name, start, end) || this;\n        _this.properties = [];\n        return _this;\n    }\n    ObjectASTNode.prototype.getChildNodes = function () {\n        return this.properties;\n    };\n    ObjectASTNode.prototype.getLastChild = function () {\n        return this.properties[this.properties.length - 1];\n    };\n    ObjectASTNode.prototype.addProperty = function (node) {\n        if (!node) {\n            return false;\n        }\n        this.properties.push(node);\n        return true;\n    };\n    ObjectASTNode.prototype.getFirstProperty = function (key) {\n        for (var i = 0; i < this.properties.length; i++) {\n            if (this.properties[i].key.value === key) {\n                return this.properties[i];\n            }\n        }\n        return null;\n    };\n    ObjectASTNode.prototype.getKeyList = function () {\n        return this.properties.map(function (p) { return p.key.getValue(); });\n    };\n    ObjectASTNode.prototype.getValue = function () {\n        var value = Object.create(null);\n        this.properties.forEach(function (p) {\n            var v = p.value && p.value.getValue();\n            if (typeof v !== 'undefined') {\n                value[p.key.getValue()] = v;\n            }\n        });\n        return value;\n    };\n    ObjectASTNode.prototype.visit = function (visitor) {\n        var ctn = visitor(this);\n        for (var i = 0; i < this.properties.length && ctn; i++) {\n            ctn = this.properties[i].visit(visitor);\n        }\n        return ctn;\n    };\n    ObjectASTNode.prototype.validate = function (schema, validationResult, matchingSchemas) {\n        var _this = this;\n        if (!matchingSchemas.include(this)) {\n            return;\n        }\n        _super.prototype.validate.call(this, schema, validationResult, matchingSchemas);\n        var seenKeys = Object.create(null);\n        var unprocessedProperties = [];\n        this.properties.forEach(function (node) {\n            var key = node.key.value;\n            seenKeys[key] = node.value;\n            unprocessedProperties.push(key);\n        });\n        if (Array.isArray(schema.required)) {\n            schema.required.forEach(function (propertyName) {\n                if (!seenKeys[propertyName]) {\n                    var key = _this.parent && _this.parent && _this.parent.key;\n                    var location = key ? { start: key.start, end: key.end } : { start: _this.start, end: _this.start + 1 };\n                    validationResult.problems.push({\n                        location: location,\n                        severity: ProblemSeverity.Warning,\n                        message: localize('MissingRequiredPropWarning', 'Missing property \"{0}\".', propertyName)\n                    });\n                }\n            });\n        }\n        var propertyProcessed = function (prop) {\n            var index = unprocessedProperties.indexOf(prop);\n            while (index >= 0) {\n                unprocessedProperties.splice(index, 1);\n                index = unprocessedProperties.indexOf(prop);\n            }\n        };\n        if (schema.properties) {\n            Object.keys(schema.properties).forEach(function (propertyName) {\n                propertyProcessed(propertyName);\n                var propertySchema = schema.properties[propertyName];\n                var child = seenKeys[propertyName];\n                if (child) {\n                    if (typeof propertySchema === 'boolean') {\n                        if (!propertySchema) {\n                            var propertyNode = child.parent;\n                            validationResult.problems.push({\n                                location: { start: propertyNode.key.start, end: propertyNode.key.end },\n                                severity: ProblemSeverity.Warning,\n                                message: schema.errorMessage || localize('DisallowedExtraPropWarning', 'Property {0} is not allowed.', propertyName)\n                            });\n                        }\n                        else {\n                            validationResult.propertiesMatches++;\n                            validationResult.propertiesValueMatches++;\n                        }\n                    }\n                    else {\n                        var propertyValidationResult = new ValidationResult();\n                        child.validate(propertySchema, propertyValidationResult, matchingSchemas);\n                        validationResult.mergePropertyMatch(propertyValidationResult);\n                    }\n                }\n            });\n        }\n        if (schema.patternProperties) {\n            Object.keys(schema.patternProperties).forEach(function (propertyPattern) {\n                var regex = new RegExp(propertyPattern);\n                unprocessedProperties.slice(0).forEach(function (propertyName) {\n                    if (regex.test(propertyName)) {\n                        propertyProcessed(propertyName);\n                        var child = seenKeys[propertyName];\n                        if (child) {\n                            var propertySchema = schema.patternProperties[propertyPattern];\n                            if (typeof propertySchema === 'boolean') {\n                                if (!propertySchema) {\n                                    var propertyNode = child.parent;\n                                    validationResult.problems.push({\n                                        location: { start: propertyNode.key.start, end: propertyNode.key.end },\n                                        severity: ProblemSeverity.Warning,\n                                        message: schema.errorMessage || localize('DisallowedExtraPropWarning', 'Property {0} is not allowed.', propertyName)\n                                    });\n                                }\n                                else {\n                                    validationResult.propertiesMatches++;\n                                    validationResult.propertiesValueMatches++;\n                                }\n                            }\n                            else {\n                                var propertyValidationResult = new ValidationResult();\n                                child.validate(propertySchema, propertyValidationResult, matchingSchemas);\n                                validationResult.mergePropertyMatch(propertyValidationResult);\n                            }\n                        }\n                    }\n                });\n            });\n        }\n        if (typeof schema.additionalProperties === 'object') {\n            unprocessedProperties.forEach(function (propertyName) {\n                var child = seenKeys[propertyName];\n                if (child) {\n                    var propertyValidationResult = new ValidationResult();\n                    child.validate(schema.additionalProperties, propertyValidationResult, matchingSchemas);\n                    validationResult.mergePropertyMatch(propertyValidationResult);\n                }\n            });\n        }\n        else if (schema.additionalProperties === false) {\n            if (unprocessedProperties.length > 0) {\n                unprocessedProperties.forEach(function (propertyName) {\n                    var child = seenKeys[propertyName];\n                    if (child) {\n                        var propertyNode = child.parent;\n                        validationResult.problems.push({\n                            location: { start: propertyNode.key.start, end: propertyNode.key.end },\n                            severity: ProblemSeverity.Warning,\n                            message: schema.errorMessage || localize('DisallowedExtraPropWarning', 'Property {0} is not allowed.', propertyName)\n                        });\n                    }\n                });\n            }\n        }\n        if (schema.maxProperties) {\n            if (this.properties.length > schema.maxProperties) {\n                validationResult.problems.push({\n                    location: { start: this.start, end: this.end },\n                    severity: ProblemSeverity.Warning,\n                    message: localize('MaxPropWarning', 'Object has more properties than limit of {0}.', schema.maxProperties)\n                });\n            }\n        }\n        if (schema.minProperties) {\n            if (this.properties.length < schema.minProperties) {\n                validationResult.problems.push({\n                    location: { start: this.start, end: this.end },\n                    severity: ProblemSeverity.Warning,\n                    message: localize('MinPropWarning', 'Object has fewer properties than the required number of {0}', schema.minProperties)\n                });\n            }\n        }\n        if (schema.dependencies) {\n            Object.keys(schema.dependencies).forEach(function (key) {\n                var prop = seenKeys[key];\n                if (prop) {\n                    var propertyDep = schema.dependencies[key];\n                    if (Array.isArray(propertyDep)) {\n                        propertyDep.forEach(function (requiredProp) {\n                            if (!seenKeys[requiredProp]) {\n                                validationResult.problems.push({\n                                    location: { start: _this.start, end: _this.end },\n                                    severity: ProblemSeverity.Warning,\n                                    message: localize('RequiredDependentPropWarning', 'Object is missing property {0} required by property {1}.', requiredProp, key)\n                                });\n                            }\n                            else {\n                                validationResult.propertiesValueMatches++;\n                            }\n                        });\n                    }\n                    else {\n                        var propertySchema = asSchema(propertyDep);\n                        if (propertySchema) {\n                            var propertyValidationResult = new ValidationResult();\n                            _this.validate(propertySchema, propertyValidationResult, matchingSchemas);\n                            validationResult.mergePropertyMatch(propertyValidationResult);\n                        }\n                    }\n                }\n            });\n        }\n        var propertyNames = asSchema(schema.propertyNames);\n        if (propertyNames) {\n            this.properties.forEach(function (f) {\n                var key = f.key;\n                if (key) {\n                    key.validate(propertyNames, validationResult, NoOpSchemaCollector.instance);\n                }\n            });\n        }\n    };\n    return ObjectASTNode;\n}(ASTNode));\nexport { ObjectASTNode };\n//region\nexport function asSchema(schema) {\n    if (typeof schema === 'boolean') {\n        return schema ? {} : { \"not\": {} };\n    }\n    return schema;\n}\nexport var EnumMatch;\n(function (EnumMatch) {\n    EnumMatch[EnumMatch[\"Key\"] = 0] = \"Key\";\n    EnumMatch[EnumMatch[\"Enum\"] = 1] = \"Enum\";\n})(EnumMatch || (EnumMatch = {}));\nvar SchemaCollector = /** @class */ (function () {\n    function SchemaCollector(focusOffset, exclude) {\n        if (focusOffset === void 0) { focusOffset = -1; }\n        if (exclude === void 0) { exclude = null; }\n        this.focusOffset = focusOffset;\n        this.exclude = exclude;\n        this.schemas = [];\n    }\n    SchemaCollector.prototype.add = function (schema) {\n        this.schemas.push(schema);\n    };\n    SchemaCollector.prototype.merge = function (other) {\n        (_a = this.schemas).push.apply(_a, other.schemas);\n        var _a;\n    };\n    SchemaCollector.prototype.include = function (node) {\n        return (this.focusOffset === -1 || node.contains(this.focusOffset)) && (node !== this.exclude);\n    };\n    SchemaCollector.prototype.newSub = function () {\n        return new SchemaCollector(-1, this.exclude);\n    };\n    return SchemaCollector;\n}());\nvar NoOpSchemaCollector = /** @class */ (function () {\n    function NoOpSchemaCollector() {\n    }\n    Object.defineProperty(NoOpSchemaCollector.prototype, \"schemas\", {\n        get: function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    NoOpSchemaCollector.prototype.add = function (schema) { };\n    NoOpSchemaCollector.prototype.merge = function (other) { };\n    NoOpSchemaCollector.prototype.include = function (node) { return true; };\n    NoOpSchemaCollector.prototype.newSub = function () { return this; };\n    NoOpSchemaCollector.instance = new NoOpSchemaCollector();\n    return NoOpSchemaCollector;\n}());\nvar ValidationResult = /** @class */ (function () {\n    function ValidationResult() {\n        this.problems = [];\n        this.propertiesMatches = 0;\n        this.propertiesValueMatches = 0;\n        this.primaryValueMatches = 0;\n        this.enumValueMatch = false;\n        this.enumValues = null;\n    }\n    ValidationResult.prototype.hasProblems = function () {\n        return !!this.problems.length;\n    };\n    ValidationResult.prototype.mergeAll = function (validationResults) {\n        var _this = this;\n        validationResults.forEach(function (validationResult) {\n            _this.merge(validationResult);\n        });\n    };\n    ValidationResult.prototype.merge = function (validationResult) {\n        this.problems = this.problems.concat(validationResult.problems);\n    };\n    ValidationResult.prototype.mergeEnumValues = function (validationResult) {\n        if (!this.enumValueMatch && !validationResult.enumValueMatch && this.enumValues && validationResult.enumValues) {\n            this.enumValues = this.enumValues.concat(validationResult.enumValues);\n            for (var _i = 0, _a = this.problems; _i < _a.length; _i++) {\n                var error = _a[_i];\n                if (error.code === ErrorCode.EnumValueMismatch) {\n                    error.message = localize('enumWarning', 'Value is not accepted. Valid values: {0}.', this.enumValues.map(function (v) { return JSON.stringify(v); }).join(', '));\n                }\n            }\n        }\n    };\n    ValidationResult.prototype.mergePropertyMatch = function (propertyValidationResult) {\n        this.merge(propertyValidationResult);\n        this.propertiesMatches++;\n        if (propertyValidationResult.enumValueMatch || !propertyValidationResult.hasProblems() && propertyValidationResult.propertiesMatches) {\n            this.propertiesValueMatches++;\n        }\n        if (propertyValidationResult.enumValueMatch && propertyValidationResult.enumValues && propertyValidationResult.enumValues.length === 1) {\n            this.primaryValueMatches++;\n        }\n    };\n    ValidationResult.prototype.compare = function (other) {\n        var hasProblems = this.hasProblems();\n        if (hasProblems !== other.hasProblems()) {\n            return hasProblems ? -1 : 1;\n        }\n        if (this.enumValueMatch !== other.enumValueMatch) {\n            return other.enumValueMatch ? -1 : 1;\n        }\n        if (this.primaryValueMatches !== other.primaryValueMatches) {\n            return this.primaryValueMatches - other.primaryValueMatches;\n        }\n        if (this.propertiesValueMatches !== other.propertiesValueMatches) {\n            return this.propertiesValueMatches - other.propertiesValueMatches;\n        }\n        return this.propertiesMatches - other.propertiesMatches;\n    };\n    return ValidationResult;\n}());\nexport { ValidationResult };\nvar JSONDocument = /** @class */ (function () {\n    function JSONDocument(root, syntaxErrors, comments) {\n        if (syntaxErrors === void 0) { syntaxErrors = []; }\n        if (comments === void 0) { comments = []; }\n        this.root = root;\n        this.syntaxErrors = syntaxErrors;\n        this.comments = comments;\n    }\n    JSONDocument.prototype.getNodeFromOffset = function (offset) {\n        return this.root && this.root.getNodeFromOffset(offset);\n    };\n    JSONDocument.prototype.getNodeFromOffsetEndInclusive = function (offset) {\n        return this.root && this.root.getNodeFromOffsetEndInclusive(offset);\n    };\n    JSONDocument.prototype.visit = function (visitor) {\n        if (this.root) {\n            this.root.visit(visitor);\n        }\n    };\n    JSONDocument.prototype.validate = function (schema) {\n        if (this.root && schema) {\n            var validationResult = new ValidationResult();\n            this.root.validate(schema, validationResult, NoOpSchemaCollector.instance);\n            return validationResult.problems;\n        }\n        return null;\n    };\n    JSONDocument.prototype.getMatchingSchemas = function (schema, focusOffset, exclude) {\n        if (focusOffset === void 0) { focusOffset = -1; }\n        if (exclude === void 0) { exclude = null; }\n        var matchingSchemas = new SchemaCollector(focusOffset, exclude);\n        if (this.root && schema) {\n            this.root.validate(schema, new ValidationResult(), matchingSchemas);\n        }\n        return matchingSchemas.schemas;\n    };\n    return JSONDocument;\n}());\nexport { JSONDocument };\nexport function parse(textDocument, config) {\n    var problems = [];\n    var text = textDocument.getText();\n    var scanner = Json.createScanner(text, false);\n    var comments = config && config.collectComments ? [] : void 0;\n    function _scanNext() {\n        while (true) {\n            var token_1 = scanner.scan();\n            _checkScanError();\n            switch (token_1) {\n                case 12 /* LineCommentTrivia */:\n                case 13 /* BlockCommentTrivia */:\n                    if (Array.isArray(comments)) {\n                        comments.push({ start: scanner.getTokenOffset(), end: scanner.getTokenOffset() + scanner.getTokenLength() });\n                    }\n                    break;\n                case 15 /* Trivia */:\n                case 14 /* LineBreakTrivia */:\n                    break;\n                default:\n                    return token_1;\n            }\n        }\n    }\n    function _accept(token) {\n        if (scanner.getToken() === token) {\n            _scanNext();\n            return true;\n        }\n        return false;\n    }\n    function _errorAtRange(message, code, location) {\n        if (problems.length === 0 || problems[problems.length - 1].location.start !== location.start) {\n            problems.push({ message: message, location: location, code: code, severity: ProblemSeverity.Error });\n        }\n    }\n    function _error(message, code, node, skipUntilAfter, skipUntil) {\n        if (node === void 0) { node = null; }\n        if (skipUntilAfter === void 0) { skipUntilAfter = []; }\n        if (skipUntil === void 0) { skipUntil = []; }\n        var start = scanner.getTokenOffset();\n        var end = scanner.getTokenOffset() + scanner.getTokenLength();\n        if (start === end && start > 0) {\n            start--;\n            while (start > 0 && /\\s/.test(text.charAt(start))) {\n                start--;\n            }\n            end = start + 1;\n        }\n        _errorAtRange(message, code, { start: start, end: end });\n        if (node) {\n            _finalize(node, false);\n        }\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            var token_2 = scanner.getToken();\n            while (token_2 !== 17 /* EOF */) {\n                if (skipUntilAfter.indexOf(token_2) !== -1) {\n                    _scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token_2) !== -1) {\n                    break;\n                }\n                token_2 = _scanNext();\n            }\n        }\n        return node;\n    }\n    function _checkScanError() {\n        switch (scanner.getTokenError()) {\n            case 4 /* InvalidUnicode */:\n                _error(localize('InvalidUnicode', 'Invalid unicode sequence in string.'), ErrorCode.InvalidUnicode);\n                return true;\n            case 5 /* InvalidEscapeCharacter */:\n                _error(localize('InvalidEscapeCharacter', 'Invalid escape character in string.'), ErrorCode.InvalidEscapeCharacter);\n                return true;\n            case 3 /* UnexpectedEndOfNumber */:\n                _error(localize('UnexpectedEndOfNumber', 'Unexpected end of number.'), ErrorCode.UnexpectedEndOfNumber);\n                return true;\n            case 1 /* UnexpectedEndOfComment */:\n                _error(localize('UnexpectedEndOfComment', 'Unexpected end of comment.'), ErrorCode.UnexpectedEndOfComment);\n                return true;\n            case 2 /* UnexpectedEndOfString */:\n                _error(localize('UnexpectedEndOfString', 'Unexpected end of string.'), ErrorCode.UnexpectedEndOfString);\n                return true;\n            case 6 /* InvalidCharacter */:\n                _error(localize('InvalidCharacter', 'Invalid characters in string. Control characters must be escaped.'), ErrorCode.InvalidCharacter);\n                return true;\n        }\n        return false;\n    }\n    function _finalize(node, scanNext) {\n        node.end = scanner.getTokenOffset() + scanner.getTokenLength();\n        if (scanNext) {\n            _scanNext();\n        }\n        return node;\n    }\n    function _parseArray(parent, name) {\n        if (scanner.getToken() !== 3 /* OpenBracketToken */) {\n            return null;\n        }\n        var node = new ArrayASTNode(parent, name, scanner.getTokenOffset());\n        _scanNext(); // consume OpenBracketToken\n        var count = 0;\n        var needsComma = false;\n        while (scanner.getToken() !== 4 /* CloseBracketToken */ && scanner.getToken() !== 17 /* EOF */) {\n            if (scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    _error(localize('ValueExpected', 'Value expected'), ErrorCode.ValueExpected);\n                }\n                var commaOffset = scanner.getTokenOffset();\n                _scanNext(); // consume comma\n                if (scanner.getToken() === 4 /* CloseBracketToken */) {\n                    if (needsComma) {\n                        _errorAtRange(localize('TrailingComma', 'Trailing comma'), ErrorCode.TrailingComma, { start: commaOffset, end: commaOffset + 1 });\n                    }\n                    continue;\n                }\n            }\n            else if (needsComma) {\n                _error(localize('ExpectedComma', 'Expected comma'), ErrorCode.CommaExpected);\n            }\n            if (!node.addItem(_parseValue(node, count++))) {\n                _error(localize('PropertyExpected', 'Value expected'), ErrorCode.ValueExpected, null, [], [4 /* CloseBracketToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        if (scanner.getToken() !== 4 /* CloseBracketToken */) {\n            return _error(localize('ExpectedCloseBracket', 'Expected comma or closing bracket'), ErrorCode.CommaOrCloseBacketExpected, node);\n        }\n        return _finalize(node, true);\n    }\n    function _parseProperty(parent, keysSeen) {\n        var key = _parseString(null, null, true);\n        if (!key) {\n            if (scanner.getToken() === 16 /* Unknown */) {\n                // give a more helpful error message\n                _error(localize('DoubleQuotesExpected', 'Property keys must be doublequoted'), ErrorCode.Undefined);\n                key = new StringASTNode(null, null, true, scanner.getTokenOffset(), scanner.getTokenOffset() + scanner.getTokenLength());\n                key.value = scanner.getTokenValue();\n                _scanNext(); // consume Unknown\n            }\n            else {\n                return null;\n            }\n        }\n        var node = new PropertyASTNode(parent, key);\n        var seen = keysSeen[key.value];\n        if (seen) {\n            problems.push({ location: { start: node.key.start, end: node.key.end }, message: localize('DuplicateKeyWarning', \"Duplicate object key\"), code: ErrorCode.Undefined, severity: ProblemSeverity.Warning });\n            if (seen instanceof PropertyASTNode) {\n                problems.push({ location: { start: seen.key.start, end: seen.key.end }, message: localize('DuplicateKeyWarning', \"Duplicate object key\"), code: ErrorCode.Undefined, severity: ProblemSeverity.Warning });\n            }\n            keysSeen[key.value] = true; // if the same key is duplicate again, avoid duplicate error reporting\n        }\n        else {\n            keysSeen[key.value] = node;\n        }\n        if (scanner.getToken() === 6 /* ColonToken */) {\n            node.colonOffset = scanner.getTokenOffset();\n            _scanNext(); // consume ColonToken\n        }\n        else {\n            _error(localize('ColonExpected', 'Colon expected'), ErrorCode.ColonExpected);\n            if (scanner.getToken() === 10 /* StringLiteral */ && textDocument.positionAt(key.end).line < textDocument.positionAt(scanner.getTokenOffset()).line) {\n                node.end = key.end;\n                return node;\n            }\n        }\n        if (!node.setValue(_parseValue(node, key.value))) {\n            return _error(localize('ValueExpected', 'Value expected'), ErrorCode.ValueExpected, node, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n        }\n        node.end = node.value.end;\n        return node;\n    }\n    function _parseObject(parent, name) {\n        if (scanner.getToken() !== 1 /* OpenBraceToken */) {\n            return null;\n        }\n        var node = new ObjectASTNode(parent, name, scanner.getTokenOffset());\n        var keysSeen = Object.create(null);\n        _scanNext(); // consume OpenBraceToken\n        var needsComma = false;\n        while (scanner.getToken() !== 2 /* CloseBraceToken */ && scanner.getToken() !== 17 /* EOF */) {\n            if (scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    _error(localize('PropertyExpected', 'Property expected'), ErrorCode.PropertyExpected);\n                }\n                var commaOffset = scanner.getTokenOffset();\n                _scanNext(); // consume comma\n                if (scanner.getToken() === 2 /* CloseBraceToken */) {\n                    if (needsComma) {\n                        _errorAtRange(localize('TrailingComma', 'Trailing comma'), ErrorCode.TrailingComma, { start: commaOffset, end: commaOffset + 1 });\n                    }\n                    continue;\n                }\n            }\n            else if (needsComma) {\n                _error(localize('ExpectedComma', 'Expected comma'), ErrorCode.CommaExpected);\n            }\n            if (!node.addProperty(_parseProperty(node, keysSeen))) {\n                _error(localize('PropertyExpected', 'Property expected'), ErrorCode.PropertyExpected, null, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        if (scanner.getToken() !== 2 /* CloseBraceToken */) {\n            return _error(localize('ExpectedCloseBrace', 'Expected comma or closing brace'), ErrorCode.CommaOrCloseBraceExpected, node);\n        }\n        return _finalize(node, true);\n    }\n    function _parseString(parent, name, isKey) {\n        if (scanner.getToken() !== 10 /* StringLiteral */) {\n            return null;\n        }\n        var node = new StringASTNode(parent, name, isKey, scanner.getTokenOffset());\n        node.value = scanner.getTokenValue();\n        return _finalize(node, true);\n    }\n    function _parseNumber(parent, name) {\n        if (scanner.getToken() !== 11 /* NumericLiteral */) {\n            return null;\n        }\n        var node = new NumberASTNode(parent, name, scanner.getTokenOffset());\n        if (scanner.getTokenError() === 0 /* None */) {\n            var tokenValue = scanner.getTokenValue();\n            try {\n                var numberValue = JSON.parse(tokenValue);\n                if (typeof numberValue !== 'number') {\n                    return _error(localize('InvalidNumberFormat', 'Invalid number format.'), ErrorCode.Undefined, node);\n                }\n                node.value = numberValue;\n            }\n            catch (e) {\n                return _error(localize('InvalidNumberFormat', 'Invalid number format.'), ErrorCode.Undefined, node);\n            }\n            node.isInteger = tokenValue.indexOf('.') === -1;\n        }\n        return _finalize(node, true);\n    }\n    function _parseLiteral(parent, name) {\n        var node;\n        switch (scanner.getToken()) {\n            case 7 /* NullKeyword */:\n                node = new NullASTNode(parent, name, scanner.getTokenOffset());\n                break;\n            case 8 /* TrueKeyword */:\n                node = new BooleanASTNode(parent, name, true, scanner.getTokenOffset());\n                break;\n            case 9 /* FalseKeyword */:\n                node = new BooleanASTNode(parent, name, false, scanner.getTokenOffset());\n                break;\n            default:\n                return null;\n        }\n        return _finalize(node, true);\n    }\n    function _parseValue(parent, name) {\n        return _parseArray(parent, name) || _parseObject(parent, name) || _parseString(parent, name, false) || _parseNumber(parent, name) || _parseLiteral(parent, name);\n    }\n    var _root = null;\n    var token = _scanNext();\n    if (token !== 17 /* EOF */) {\n        _root = _parseValue(null, null);\n        if (!_root) {\n            _error(localize('Invalid symbol', 'Expected a JSON object, array or literal.'), ErrorCode.Undefined);\n        }\n        else if (scanner.getToken() !== 17 /* EOF */) {\n            _error(localize('End of file expected', 'End of file expected.'), ErrorCode.Undefined);\n        }\n    }\n    return new JSONDocument(_root, problems, comments);\n}\n//# sourceMappingURL=jsonParser.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { ProblemSeverity, ErrorCode } from '../parser/jsonParser.js';\nimport { DiagnosticSeverity } from '../../vscode-languageserver-types/main.js';\nimport * as nls from '../../../fillers/vscode-nls.js';\nvar localize = nls.loadMessageBundle();\nvar JSONValidation = /** @class */ (function () {\n    function JSONValidation(jsonSchemaService, promiseConstructor) {\n        this.jsonSchemaService = jsonSchemaService;\n        this.promise = promiseConstructor;\n        this.validationEnabled = true;\n    }\n    JSONValidation.prototype.configure = function (raw) {\n        if (raw) {\n            this.validationEnabled = raw.validate;\n            this.commentSeverity = raw.allowComments ? ProblemSeverity.Ignore : ProblemSeverity.Error;\n        }\n    };\n    JSONValidation.prototype.doValidation = function (textDocument, jsonDocument, documentSettings) {\n        var _this = this;\n        if (!this.validationEnabled) {\n            return this.promise.resolve([]);\n        }\n        var diagnostics = [];\n        var added = {};\n        var addProblem = function (problem) {\n            if (problem.severity === ProblemSeverity.Ignore) {\n                return;\n            }\n            // remove duplicated messages\n            var signature = problem.location.start + ' ' + problem.location.end + ' ' + problem.message;\n            if (!added[signature]) {\n                added[signature] = true;\n                var range = {\n                    start: textDocument.positionAt(problem.location.start),\n                    end: textDocument.positionAt(problem.location.end)\n                };\n                var severity = problem.severity === ProblemSeverity.Error ? DiagnosticSeverity.Error : DiagnosticSeverity.Warning;\n                diagnostics.push({ severity: severity, range: range, message: problem.message });\n            }\n        };\n        return this.jsonSchemaService.getSchemaForResource(textDocument.uri, jsonDocument).then(function (schema) {\n            var trailingCommaSeverity = documentSettings ? documentSettings.trailingCommas : ProblemSeverity.Error;\n            var commentSeverity = documentSettings ? documentSettings.comments : _this.commentSeverity;\n            if (schema) {\n                if (schema.errors.length && jsonDocument.root) {\n                    var astRoot = jsonDocument.root;\n                    var property = astRoot.type === 'object' ? astRoot.getFirstProperty('$schema') : null;\n                    if (property) {\n                        var node = property.value || property;\n                        addProblem({ location: { start: node.start, end: node.end }, message: schema.errors[0], severity: ProblemSeverity.Warning });\n                    }\n                    else {\n                        addProblem({ location: { start: astRoot.start, end: astRoot.start + 1 }, message: schema.errors[0], severity: ProblemSeverity.Warning });\n                    }\n                }\n                else {\n                    var semanticErrors = jsonDocument.validate(schema.schema);\n                    if (semanticErrors) {\n                        semanticErrors.forEach(addProblem);\n                    }\n                }\n                if (schemaAllowsComments(schema.schema)) {\n                    trailingCommaSeverity = commentSeverity = ProblemSeverity.Ignore;\n                }\n            }\n            jsonDocument.syntaxErrors.forEach(function (p) {\n                if (p.code === ErrorCode.TrailingComma) {\n                    p.severity = trailingCommaSeverity;\n                }\n                addProblem(p);\n            });\n            if (commentSeverity !== ProblemSeverity.Ignore) {\n                var message_1 = localize('InvalidCommentToken', 'Comments are not permitted in JSON.');\n                jsonDocument.comments.forEach(function (c) {\n                    addProblem({ location: c, severity: commentSeverity, message: message_1 });\n                });\n            }\n            return diagnostics;\n        });\n    };\n    return JSONValidation;\n}());\nexport { JSONValidation };\nfunction schemaAllowsComments(schemaRef) {\n    if (schemaRef && typeof schemaRef === 'object') {\n        if (schemaRef.allowComments) {\n            return true;\n        }\n        if (schemaRef.allOf) {\n            return schemaRef.allOf.some(schemaAllowsComments);\n        }\n    }\n    return false;\n}\n//# sourceMappingURL=jsonValidation.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nvar Digit0 = 48;\nvar Digit9 = 57;\nvar A = 65;\nvar F = 70;\nvar a = 97;\nvar f = 102;\nexport function hexDigit(charCode) {\n    if (charCode < Digit0) {\n        return 0;\n    }\n    if (charCode <= Digit9) {\n        return charCode - Digit0;\n    }\n    if (charCode < a) {\n        charCode += (a - A);\n    }\n    if (charCode >= a && charCode <= f) {\n        return charCode - a + 10;\n    }\n    return 0;\n}\nexport function colorFromHex(text) {\n    if (text[0] !== '#') {\n        return null;\n    }\n    switch (text.length) {\n        case 4:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x11) / 255.0,\n                green: (hexDigit(text.charCodeAt(2)) * 0x11) / 255.0,\n                blue: (hexDigit(text.charCodeAt(3)) * 0x11) / 255.0,\n                alpha: 1\n            };\n        case 5:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x11) / 255.0,\n                green: (hexDigit(text.charCodeAt(2)) * 0x11) / 255.0,\n                blue: (hexDigit(text.charCodeAt(3)) * 0x11) / 255.0,\n                alpha: (hexDigit(text.charCodeAt(4)) * 0x11) / 255.0,\n            };\n        case 7:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,\n                green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,\n                blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,\n                alpha: 1\n            };\n        case 9:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,\n                green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,\n                blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,\n                alpha: (hexDigit(text.charCodeAt(7)) * 0x10 + hexDigit(text.charCodeAt(8))) / 255.0\n            };\n    }\n    return null;\n}\nexport function colorFrom256RGB(red, green, blue, alpha) {\n    if (alpha === void 0) { alpha = 1.0; }\n    return {\n        red: red / 255.0,\n        green: green / 255.0,\n        blue: blue / 255.0,\n        alpha: alpha\n    };\n}\n//# sourceMappingURL=colors.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as Strings from '../utils/strings.js';\nimport { colorFromHex } from '../utils/colors.js';\nimport { SymbolKind, Range, Location, TextEdit } from '../../vscode-languageserver-types/main.js';\nvar JSONDocumentSymbols = /** @class */ (function () {\n    function JSONDocumentSymbols(schemaService) {\n        this.schemaService = schemaService;\n    }\n    JSONDocumentSymbols.prototype.findDocumentSymbols = function (document, doc) {\n        var _this = this;\n        var root = doc.root;\n        if (!root) {\n            return null;\n        }\n        // special handling for key bindings\n        var resourceString = document.uri;\n        if ((resourceString === 'vscode://defaultsettings/keybindings.json') || Strings.endsWith(resourceString.toLowerCase(), '/user/keybindings.json')) {\n            if (root.type === 'array') {\n                var result_1 = [];\n                root.items.forEach(function (item) {\n                    if (item.type === 'object') {\n                        var property = item.getFirstProperty('key');\n                        if (property && property.value) {\n                            var location = Location.create(document.uri, Range.create(document.positionAt(item.start), document.positionAt(item.end)));\n                            result_1.push({ name: property.value.getValue(), kind: SymbolKind.Function, location: location });\n                        }\n                    }\n                });\n                return result_1;\n            }\n        }\n        var collectOutlineEntries = function (result, node, containerName) {\n            if (node.type === 'array') {\n                node.items.forEach(function (node) {\n                    collectOutlineEntries(result, node, containerName);\n                });\n            }\n            else if (node.type === 'object') {\n                var objectNode = node;\n                objectNode.properties.forEach(function (property) {\n                    var location = Location.create(document.uri, Range.create(document.positionAt(property.start), document.positionAt(property.end)));\n                    var valueNode = property.value;\n                    if (valueNode) {\n                        var childContainerName = containerName ? containerName + '.' + property.key.value : property.key.value;\n                        result.push({ name: property.key.getValue(), kind: _this.getSymbolKind(valueNode.type), location: location, containerName: containerName });\n                        collectOutlineEntries(result, valueNode, childContainerName);\n                    }\n                });\n            }\n            return result;\n        };\n        var result = collectOutlineEntries([], root, void 0);\n        return result;\n    };\n    JSONDocumentSymbols.prototype.getSymbolKind = function (nodeType) {\n        switch (nodeType) {\n            case 'object':\n                return SymbolKind.Module;\n            case 'string':\n                return SymbolKind.String;\n            case 'number':\n                return SymbolKind.Number;\n            case 'array':\n                return SymbolKind.Array;\n            case 'boolean':\n                return SymbolKind.Boolean;\n            default:// 'null'\n                return SymbolKind.Variable;\n        }\n    };\n    JSONDocumentSymbols.prototype.findDocumentColors = function (document, doc) {\n        return this.schemaService.getSchemaForResource(document.uri, doc).then(function (schema) {\n            var result = [];\n            if (schema) {\n                var matchingSchemas = doc.getMatchingSchemas(schema.schema);\n                var visitedNode = {};\n                for (var _i = 0, matchingSchemas_1 = matchingSchemas; _i < matchingSchemas_1.length; _i++) {\n                    var s = matchingSchemas_1[_i];\n                    if (!s.inverted && s.schema && (s.schema.format === 'color' || s.schema.format === 'color-hex') && s.node && s.node.type === 'string') {\n                        var nodeId = String(s.node.start);\n                        if (!visitedNode[nodeId]) {\n                            var color = colorFromHex(s.node.getValue());\n                            if (color) {\n                                var range = Range.create(document.positionAt(s.node.start), document.positionAt(s.node.end));\n                                result.push({ color: color, range: range });\n                            }\n                            visitedNode[nodeId] = true;\n                        }\n                    }\n                }\n            }\n            return result;\n        });\n    };\n    JSONDocumentSymbols.prototype.getColorPresentations = function (document, doc, color, range) {\n        var result = [];\n        var red256 = Math.round(color.red * 255), green256 = Math.round(color.green * 255), blue256 = Math.round(color.blue * 255);\n        function toTwoDigitHex(n) {\n            var r = n.toString(16);\n            return r.length !== 2 ? '0' + r : r;\n        }\n        var label;\n        if (color.alpha === 1) {\n            label = \"#\" + toTwoDigitHex(red256) + toTwoDigitHex(green256) + toTwoDigitHex(blue256);\n        }\n        else {\n            label = \"#\" + toTwoDigitHex(red256) + toTwoDigitHex(green256) + toTwoDigitHex(blue256) + toTwoDigitHex(Math.round(color.alpha * 255));\n        }\n        result.push({ label: label, textEdit: TextEdit.replace(range, JSON.stringify(label)) });\n        return result;\n    };\n    return JSONDocumentSymbols;\n}());\nexport { JSONDocumentSymbols };\n//# sourceMappingURL=jsonDocumentSymbols.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as nls from '../../../fillers/vscode-nls.js';\nvar localize = nls.loadMessageBundle();\nexport var schemaContributions = {\n    schemaAssociations: {},\n    schemas: {\n        // bundle the schema-schema to include (localized) descriptions\n        'http://json-schema.org/draft-04/schema#': {\n            'title': localize('schema.json', 'Describes a JSON file using a schema. See json-schema.org for more info.'),\n            '$schema': 'http://json-schema.org/draft-04/schema#',\n            'definitions': {\n                'schemaArray': {\n                    'type': 'array',\n                    'minItems': 1,\n                    'items': { '$ref': '#' }\n                },\n                'positiveInteger': {\n                    'type': 'integer',\n                    'minimum': 0\n                },\n                'positiveIntegerDefault0': {\n                    'allOf': [{ '$ref': '#/definitions/positiveInteger' }, { 'default': 0 }]\n                },\n                'simpleTypes': {\n                    'type': 'string',\n                    'enum': ['array', 'boolean', 'integer', 'null', 'number', 'object', 'string']\n                },\n                'stringArray': {\n                    'type': 'array',\n                    'items': { 'type': 'string' },\n                    'minItems': 1,\n                    'uniqueItems': true\n                }\n            },\n            'type': 'object',\n            'properties': {\n                'id': {\n                    'type': 'string',\n                    'format': 'uri',\n                    'description': localize('schema.json.id', 'A unique identifier for the schema.')\n                },\n                '$schema': {\n                    'type': 'string',\n                    'format': 'uri',\n                    'description': localize('schema.json.$schema', 'The schema to verify this document against ')\n                },\n                'title': {\n                    'type': 'string',\n                    'description': localize('schema.json.title', 'A descriptive title of the element')\n                },\n                'description': {\n                    'type': 'string',\n                    'description': localize('schema.json.description', 'A long description of the element. Used in hover menus and suggestions.')\n                },\n                'default': {\n                    'description': localize('schema.json.default', 'A default value. Used by suggestions.')\n                },\n                'multipleOf': {\n                    'type': 'number',\n                    'minimum': 0,\n                    'exclusiveMinimum': true,\n                    'description': localize('schema.json.multipleOf', 'A number that should cleanly divide the current value (i.e. have no remainder)')\n                },\n                'maximum': {\n                    'type': 'number',\n                    'description': localize('schema.json.maximum', 'The maximum numerical value, inclusive by default.')\n                },\n                'exclusiveMaximum': {\n                    'type': 'boolean',\n                    'default': false,\n                    'description': localize('schema.json.exclusiveMaximum', 'Makes the maximum property exclusive.')\n                },\n                'minimum': {\n                    'type': 'number',\n                    'description': localize('schema.json.minimum', 'The minimum numerical value, inclusive by default.')\n                },\n                'exclusiveMinimum': {\n                    'type': 'boolean',\n                    'default': false,\n                    'description': localize('schema.json.exclusiveMininum', 'Makes the minimum property exclusive.')\n                },\n                'maxLength': {\n                    'allOf': [\n                        { '$ref': '#/definitions/positiveInteger' }\n                    ],\n                    'description': localize('schema.json.maxLength', 'The maximum length of a string.')\n                },\n                'minLength': {\n                    'allOf': [\n                        { '$ref': '#/definitions/positiveIntegerDefault0' }\n                    ],\n                    'description': localize('schema.json.minLength', 'The minimum length of a string.')\n                },\n                'pattern': {\n                    'type': 'string',\n                    'format': 'regex',\n                    'description': localize('schema.json.pattern', 'A regular expression to match the string against. It is not implicitly anchored.')\n                },\n                'additionalItems': {\n                    'anyOf': [\n                        { 'type': 'boolean' },\n                        { '$ref': '#' }\n                    ],\n                    'default': {},\n                    'description': localize('schema.json.additionalItems', 'For arrays, only when items is set as an array. If it is a schema, then this schema validates items after the ones specified by the items array. If it is false, then additional items will cause validation to fail.')\n                },\n                'items': {\n                    'anyOf': [\n                        { '$ref': '#' },\n                        { '$ref': '#/definitions/schemaArray' }\n                    ],\n                    'default': {},\n                    'description': localize('schema.json.items', 'For arrays. Can either be a schema to validate every element against or an array of schemas to validate each item against in order (the first schema will validate the first element, the second schema will validate the second element, and so on.')\n                },\n                'maxItems': {\n                    'allOf': [\n                        { '$ref': '#/definitions/positiveInteger' }\n                    ],\n                    'description': localize('schema.json.maxItems', 'The maximum number of items that can be inside an array. Inclusive.')\n                },\n                'minItems': {\n                    'allOf': [\n                        { '$ref': '#/definitions/positiveIntegerDefault0' }\n                    ],\n                    'description': localize('schema.json.minItems', 'The minimum number of items that can be inside an array. Inclusive.')\n                },\n                'uniqueItems': {\n                    'type': 'boolean',\n                    'default': false,\n                    'description': localize('schema.json.uniqueItems', 'If all of the items in the array must be unique. Defaults to false.')\n                },\n                'maxProperties': {\n                    'allOf': [\n                        { '$ref': '#/definitions/positiveInteger' }\n                    ],\n                    'description': localize('schema.json.maxProperties', 'The maximum number of properties an object can have. Inclusive.')\n                },\n                'minProperties': {\n                    'allOf': [\n                        { '$ref': '#/definitions/positiveIntegerDefault0' },\n                    ],\n                    'description': localize('schema.json.minProperties', 'The minimum number of properties an object can have. Inclusive.')\n                },\n                'required': {\n                    'allOf': [\n                        { '$ref': '#/definitions/stringArray' }\n                    ],\n                    'description': localize('schema.json.required', 'An array of strings that lists the names of all properties required on this object.')\n                },\n                'additionalProperties': {\n                    'anyOf': [\n                        { 'type': 'boolean' },\n                        { '$ref': '#' }\n                    ],\n                    'default': {},\n                    'description': localize('schema.json.additionalProperties', 'Either a schema or a boolean. If a schema, then used to validate all properties not matched by \\'properties\\' or \\'patternProperties\\'. If false, then any properties not matched by either will cause this schema to fail.')\n                },\n                'definitions': {\n                    'type': 'object',\n                    'additionalProperties': { '$ref': '#' },\n                    'default': {},\n                    'description': localize('schema.json.definitions', 'Not used for validation. Place subschemas here that you wish to reference inline with $ref')\n                },\n                'properties': {\n                    'type': 'object',\n                    'additionalProperties': { '$ref': '#' },\n                    'default': {},\n                    'description': localize('schema.json.properties', 'A map of property names to schemas for each property.')\n                },\n                'patternProperties': {\n                    'type': 'object',\n                    'additionalProperties': { '$ref': '#' },\n                    'default': {},\n                    'description': localize('schema.json.patternProperties', 'A map of regular expressions on property names to schemas for matching properties.')\n                },\n                'dependencies': {\n                    'type': 'object',\n                    'additionalProperties': {\n                        'anyOf': [\n                            { '$ref': '#' },\n                            { '$ref': '#/definitions/stringArray' }\n                        ]\n                    },\n                    'description': localize('schema.json.dependencies', 'A map of property names to either an array of property names or a schema. An array of property names means the property named in the key depends on the properties in the array being present in the object in order to be valid. If the value is a schema, then the schema is only applied to the object if the property in the key exists on the object.')\n                },\n                'enum': {\n                    'type': 'array',\n                    'minItems': 1,\n                    'uniqueItems': true,\n                    'description': localize('schema.json.enum', 'The set of literal values that are valid')\n                },\n                'type': {\n                    'anyOf': [\n                        { '$ref': '#/definitions/simpleTypes' },\n                        {\n                            'type': 'array',\n                            'items': { '$ref': '#/definitions/simpleTypes' },\n                            'minItems': 1,\n                            'uniqueItems': true\n                        }\n                    ],\n                    'description': localize('schema.json.type', 'Either a string of one of the basic schema types (number, integer, null, array, object, boolean, string) or an array of strings specifying a subset of those types.')\n                },\n                'format': {\n                    'anyOf': [\n                        {\n                            'type': 'string',\n                            'description': localize('schema.json.format', 'Describes the format expected for the value.'),\n                            'enum': ['date-time', 'uri', 'email', 'hostname', 'ipv4', 'ipv6', 'regex']\n                        }, {\n                            'type': 'string'\n                        }\n                    ]\n                },\n                'allOf': {\n                    'allOf': [\n                        { '$ref': '#/definitions/schemaArray' }\n                    ],\n                    'description': localize('schema.json.allOf', 'An array of schemas, all of which must match.')\n                },\n                'anyOf': {\n                    'allOf': [\n                        { '$ref': '#/definitions/schemaArray' }\n                    ],\n                    'description': localize('schema.json.anyOf', 'An array of schemas, where at least one must match.')\n                },\n                'oneOf': {\n                    'allOf': [\n                        { '$ref': '#/definitions/schemaArray' }\n                    ],\n                    'description': localize('schema.json.oneOf', 'An array of schemas, exactly one of which must match.')\n                },\n                'not': {\n                    'allOf': [\n                        { '$ref': '#' }\n                    ],\n                    'description': localize('schema.json.not', 'A schema which must not match.')\n                }\n            },\n            'dependencies': {\n                'exclusiveMaximum': ['maximum'],\n                'exclusiveMinimum': ['minimum']\n            },\n            'default': {}\n        }\n    }\n};\n//# sourceMappingURL=configuration.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as Json from '../../jsonc-parser/main.js';\nimport URI from '../../vscode-uri/index.js';\nimport * as Strings from '../utils/strings.js';\nimport * as Parser from '../parser/jsonParser.js';\nimport * as nls from '../../../fillers/vscode-nls.js';\nvar localize = nls.loadMessageBundle();\nvar FilePatternAssociation = /** @class */ (function () {\n    function FilePatternAssociation(pattern) {\n        try {\n            this.patternRegExp = new RegExp(Strings.convertSimple2RegExpPattern(pattern) + '$');\n        }\n        catch (e) {\n            // invalid pattern\n            this.patternRegExp = null;\n        }\n        this.schemas = [];\n    }\n    FilePatternAssociation.prototype.addSchema = function (id) {\n        this.schemas.push(id);\n    };\n    FilePatternAssociation.prototype.matchesPattern = function (fileName) {\n        return this.patternRegExp && this.patternRegExp.test(fileName);\n    };\n    FilePatternAssociation.prototype.getSchemas = function () {\n        return this.schemas;\n    };\n    return FilePatternAssociation;\n}());\nvar SchemaHandle = /** @class */ (function () {\n    function SchemaHandle(service, url, unresolvedSchemaContent) {\n        this.service = service;\n        this.url = url;\n        if (unresolvedSchemaContent) {\n            this.unresolvedSchema = this.service.promise.resolve(new UnresolvedSchema(unresolvedSchemaContent));\n        }\n    }\n    SchemaHandle.prototype.getUnresolvedSchema = function () {\n        if (!this.unresolvedSchema) {\n            this.unresolvedSchema = this.service.loadSchema(this.url);\n        }\n        return this.unresolvedSchema;\n    };\n    SchemaHandle.prototype.getResolvedSchema = function () {\n        var _this = this;\n        if (!this.resolvedSchema) {\n            this.resolvedSchema = this.getUnresolvedSchema().then(function (unresolved) {\n                return _this.service.resolveSchemaContent(unresolved, _this.url);\n            });\n        }\n        return this.resolvedSchema;\n    };\n    SchemaHandle.prototype.clearSchema = function () {\n        this.resolvedSchema = null;\n        this.unresolvedSchema = null;\n    };\n    return SchemaHandle;\n}());\nvar UnresolvedSchema = /** @class */ (function () {\n    function UnresolvedSchema(schema, errors) {\n        if (errors === void 0) { errors = []; }\n        this.schema = schema;\n        this.errors = errors;\n    }\n    return UnresolvedSchema;\n}());\nexport { UnresolvedSchema };\nvar ResolvedSchema = /** @class */ (function () {\n    function ResolvedSchema(schema, errors) {\n        if (errors === void 0) { errors = []; }\n        this.schema = schema;\n        this.errors = errors;\n    }\n    ResolvedSchema.prototype.getSection = function (path) {\n        return Parser.asSchema(this.getSectionRecursive(path, this.schema));\n    };\n    ResolvedSchema.prototype.getSectionRecursive = function (path, schema) {\n        var _this = this;\n        if (!schema || typeof schema === 'boolean' || path.length === 0) {\n            return schema;\n        }\n        var next = path.shift();\n        if (schema.properties && typeof schema.properties[next]) {\n            return this.getSectionRecursive(path, schema.properties[next]);\n        }\n        else if (schema.patternProperties) {\n            Object.keys(schema.patternProperties).forEach(function (pattern) {\n                var regex = new RegExp(pattern);\n                if (regex.test(next)) {\n                    return _this.getSectionRecursive(path, schema.patternProperties[pattern]);\n                }\n            });\n        }\n        else if (typeof schema.additionalProperties === 'object') {\n            return this.getSectionRecursive(path, schema.additionalProperties);\n        }\n        else if (next.match('[0-9]+')) {\n            if (Array.isArray(schema.items)) {\n                var index = parseInt(next, 10);\n                if (!isNaN(index) && schema.items[index]) {\n                    return this.getSectionRecursive(path, schema.items[index]);\n                }\n            }\n            else if (schema.items) {\n                return this.getSectionRecursive(path, schema.items);\n            }\n        }\n        return null;\n    };\n    return ResolvedSchema;\n}());\nexport { ResolvedSchema };\nvar JSONSchemaService = /** @class */ (function () {\n    function JSONSchemaService(requestService, contextService, promiseConstructor) {\n        this.contextService = contextService;\n        this.requestService = requestService;\n        this.promiseConstructor = promiseConstructor || Promise;\n        this.callOnDispose = [];\n        this.contributionSchemas = {};\n        this.contributionAssociations = {};\n        this.schemasById = {};\n        this.filePatternAssociations = [];\n        this.filePatternAssociationById = {};\n        this.registeredSchemasIds = {};\n    }\n    JSONSchemaService.prototype.getRegisteredSchemaIds = function (filter) {\n        return Object.keys(this.registeredSchemasIds).filter(function (id) {\n            var scheme = URI.parse(id).scheme;\n            return scheme !== 'schemaservice' && (!filter || filter(scheme));\n        });\n    };\n    Object.defineProperty(JSONSchemaService.prototype, \"promise\", {\n        get: function () {\n            return this.promiseConstructor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    JSONSchemaService.prototype.dispose = function () {\n        while (this.callOnDispose.length > 0) {\n            this.callOnDispose.pop()();\n        }\n    };\n    JSONSchemaService.prototype.onResourceChange = function (uri) {\n        uri = this.normalizeId(uri);\n        var schemaFile = this.schemasById[uri];\n        if (schemaFile) {\n            schemaFile.clearSchema();\n            return true;\n        }\n        return false;\n    };\n    JSONSchemaService.prototype.normalizeId = function (id) {\n        // remove trailing '#', normalize drive capitalization\n        return URI.parse(id).toString();\n    };\n    JSONSchemaService.prototype.setSchemaContributions = function (schemaContributions) {\n        var _this = this;\n        if (schemaContributions.schemas) {\n            var schemas = schemaContributions.schemas;\n            for (var id in schemas) {\n                var normalizedId = this.normalizeId(id);\n                this.contributionSchemas[normalizedId] = this.addSchemaHandle(normalizedId, schemas[id]);\n            }\n        }\n        if (schemaContributions.schemaAssociations) {\n            var schemaAssociations = schemaContributions.schemaAssociations;\n            for (var pattern in schemaAssociations) {\n                var associations = schemaAssociations[pattern];\n                this.contributionAssociations[pattern] = associations;\n                var fpa = this.getOrAddFilePatternAssociation(pattern);\n                associations.forEach(function (schemaId) {\n                    var id = _this.normalizeId(schemaId);\n                    fpa.addSchema(id);\n                });\n            }\n        }\n    };\n    JSONSchemaService.prototype.addSchemaHandle = function (id, unresolvedSchemaContent) {\n        var schemaHandle = new SchemaHandle(this, id, unresolvedSchemaContent);\n        this.schemasById[id] = schemaHandle;\n        return schemaHandle;\n    };\n    JSONSchemaService.prototype.getOrAddSchemaHandle = function (id, unresolvedSchemaContent) {\n        return this.schemasById[id] || this.addSchemaHandle(id, unresolvedSchemaContent);\n    };\n    JSONSchemaService.prototype.getOrAddFilePatternAssociation = function (pattern) {\n        var fpa = this.filePatternAssociationById[pattern];\n        if (!fpa) {\n            fpa = new FilePatternAssociation(pattern);\n            this.filePatternAssociationById[pattern] = fpa;\n            this.filePatternAssociations.push(fpa);\n        }\n        return fpa;\n    };\n    JSONSchemaService.prototype.registerExternalSchema = function (uri, filePatterns, unresolvedSchemaContent) {\n        var _this = this;\n        if (filePatterns === void 0) { filePatterns = null; }\n        var id = this.normalizeId(uri);\n        this.registeredSchemasIds[id] = true;\n        if (filePatterns) {\n            filePatterns.forEach(function (pattern) {\n                _this.getOrAddFilePatternAssociation(pattern).addSchema(id);\n            });\n        }\n        return unresolvedSchemaContent ? this.addSchemaHandle(id, unresolvedSchemaContent) : this.getOrAddSchemaHandle(id);\n    };\n    JSONSchemaService.prototype.clearExternalSchemas = function () {\n        var _this = this;\n        this.schemasById = {};\n        this.filePatternAssociations = [];\n        this.filePatternAssociationById = {};\n        this.registeredSchemasIds = {};\n        for (var id in this.contributionSchemas) {\n            this.schemasById[id] = this.contributionSchemas[id];\n            this.registeredSchemasIds[id] = true;\n        }\n        for (var pattern in this.contributionAssociations) {\n            var fpa = this.getOrAddFilePatternAssociation(pattern);\n            this.contributionAssociations[pattern].forEach(function (schemaId) {\n                var id = _this.normalizeId(schemaId);\n                fpa.addSchema(id);\n            });\n        }\n    };\n    JSONSchemaService.prototype.getResolvedSchema = function (schemaId) {\n        var id = this.normalizeId(schemaId);\n        var schemaHandle = this.schemasById[id];\n        if (schemaHandle) {\n            return schemaHandle.getResolvedSchema();\n        }\n        return this.promise.resolve(null);\n    };\n    JSONSchemaService.prototype.loadSchema = function (url) {\n        if (!this.requestService) {\n            var errorMessage = localize('json.schema.norequestservice', 'Unable to load schema from \\'{0}\\'. No schema request service available', toDisplayString(url));\n            return this.promise.resolve(new UnresolvedSchema({}, [errorMessage]));\n        }\n        return this.requestService(url).then(function (content) {\n            if (!content) {\n                var errorMessage = localize('json.schema.nocontent', 'Unable to load schema from \\'{0}\\': No content.', toDisplayString(url));\n                return new UnresolvedSchema({}, [errorMessage]);\n            }\n            var schemaContent = {};\n            var jsonErrors = [];\n            schemaContent = Json.parse(content, jsonErrors);\n            var errors = jsonErrors.length ? [localize('json.schema.invalidFormat', 'Unable to parse content from \\'{0}\\': Parse error at offset {1}.', toDisplayString(url), jsonErrors[0].offset)] : [];\n            return new UnresolvedSchema(schemaContent, errors);\n        }, function (error) {\n            var errorMessage = localize('json.schema.unabletoload', 'Unable to load schema from \\'{0}\\': {1}', toDisplayString(url), error.toString());\n            return new UnresolvedSchema({}, [errorMessage]);\n        });\n    };\n    JSONSchemaService.prototype.resolveSchemaContent = function (schemaToResolve, schemaURL) {\n        var _this = this;\n        var resolveErrors = schemaToResolve.errors.slice(0);\n        var schema = schemaToResolve.schema;\n        var contextService = this.contextService;\n        var findSection = function (schema, path) {\n            if (!path) {\n                return schema;\n            }\n            var current = schema;\n            if (path[0] === '/') {\n                path = path.substr(1);\n            }\n            path.split('/').some(function (part) {\n                current = current[part];\n                return !current;\n            });\n            return current;\n        };\n        var merge = function (target, sourceRoot, sourceURI, path) {\n            var section = findSection(sourceRoot, path);\n            if (section) {\n                for (var key in section) {\n                    if (section.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n                        target[key] = section[key];\n                    }\n                }\n            }\n            else {\n                resolveErrors.push(localize('json.schema.invalidref', '$ref \\'{0}\\' in \\'{1}\\' can not be resolved.', path, sourceURI));\n            }\n        };\n        var resolveExternalLink = function (node, uri, linkPath, parentSchemaURL) {\n            if (contextService && !/^\\w+:\\/\\/.*/.test(uri)) {\n                uri = contextService.resolveRelativePath(uri, parentSchemaURL);\n            }\n            uri = _this.normalizeId(uri);\n            return _this.getOrAddSchemaHandle(uri).getUnresolvedSchema().then(function (unresolvedSchema) {\n                if (unresolvedSchema.errors.length) {\n                    var loc = linkPath ? uri + '#' + linkPath : uri;\n                    resolveErrors.push(localize('json.schema.problemloadingref', 'Problems loading reference \\'{0}\\': {1}', loc, unresolvedSchema.errors[0]));\n                }\n                merge(node, unresolvedSchema.schema, uri, linkPath);\n                return resolveRefs(node, unresolvedSchema.schema, uri);\n            });\n        };\n        var resolveRefs = function (node, parentSchema, parentSchemaURL) {\n            if (!node || typeof node !== 'object') {\n                return Promise.resolve(null);\n            }\n            var toWalk = [node];\n            var seen = [];\n            var openPromises = [];\n            var collectEntries = function () {\n                var entries = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    entries[_i] = arguments[_i];\n                }\n                for (var _a = 0, entries_1 = entries; _a < entries_1.length; _a++) {\n                    var entry = entries_1[_a];\n                    if (typeof entry === 'object') {\n                        toWalk.push(entry);\n                    }\n                }\n            };\n            var collectMapEntries = function () {\n                var maps = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    maps[_i] = arguments[_i];\n                }\n                for (var _a = 0, maps_1 = maps; _a < maps_1.length; _a++) {\n                    var map = maps_1[_a];\n                    if (typeof map === 'object') {\n                        for (var key in map) {\n                            var entry = map[key];\n                            if (typeof entry === 'object') {\n                                toWalk.push(entry);\n                            }\n                        }\n                    }\n                }\n            };\n            var collectArrayEntries = function () {\n                var arrays = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    arrays[_i] = arguments[_i];\n                }\n                for (var _a = 0, arrays_1 = arrays; _a < arrays_1.length; _a++) {\n                    var array = arrays_1[_a];\n                    if (Array.isArray(array)) {\n                        for (var _b = 0, array_1 = array; _b < array_1.length; _b++) {\n                            var entry = array_1[_b];\n                            if (typeof entry === 'object') {\n                                toWalk.push(entry);\n                            }\n                        }\n                    }\n                }\n            };\n            var handleRef = function (next) {\n                while (next.$ref) {\n                    var segments = next.$ref.split('#', 2);\n                    delete next.$ref;\n                    if (segments[0].length > 0) {\n                        openPromises.push(resolveExternalLink(next, segments[0], segments[1], parentSchemaURL));\n                        return;\n                    }\n                    else {\n                        merge(next, parentSchema, parentSchemaURL, segments[1]); // can set next.$ref again\n                    }\n                }\n                collectEntries(next.items, next.additionalProperties, next.not, next.contains, next.propertyNames);\n                collectMapEntries(next.definitions, next.properties, next.patternProperties, next.dependencies);\n                collectArrayEntries(next.anyOf, next.allOf, next.oneOf, next.items);\n            };\n            while (toWalk.length) {\n                var next = toWalk.pop();\n                if (seen.indexOf(next) >= 0) {\n                    continue;\n                }\n                seen.push(next);\n                handleRef(next);\n            }\n            return _this.promise.all(openPromises);\n        };\n        return resolveRefs(schema, schema, schemaURL).then(function (_) { return new ResolvedSchema(schema, resolveErrors); });\n    };\n    JSONSchemaService.prototype.getSchemaForResource = function (resource, document) {\n        // first use $schema if present\n        if (document && document.root && document.root.type === 'object') {\n            var schemaProperties = document.root.properties.filter(function (p) { return (p.key.value === '$schema') && !!p.value; });\n            if (schemaProperties.length > 0) {\n                var schemeId = schemaProperties[0].value.getValue();\n                if (schemeId && Strings.startsWith(schemeId, '.') && this.contextService) {\n                    schemeId = this.contextService.resolveRelativePath(schemeId, resource);\n                }\n                if (schemeId) {\n                    var id = this.normalizeId(schemeId);\n                    return this.getOrAddSchemaHandle(id).getResolvedSchema();\n                }\n            }\n        }\n        var seen = Object.create(null);\n        var schemas = [];\n        for (var _i = 0, _a = this.filePatternAssociations; _i < _a.length; _i++) {\n            var entry = _a[_i];\n            if (entry.matchesPattern(resource)) {\n                for (var _b = 0, _c = entry.getSchemas(); _b < _c.length; _b++) {\n                    var schemaId = _c[_b];\n                    if (!seen[schemaId]) {\n                        schemas.push(schemaId);\n                        seen[schemaId] = true;\n                    }\n                }\n            }\n        }\n        if (schemas.length > 0) {\n            return this.createCombinedSchema(resource, schemas).getResolvedSchema();\n        }\n        return this.promise.resolve(null);\n    };\n    JSONSchemaService.prototype.createCombinedSchema = function (resource, schemaIds) {\n        if (schemaIds.length === 1) {\n            return this.getOrAddSchemaHandle(schemaIds[0]);\n        }\n        else {\n            var combinedSchemaId = 'schemaservice://combinedSchema/' + encodeURIComponent(resource);\n            var combinedSchema = {\n                allOf: schemaIds.map(function (schemaId) { return ({ $ref: schemaId }); })\n            };\n            return this.addSchemaHandle(combinedSchemaId, combinedSchema);\n        }\n    };\n    return JSONSchemaService;\n}());\nexport { JSONSchemaService };\nfunction toDisplayString(url) {\n    try {\n        var uri = URI.parse(url);\n        if (uri.scheme === 'file') {\n            return uri.fsPath;\n        }\n    }\n    catch (e) {\n        // ignore\n    }\n    return url;\n}\n//# sourceMappingURL=jsonSchemaService.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nvar Promise = monaco.Promise;\nimport * as jsonService from './_deps/vscode-json-languageservice/jsonLanguageService.js';\nimport * as ls from './_deps/vscode-languageserver-types/main.js';\nvar PromiseAdapter = /** @class */ (function () {\n    function PromiseAdapter(executor) {\n        this.wrapped = new monaco.Promise(executor);\n    }\n    PromiseAdapter.prototype.then = function (onfulfilled, onrejected) {\n        var thenable = this.wrapped;\n        return thenable.then(onfulfilled, onrejected);\n    };\n    PromiseAdapter.prototype.getWrapped = function () {\n        return this.wrapped;\n    };\n    PromiseAdapter.prototype.cancel = function () {\n        this.wrapped.cancel();\n    };\n    PromiseAdapter.resolve = function (v) {\n        return monaco.Promise.as(v);\n    };\n    PromiseAdapter.reject = function (v) {\n        return monaco.Promise.wrapError(v);\n    };\n    PromiseAdapter.all = function (values) {\n        return monaco.Promise.join(values);\n    };\n    return PromiseAdapter;\n}());\nvar JSONWorker = /** @class */ (function () {\n    function JSONWorker(ctx, createData) {\n        this._ctx = ctx;\n        this._languageSettings = createData.languageSettings;\n        this._languageId = createData.languageId;\n        this._languageService = jsonService.getLanguageService({ promiseConstructor: PromiseAdapter });\n        this._languageService.configure(this._languageSettings);\n    }\n    JSONWorker.prototype.doValidation = function (uri) {\n        var document = this._getTextDocument(uri);\n        if (document) {\n            var jsonDocument = this._languageService.parseJSONDocument(document);\n            return this._languageService.doValidation(document, jsonDocument);\n        }\n        return Promise.as([]);\n    };\n    JSONWorker.prototype.doComplete = function (uri, position) {\n        var document = this._getTextDocument(uri);\n        var jsonDocument = this._languageService.parseJSONDocument(document);\n        return this._languageService.doComplete(document, position, jsonDocument);\n    };\n    JSONWorker.prototype.doResolve = function (item) {\n        return this._languageService.doResolve(item);\n    };\n    JSONWorker.prototype.doHover = function (uri, position) {\n        var document = this._getTextDocument(uri);\n        var jsonDocument = this._languageService.parseJSONDocument(document);\n        return this._languageService.doHover(document, position, jsonDocument);\n    };\n    JSONWorker.prototype.format = function (uri, range, options) {\n        var document = this._getTextDocument(uri);\n        var textEdits = this._languageService.format(document, range, options);\n        return Promise.as(textEdits);\n    };\n    JSONWorker.prototype.resetSchema = function (uri) {\n        return Promise.as(this._languageService.resetSchema(uri));\n    };\n    JSONWorker.prototype.findDocumentSymbols = function (uri) {\n        var document = this._getTextDocument(uri);\n        var jsonDocument = this._languageService.parseJSONDocument(document);\n        var symbols = this._languageService.findDocumentSymbols(document, jsonDocument);\n        return Promise.as(symbols);\n    };\n    JSONWorker.prototype._getTextDocument = function (uri) {\n        var models = this._ctx.getMirrorModels();\n        for (var _i = 0, models_1 = models; _i < models_1.length; _i++) {\n            var model = models_1[_i];\n            if (model.uri.toString() === uri) {\n                return ls.TextDocument.create(uri, this._languageId, model.version, model.getValue());\n            }\n        }\n        return null;\n    };\n    return JSONWorker;\n}());\nexport { JSONWorker };\nexport function create(ctx, createData) {\n    return new JSONWorker(ctx, createData);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { TextDocument, Position, CompletionItem, CompletionList, Range, SymbolInformation, Diagnostic, TextEdit, FormattingOptions, MarkedString } from '../vscode-languageserver-types/main.js';\nimport { JSONCompletion } from './services/jsonCompletion.js';\nimport { JSONHover } from './services/jsonHover.js';\nimport { JSONValidation } from './services/jsonValidation.js';\nimport { JSONDocumentSymbols } from './services/jsonDocumentSymbols.js';\nimport { parse as parseJSON } from './parser/jsonParser.js';\nimport { schemaContributions } from './services/configuration.js';\nimport { JSONSchemaService } from './services/jsonSchemaService.js';\nimport { format as formatJSON } from '../jsonc-parser/main.js';\nexport { TextDocument, Position, CompletionItem, CompletionList, Range, SymbolInformation, Diagnostic, TextEdit, FormattingOptions, MarkedString };\nexport function getLanguageService(params) {\n    var promise = params.promiseConstructor || Promise;\n    var jsonSchemaService = new JSONSchemaService(params.schemaRequestService, params.workspaceContext, promise);\n    jsonSchemaService.setSchemaContributions(schemaContributions);\n    var jsonCompletion = new JSONCompletion(jsonSchemaService, params.contributions, promise);\n    var jsonHover = new JSONHover(jsonSchemaService, params.contributions, promise);\n    var jsonDocumentSymbols = new JSONDocumentSymbols(jsonSchemaService);\n    var jsonValidation = new JSONValidation(jsonSchemaService, promise);\n    return {\n        configure: function (settings) {\n            jsonSchemaService.clearExternalSchemas();\n            if (settings.schemas) {\n                settings.schemas.forEach(function (settings) {\n                    jsonSchemaService.registerExternalSchema(settings.uri, settings.fileMatch, settings.schema);\n                });\n            }\n            jsonValidation.configure(settings);\n        },\n        resetSchema: function (uri) { return jsonSchemaService.onResourceChange(uri); },\n        doValidation: jsonValidation.doValidation.bind(jsonValidation),\n        parseJSONDocument: function (document) { return parseJSON(document, { collectComments: true }); },\n        doResolve: jsonCompletion.doResolve.bind(jsonCompletion),\n        doComplete: jsonCompletion.doComplete.bind(jsonCompletion),\n        findDocumentSymbols: jsonDocumentSymbols.findDocumentSymbols.bind(jsonDocumentSymbols),\n        findColorSymbols: function (d, s) { return jsonDocumentSymbols.findDocumentColors(d, s).then(function (s) { return s.map(function (s) { return s.range; }); }); },\n        findDocumentColors: jsonDocumentSymbols.findDocumentColors.bind(jsonDocumentSymbols),\n        getColorPresentations: jsonDocumentSymbols.getColorPresentations.bind(jsonDocumentSymbols),\n        doHover: jsonHover.doHover.bind(jsonHover),\n        format: function (d, r, o) {\n            var range = void 0;\n            if (r) {\n                var offset = d.offsetAt(r.start);\n                var length = d.offsetAt(r.end) - offset;\n                range = { offset: offset, length: length };\n            }\n            var options = { tabSize: o ? o.tabSize : 4, insertSpaces: o ? o.insertSpaces : true, eol: '\\n' };\n            return formatJSON(d.getText(), range, options).map(function (e) {\n                return TextEdit.replace(Range.create(d.positionAt(e.offset), d.positionAt(e.offset + e.length)), e.content);\n            });\n        }\n    };\n}\n//# sourceMappingURL=jsonLanguageService.js.map"],"sourceRoot":""}