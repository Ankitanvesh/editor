{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-uri/index.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/objects.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/fillers/vscode-nls.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/parser/jsonParser.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/strings.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonCompletion.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/json.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonHover.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonValidation.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/colors.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonDocumentSymbols.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/configuration.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonSchemaService.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/jsonLanguageService.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/jsonWorker.js"],"names":["process","_encode","ch","charCodeAt","toString","toUpperCase","encodeURIComponent2","str","encodeURIComponent","replace","encodeNoop","isWindows","URI","this","_scheme","_empty","_authority","_path","_query","_fragment","_formatted","_fsPath","isUri","thing","authority","fragment","path","query","scheme","Object","defineProperty","prototype","get","enumerable","configurable","value","_driveLetterPath","test","toLowerCase","substr","with","change","ret","_validate","parse","data","_parseComponents","decodeURIComponent","file","_slash","idx","indexOf","substring","match","_regexp","exec","from","components","_schemePattern","Error","_singleSlashStart","_doubleSlashStart","skipEncoding","_asFormatted","uri","encoder","parts","push","m","_upperCaseDrive","lastIdx","join","toJSON","res","fsPath","external","$mid","revive","result","__webpack_exports__","platform","navigator","userAgent","equals","one","other","undefined","Array","isArray","i","key","length","oneKeys","sort","otherKeys","localize","message","args","_i","arguments","rest","index","format","loadMessageBundle","extendStatics","ErrorCode","__extends","setPrototypeOf","__proto__","d","b","p","hasOwnProperty","__","constructor","create","jsonParser_localize","ProblemSeverity","colorHexPattern","emailPattern","EnumMatch","ASTNodeImpl","parent","offset","type","NullASTNodeImpl","_super","_this","call","BooleanASTNodeImpl","boolValue","ArrayASTNodeImpl","items","NumberASTNodeImpl","isInteger","Number","NaN","StringASTNodeImpl","PropertyASTNodeImpl","colonOffset","valueNode","keyNode","ObjectASTNodeImpl","properties","asSchema","schema","not","SchemaCollector","focusOffset","exclude","schemas","add","merge","_a","apply","include","node","contains","newSub","NoOpSchemaCollector","instance","ValidationResult","problems","propertiesMatches","propertiesValueMatches","primaryValueMatches","enumValueMatch","enumValues","hasProblems","mergeAll","validationResults","forEach","validationResult","concat","mergeEnumValues","error","code","EnumValueMismatch","map","v","JSON","stringify","mergePropertyMatch","propertyValidationResult","compare","getNodeValue","obj","prop","getNodePath","includeRightBound","JSONDocument","root","syntaxErrors","comments","externalDiagnostic","getNodeFromOffset","findNode","children","item","getNodeFromOffsetEndInclusive","visit","visitor","doVisit_1","ctn","validate","getMatchingSchemas","matchingSchemas","seenKeys","unprocessedProperties","required","propertyName","location","severity","Warning","propertyProcessed","splice","keys","propertySchema","child","propertyNode","errorMessage","patternProperties","propertyPattern","regex","RegExp","slice","additionalProperties","maxProperties","minProperties","dependencies","propertyDep","requiredProp","propertyNames","f","_validateObjectNode","subSchemas_1","subSchemaRef","subSchema","itemValidationResult","additionalItems","itemSchema_1","containsSchema","doesContain","some","minItems","maxItems","uniqueItems","values_1","duplicates","lastIndexOf","_validateArrayNode","minLength","maxLength","pattern","patternErrorMessage","vscode_uri","e","_validateStringNode","val","multipleOf","getExclusiveLimit","limit","exclusive","getLimit","exclusiveMinimum","minimum","exclusiveMaximum","maximum","_validateNumberNode","matchesType","allOf","notSchema","subValidationResult","subMatchingSchemas","ms","inverted","testAlternatives","alternatives","maxOneMatch","matches","bestMatch","compareResult","anyOf","oneOf","enum","const","deprecationMessage","_validateNode","textDocument","config","text","getText","scanner","jsonc_parser_main","collectComments","_scanNext","token_1","scan","_checkScanError","getTokenOffset","getTokenLength","_errorAtRange","_error","skipUntilAfter","skipUntil","start","end","charAt","_finalize","token_2","getToken","getTokenError","InvalidUnicode","InvalidEscapeCharacter","UnexpectedEndOfNumber","UnexpectedEndOfComment","UnexpectedEndOfString","InvalidCharacter","scanNext","_parseProperty","keysSeen","_parseString","Undefined","getTokenValue","seen","ColonExpected","positionAt","line","_parseValue","ValueExpected","name","count","needsComma","commaOffset","TrailingComma","CommaExpected","CommaOrCloseBacketExpected","_parseArray","PropertyExpected","property","CommaOrCloseBraceExpected","_parseObject","tokenValue","numberValue","_parseNumber","_parseLiteral","_root","endsWith","haystack","needle","diff","jsonCompletion_localize","jsonCompletion_JSONCompletion","JSONCompletion","schemaService","contributions","promiseConstructor","templateVarIdCounter","promise","Promise","doResolve","resolveCompletion","resolver","resolve","doComplete","document","position","doc","isIncomplete","offsetAt","isInComment","currentWord","getCurrentWord","overwriteRange","overwriteStart","main","proposed","collector","suggestion","existing","label","documentation","textEdit","insertText","setAsIncomplete","console","log","getNumberOfProposals","getSchemaForResource","then","collectionPromises","addValue","currentKey","currentProperty","separatorAfter_1","evaluateSeparatorAfter","getPropertyCompletions","getSchemaLessPropertyCompletions","location_1","contribution","collectPromise","collectPropertyCompletions","kind","Property","getLabelForValue","getInsertTextForProperty","insertTextFormat","Snippet","types","getValueCompletions","getSchemaLessValueCompletions","getContributedValueCompletions","all","offsetForSeparator","separatorAfter","addFillerValueCompletions","s","schemaProperties_1","doNotSuggest","proposal","filterText","getFilterTextForValue","description","command","title","collectCompletionsForSimilarObject","getInsertTextForValue","parentKey_1","n","getSuggestionKind","collectSuggestionsForValues","getLabelTextForMatchingNode","getInsertTextForMatchingNode","addBooleanValueCompletion","parentKey_2","addDollarSchemaCompletions","parentKey_3","parentKey","valueNode_1","separatorAfter_2","findItemAtOffset","addSchemaValueCompletions","addNullValueCompletion","parentKey_4","location_2","collectValueCompletions","collectDefaultCompletions","addEnumValueCompletions","addDefaultValueCompletions","collectTypes","arrayDepth","hasProposals","default","detail","defaultSnippets","body","getInsertTextForSnippetValue","getFilterTextForSnippetValue","getLabelForSnippetValue","bodyText","prefix","suffix","indent","split","enm","enumDescriptions","t","getInsertTextForGuessedValue","getRegisteredSchemaIds","schemaId","Module","trim","getInsertTextForPlainText","stringifyObject","stringifyLiteral","newIndent","snippetValue","array","Value","content","propertyText","resultText","nValueProposals","setPosition","token","jsonHover_JSONHover","JSONHover","doHover","hoverRangeNode","hoverRange","createHover","contents","range","getInfoContribution","htmlContent","title_1","markdownDescription_1","markdownEnumValueDescription_1","enumValue_1","every","markdownDescription","toMarkdown","markdownEnumDescriptions","plain","jsonValidation_localize","jsonValidation_JSONValidation","JSONValidation","jsonSchemaService","validationEnabled","configure","raw","commentSeverity","allowComments","Ignore","doValidation","jsonDocument","documentSettings","diagnostics","added","addProblem","problem","signature","trailingCommaSeverity","trailingCommas","errors","astRoot","semanticErrors","schemaAllowsComments","message_1","c","schemaRef","Digit0","Digit9","A","a","hexDigit","charCode","colorFromHex","red","green","blue","alpha","jsonDocumentSymbols_JSONDocumentSymbols","JSONDocumentSymbols","findDocumentSymbols","resourceString","result_1","Function","collectOutlineEntries","containerName","childContainerName","getSymbolKind","nodeType","String","Boolean","Variable","findDocumentColors","visitedNode","matchingSchemas_1","nodeId","color","getColorPresentations","red256","Math","round","green256","blue256","toTwoDigitHex","r","configuration_localize","schemaContributions","schemaAssociations","http://json-schema.org/draft-04/schema#","$schema","definitions","schemaArray","$ref","positiveInteger","positiveIntegerDefault0","simpleTypes","stringArray","id","jsonSchemaService_localize","jsonSchemaService_FilePatternAssociation","FilePatternAssociation","patternRegExp","convertSimple2RegExpPattern","addSchema","matchesPattern","fileName","getSchemas","SchemaHandle","service","url","unresolvedSchemaContent","unresolvedSchema","UnresolvedSchema","getUnresolvedSchema","loadSchema","getResolvedSchema","resolvedSchema","unresolved","resolveSchemaContent","clearSchema","jsonSchemaService_ResolvedSchema","ResolvedSchema","getSection","getSectionRecursive","next","shift","parseInt","isNaN","jsonSchemaService_JSONSchemaService","JSONSchemaService","requestService","contextService","callOnDispose","contributionSchemas","contributionAssociations","schemasById","filePatternAssociations","filePatternAssociationById","registeredSchemasIds","filter","dispose","pop","onResourceChange","normalizeId","schemaFile","setSchemaContributions","normalizedId","addSchemaHandle","associations","fpa","getOrAddFilePatternAssociation","schemaHandle","getOrAddSchemaHandle","registerExternalSchema","filePatterns","clearExternalSchemas","toDisplayString","schemaContent","jsonErrors","schemaToResolve","schemaURL","resolveErrors","target","sourceRoot","sourceURI","section","current","part","findSection","resolveExternalLink","linkPath","parentSchemaURL","resolveRelativePath","loc","resolveRefs","parentSchema","toWalk","openPromises","handleRef","segments","entries","entries_1","entry","collectEntries","maps","maps_1","collectMapEntries","arrays","arrays_1","_b","array_1","collectArrayEntries","_","resource","schemaProperties","schemeId","startsWith","_c","createCombinedSchema","schemaIds","combinedSchemaId","combinedSchema","getLanguageService","params","schemaRequestService","workspaceContext","jsonCompletion","jsonHover","jsonDocumentSymbols","jsonValidation","settings","fileMatch","resetSchema","bind","parseJSONDocument","newJSONDocument","findColorSymbols","o","options","tabSize","insertSpaces","eol","__webpack_require__","jsonWorker_Promise","monaco","PromiseAdapter","executor","wrapped","onfulfilled","onrejected","getWrapped","cancel","as","reject","wrapError","values","jsonWorker_JSONWorker","JSONWorker","ctx","createData","_ctx","_languageSettings","languageSettings","_languageId","languageId","_languageService","_getTextDocument","textEdits","symbols","stylesheet","colorSymbols","colorPresentations","models_1","getMirrorModels","model","version","getValue"],"mappings":"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","file":"7.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nfunction _encode(ch) {\n    return '%' + ch.charCodeAt(0).toString(16).toUpperCase();\n}\n// see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\nfunction encodeURIComponent2(str) {\n    return encodeURIComponent(str).replace(/[!'()*]/g, _encode);\n}\nfunction encodeNoop(str) {\n    return str.replace(/[#?]/, _encode);\n}\n/**\n * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.\n * This class is a simple parser which creates the basic component paths\n * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation\n * and encoding.\n *\n *       foo://example.com:8042/over/there?name=ferret#nose\n *       \\_/   \\______________/\\_________/ \\_________/ \\__/\n *        |           |            |            |        |\n *     scheme     authority       path        query   fragment\n *        |   _____________________|__\n *       / \\ /                        \\\n *       urn:example:animal:ferret:nose\n *\n *\n */\nvar URI = (function () {\n    function URI() {\n        this._scheme = URI._empty;\n        this._authority = URI._empty;\n        this._path = URI._empty;\n        this._query = URI._empty;\n        this._fragment = URI._empty;\n        this._formatted = null;\n        this._fsPath = null;\n    }\n    URI.isUri = function (thing) {\n        if (thing instanceof URI) {\n            return true;\n        }\n        if (!thing) {\n            return false;\n        }\n        return typeof thing.authority === 'string'\n            && typeof thing.fragment === 'string'\n            && typeof thing.path === 'string'\n            && typeof thing.query === 'string'\n            && typeof thing.scheme === 'string';\n    };\n    Object.defineProperty(URI.prototype, \"scheme\", {\n        /**\n         * scheme is the 'http' part of 'http://www.msft.com/some/path?query#fragment'.\n         * The part before the first colon.\n         */\n        get: function () {\n            return this._scheme;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(URI.prototype, \"authority\", {\n        /**\n         * authority is the 'www.msft.com' part of 'http://www.msft.com/some/path?query#fragment'.\n         * The part between the first double slashes and the next slash.\n         */\n        get: function () {\n            return this._authority;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(URI.prototype, \"path\", {\n        /**\n         * path is the '/some/path' part of 'http://www.msft.com/some/path?query#fragment'.\n         */\n        get: function () {\n            return this._path;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(URI.prototype, \"query\", {\n        /**\n         * query is the 'query' part of 'http://www.msft.com/some/path?query#fragment'.\n         */\n        get: function () {\n            return this._query;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(URI.prototype, \"fragment\", {\n        /**\n         * fragment is the 'fragment' part of 'http://www.msft.com/some/path?query#fragment'.\n         */\n        get: function () {\n            return this._fragment;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(URI.prototype, \"fsPath\", {\n        // ---- filesystem path -----------------------\n        /**\n         * Returns a string representing the corresponding file system path of this URI.\n         * Will handle UNC paths and normalize windows drive letters to lower-case. Also\n         * uses the platform specific path separator. Will *not* validate the path for\n         * invalid characters and semantics. Will *not* look at the scheme of this URI.\n         */\n        get: function () {\n            if (!this._fsPath) {\n                var value;\n                if (this._authority && this._path && this.scheme === 'file') {\n                    // unc path: file://shares/c$/far/boo\n                    value = \"//\" + this._authority + this._path;\n                }\n                else if (URI._driveLetterPath.test(this._path)) {\n                    // windows drive letter: file:///c:/far/boo\n                    value = this._path[1].toLowerCase() + this._path.substr(2);\n                }\n                else {\n                    // other path\n                    value = this._path;\n                }\n                if (isWindows) {\n                    value = value.replace(/\\//g, '\\\\');\n                }\n                this._fsPath = value;\n            }\n            return this._fsPath;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // ---- modify to new -------------------------\n    URI.prototype.with = function (change) {\n        if (!change) {\n            return this;\n        }\n        var scheme = change.scheme, authority = change.authority, path = change.path, query = change.query, fragment = change.fragment;\n        if (scheme === void 0) {\n            scheme = this.scheme;\n        }\n        else if (scheme === null) {\n            scheme = '';\n        }\n        if (authority === void 0) {\n            authority = this.authority;\n        }\n        else if (authority === null) {\n            authority = '';\n        }\n        if (path === void 0) {\n            path = this.path;\n        }\n        else if (path === null) {\n            path = '';\n        }\n        if (query === void 0) {\n            query = this.query;\n        }\n        else if (query === null) {\n            query = '';\n        }\n        if (fragment === void 0) {\n            fragment = this.fragment;\n        }\n        else if (fragment === null) {\n            fragment = '';\n        }\n        if (scheme === this.scheme\n            && authority === this.authority\n            && path === this.path\n            && query === this.query\n            && fragment === this.fragment) {\n            return this;\n        }\n        var ret = new URI();\n        ret._scheme = scheme;\n        ret._authority = authority;\n        ret._path = path;\n        ret._query = query;\n        ret._fragment = fragment;\n        URI._validate(ret);\n        return ret;\n    };\n    // ---- parse & validate ------------------------\n    URI.parse = function (value) {\n        var ret = new URI();\n        var data = URI._parseComponents(value);\n        ret._scheme = data.scheme;\n        ret._authority = decodeURIComponent(data.authority);\n        ret._path = decodeURIComponent(data.path);\n        ret._query = decodeURIComponent(data.query);\n        ret._fragment = decodeURIComponent(data.fragment);\n        URI._validate(ret);\n        return ret;\n    };\n    URI.file = function (path) {\n        var ret = new URI();\n        ret._scheme = 'file';\n        // normalize to fwd-slashes on windows,\n        // on other systems bwd-slaches are valid\n        // filename character, eg /f\\oo/ba\\r.txt\n        if (isWindows) {\n            path = path.replace(/\\\\/g, URI._slash);\n        }\n        // check for authority as used in UNC shares\n        // or use the path as given\n        if (path[0] === URI._slash && path[0] === path[1]) {\n            var idx = path.indexOf(URI._slash, 2);\n            if (idx === -1) {\n                ret._authority = path.substring(2);\n            }\n            else {\n                ret._authority = path.substring(2, idx);\n                ret._path = path.substring(idx);\n            }\n        }\n        else {\n            ret._path = path;\n        }\n        // Ensure that path starts with a slash\n        // or that it is at least a slash\n        if (ret._path[0] !== URI._slash) {\n            ret._path = URI._slash + ret._path;\n        }\n        URI._validate(ret);\n        return ret;\n    };\n    URI._parseComponents = function (value) {\n        var ret = {\n            scheme: URI._empty,\n            authority: URI._empty,\n            path: URI._empty,\n            query: URI._empty,\n            fragment: URI._empty,\n        };\n        var match = URI._regexp.exec(value);\n        if (match) {\n            ret.scheme = match[2] || ret.scheme;\n            ret.authority = match[4] || ret.authority;\n            ret.path = match[5] || ret.path;\n            ret.query = match[7] || ret.query;\n            ret.fragment = match[9] || ret.fragment;\n        }\n        return ret;\n    };\n    URI.from = function (components) {\n        return new URI().with(components);\n    };\n    URI._validate = function (ret) {\n        // scheme, https://tools.ietf.org/html/rfc3986#section-3.1\n        // ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n        if (ret.scheme && !URI._schemePattern.test(ret.scheme)) {\n            throw new Error('[UriError]: Scheme contains illegal characters.');\n        }\n        // path, http://tools.ietf.org/html/rfc3986#section-3.3\n        // If a URI contains an authority component, then the path component\n        // must either be empty or begin with a slash (\"/\") character.  If a URI\n        // does not contain an authority component, then the path cannot begin\n        // with two slash characters (\"//\").\n        if (ret.path) {\n            if (ret.authority) {\n                if (!URI._singleSlashStart.test(ret.path)) {\n                    throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character');\n                }\n            }\n            else {\n                if (URI._doubleSlashStart.test(ret.path)) {\n                    throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")');\n                }\n            }\n        }\n    };\n    // ---- printing/externalize ---------------------------\n    /**\n     *\n     * @param skipEncoding Do not encode the result, default is `false`\n     */\n    URI.prototype.toString = function (skipEncoding) {\n        if (skipEncoding === void 0) { skipEncoding = false; }\n        if (!skipEncoding) {\n            if (!this._formatted) {\n                this._formatted = URI._asFormatted(this, false);\n            }\n            return this._formatted;\n        }\n        else {\n            // we don't cache that\n            return URI._asFormatted(this, true);\n        }\n    };\n    URI._asFormatted = function (uri, skipEncoding) {\n        var encoder = !skipEncoding\n            ? encodeURIComponent2\n            : encodeNoop;\n        var parts = [];\n        var scheme = uri.scheme, authority = uri.authority, path = uri.path, query = uri.query, fragment = uri.fragment;\n        if (scheme) {\n            parts.push(scheme, ':');\n        }\n        if (authority || scheme === 'file') {\n            parts.push('//');\n        }\n        if (authority) {\n            authority = authority.toLowerCase();\n            var idx = authority.indexOf(':');\n            if (idx === -1) {\n                parts.push(encoder(authority));\n            }\n            else {\n                parts.push(encoder(authority.substr(0, idx)), authority.substr(idx));\n            }\n        }\n        if (path) {\n            // lower-case windows drive letters in /C:/fff or C:/fff\n            var m = URI._upperCaseDrive.exec(path);\n            if (m) {\n                if (m[1]) {\n                    path = '/' + m[2].toLowerCase() + path.substr(3); // \"/c:\".length === 3\n                }\n                else {\n                    path = m[2].toLowerCase() + path.substr(2); // // \"c:\".length === 2\n                }\n            }\n            // encode every segement but not slashes\n            // make sure that # and ? are always encoded\n            // when occurring in paths - otherwise the result\n            // cannot be parsed back again\n            var lastIdx = 0;\n            while (true) {\n                var idx = path.indexOf(URI._slash, lastIdx);\n                if (idx === -1) {\n                    parts.push(encoder(path.substring(lastIdx)));\n                    break;\n                }\n                parts.push(encoder(path.substring(lastIdx, idx)), URI._slash);\n                lastIdx = idx + 1;\n            }\n            ;\n        }\n        if (query) {\n            parts.push('?', encoder(query));\n        }\n        if (fragment) {\n            parts.push('#', encoder(fragment));\n        }\n        return parts.join(URI._empty);\n    };\n    URI.prototype.toJSON = function () {\n        var res = {\n            fsPath: this.fsPath,\n            external: this.toString(),\n            $mid: 1\n        };\n        if (this.path) {\n            res.path = this.path;\n        }\n        if (this.scheme) {\n            res.scheme = this.scheme;\n        }\n        if (this.authority) {\n            res.authority = this.authority;\n        }\n        if (this.query) {\n            res.query = this.query;\n        }\n        if (this.fragment) {\n            res.fragment = this.fragment;\n        }\n        return res;\n    };\n    URI.revive = function (data) {\n        var result = new URI();\n        result._scheme = data.scheme || URI._empty;\n        result._authority = data.authority || URI._empty;\n        result._path = data.path || URI._empty;\n        result._query = data.query || URI._empty;\n        result._fragment = data.fragment || URI._empty;\n        result._fsPath = data.fsPath;\n        result._formatted = data.external;\n        URI._validate(result);\n        return result;\n    };\n    return URI;\n}());\nexport default URI;\nURI._empty = '';\nURI._slash = '/';\nURI._regexp = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\nURI._driveLetterPath = /^\\/[a-zA-z]:/;\nURI._upperCaseDrive = /^(\\/)?([A-Z]:)/;\nURI._schemePattern = /^\\w[\\w\\d+.-]*$/;\nURI._singleSlashStart = /^\\//;\nURI._doubleSlashStart = /^\\/\\//;\nvar isWindows;\nif (typeof process === 'object') {\n    isWindows = process.platform === 'win32';\n}\nelse if (typeof navigator === 'object') {\n    var userAgent = navigator.userAgent;\n    isWindows = userAgent.indexOf('Windows') >= 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport function equals(one, other) {\n    if (one === other) {\n        return true;\n    }\n    if (one === null || one === undefined || other === null || other === undefined) {\n        return false;\n    }\n    if (typeof one !== typeof other) {\n        return false;\n    }\n    if (typeof one !== 'object') {\n        return false;\n    }\n    if ((Array.isArray(one)) !== (Array.isArray(other))) {\n        return false;\n    }\n    var i, key;\n    if (Array.isArray(one)) {\n        if (one.length !== other.length) {\n            return false;\n        }\n        for (i = 0; i < one.length; i++) {\n            if (!equals(one[i], other[i])) {\n                return false;\n            }\n        }\n    }\n    else {\n        var oneKeys = [];\n        for (key in one) {\n            oneKeys.push(key);\n        }\n        oneKeys.sort();\n        var otherKeys = [];\n        for (key in other) {\n            otherKeys.push(key);\n        }\n        otherKeys.sort();\n        if (!equals(oneKeys, otherKeys)) {\n            return false;\n        }\n        for (i = 0; i < oneKeys.length; i++) {\n            if (!equals(one[oneKeys[i]], other[oneKeys[i]])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=objects.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction format(message, args) {\n    var result;\n    if (args.length === 0) {\n        result = message;\n    }\n    else {\n        result = message.replace(/\\{(\\d+)\\}/g, function (match, rest) {\n            var index = rest[0];\n            return typeof args[index] !== 'undefined' ? args[index] : match;\n        });\n    }\n    return result;\n}\nfunction localize(key, message) {\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n    }\n    return format(message, args);\n}\nexport function loadMessageBundle(file) {\n    return localize;\n}\nexport function config(opt) {\n    return loadMessageBundle;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport * as Json from '../../jsonc-parser/main.js';\nimport * as objects from '../utils/objects.js';\nimport * as nls from '../../../fillers/vscode-nls.js';\nimport Uri from '../../vscode-uri/index.js';\nimport { DiagnosticSeverity } from '../../vscode-languageserver-types/main.js';\nvar localize = nls.loadMessageBundle();\nexport var ErrorCode;\n(function (ErrorCode) {\n    ErrorCode[ErrorCode[\"Undefined\"] = 0] = \"Undefined\";\n    ErrorCode[ErrorCode[\"EnumValueMismatch\"] = 1] = \"EnumValueMismatch\";\n    ErrorCode[ErrorCode[\"UnexpectedEndOfComment\"] = 257] = \"UnexpectedEndOfComment\";\n    ErrorCode[ErrorCode[\"UnexpectedEndOfString\"] = 258] = \"UnexpectedEndOfString\";\n    ErrorCode[ErrorCode[\"UnexpectedEndOfNumber\"] = 259] = \"UnexpectedEndOfNumber\";\n    ErrorCode[ErrorCode[\"InvalidUnicode\"] = 260] = \"InvalidUnicode\";\n    ErrorCode[ErrorCode[\"InvalidEscapeCharacter\"] = 261] = \"InvalidEscapeCharacter\";\n    ErrorCode[ErrorCode[\"InvalidCharacter\"] = 262] = \"InvalidCharacter\";\n    ErrorCode[ErrorCode[\"PropertyExpected\"] = 513] = \"PropertyExpected\";\n    ErrorCode[ErrorCode[\"CommaExpected\"] = 514] = \"CommaExpected\";\n    ErrorCode[ErrorCode[\"ColonExpected\"] = 515] = \"ColonExpected\";\n    ErrorCode[ErrorCode[\"ValueExpected\"] = 516] = \"ValueExpected\";\n    ErrorCode[ErrorCode[\"CommaOrCloseBacketExpected\"] = 517] = \"CommaOrCloseBacketExpected\";\n    ErrorCode[ErrorCode[\"CommaOrCloseBraceExpected\"] = 518] = \"CommaOrCloseBraceExpected\";\n    ErrorCode[ErrorCode[\"TrailingComma\"] = 519] = \"TrailingComma\";\n})(ErrorCode || (ErrorCode = {}));\nvar colorHexPattern = /^#([0-9A-Fa-f]{3,4}|([0-9A-Fa-f]{2}){3,4})$/;\nvar emailPattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\nexport var ProblemSeverity;\n(function (ProblemSeverity) {\n    ProblemSeverity[\"Ignore\"] = \"ignore\";\n    ProblemSeverity[\"Error\"] = \"error\";\n    ProblemSeverity[\"Warning\"] = \"warning\";\n})(ProblemSeverity || (ProblemSeverity = {}));\nvar ASTNodeImpl = /** @class */ (function () {\n    function ASTNodeImpl(parent, offset, length) {\n        this.offset = offset;\n        this.length = length;\n        this.parent = parent;\n    }\n    Object.defineProperty(ASTNodeImpl.prototype, \"children\", {\n        get: function () {\n            return [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ASTNodeImpl.prototype.toString = function () {\n        return 'type: ' + this.type + ' (' + this.offset + '/' + this.length + ')' + (this.parent ? ' parent: {' + this.parent.toString() + '}' : '');\n    };\n    return ASTNodeImpl;\n}());\nexport { ASTNodeImpl };\nvar NullASTNodeImpl = /** @class */ (function (_super) {\n    __extends(NullASTNodeImpl, _super);\n    function NullASTNodeImpl(parent, offset) {\n        var _this = _super.call(this, parent, offset) || this;\n        _this.type = 'null';\n        return _this;\n    }\n    return NullASTNodeImpl;\n}(ASTNodeImpl));\nexport { NullASTNodeImpl };\nvar BooleanASTNodeImpl = /** @class */ (function (_super) {\n    __extends(BooleanASTNodeImpl, _super);\n    function BooleanASTNodeImpl(parent, boolValue, offset) {\n        var _this = _super.call(this, parent, offset) || this;\n        _this.type = 'boolean';\n        _this.value = boolValue;\n        return _this;\n    }\n    return BooleanASTNodeImpl;\n}(ASTNodeImpl));\nexport { BooleanASTNodeImpl };\nvar ArrayASTNodeImpl = /** @class */ (function (_super) {\n    __extends(ArrayASTNodeImpl, _super);\n    function ArrayASTNodeImpl(parent, offset) {\n        var _this = _super.call(this, parent, offset) || this;\n        _this.type = 'array';\n        _this.items = [];\n        return _this;\n    }\n    Object.defineProperty(ArrayASTNodeImpl.prototype, \"children\", {\n        get: function () {\n            return this.items;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ArrayASTNodeImpl;\n}(ASTNodeImpl));\nexport { ArrayASTNodeImpl };\nvar NumberASTNodeImpl = /** @class */ (function (_super) {\n    __extends(NumberASTNodeImpl, _super);\n    function NumberASTNodeImpl(parent, offset) {\n        var _this = _super.call(this, parent, offset) || this;\n        _this.type = 'number';\n        _this.isInteger = true;\n        _this.value = Number.NaN;\n        return _this;\n    }\n    return NumberASTNodeImpl;\n}(ASTNodeImpl));\nexport { NumberASTNodeImpl };\nvar StringASTNodeImpl = /** @class */ (function (_super) {\n    __extends(StringASTNodeImpl, _super);\n    function StringASTNodeImpl(parent, offset, length) {\n        var _this = _super.call(this, parent, offset, length) || this;\n        _this.type = 'string';\n        _this.value = '';\n        return _this;\n    }\n    return StringASTNodeImpl;\n}(ASTNodeImpl));\nexport { StringASTNodeImpl };\nvar PropertyASTNodeImpl = /** @class */ (function (_super) {\n    __extends(PropertyASTNodeImpl, _super);\n    function PropertyASTNodeImpl(parent, offset) {\n        var _this = _super.call(this, parent, offset) || this;\n        _this.type = 'property';\n        _this.colonOffset = -1;\n        return _this;\n    }\n    Object.defineProperty(PropertyASTNodeImpl.prototype, \"children\", {\n        get: function () {\n            return this.valueNode ? [this.keyNode, this.valueNode] : [this.keyNode];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PropertyASTNodeImpl;\n}(ASTNodeImpl));\nexport { PropertyASTNodeImpl };\nvar ObjectASTNodeImpl = /** @class */ (function (_super) {\n    __extends(ObjectASTNodeImpl, _super);\n    function ObjectASTNodeImpl(parent, offset) {\n        var _this = _super.call(this, parent, offset) || this;\n        _this.type = 'object';\n        _this.properties = [];\n        return _this;\n    }\n    Object.defineProperty(ObjectASTNodeImpl.prototype, \"children\", {\n        get: function () {\n            return this.properties;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ObjectASTNodeImpl;\n}(ASTNodeImpl));\nexport { ObjectASTNodeImpl };\nexport function asSchema(schema) {\n    if (typeof schema === 'boolean') {\n        return schema ? {} : { \"not\": {} };\n    }\n    return schema;\n}\nexport var EnumMatch;\n(function (EnumMatch) {\n    EnumMatch[EnumMatch[\"Key\"] = 0] = \"Key\";\n    EnumMatch[EnumMatch[\"Enum\"] = 1] = \"Enum\";\n})(EnumMatch || (EnumMatch = {}));\nvar SchemaCollector = /** @class */ (function () {\n    function SchemaCollector(focusOffset, exclude) {\n        if (focusOffset === void 0) { focusOffset = -1; }\n        if (exclude === void 0) { exclude = null; }\n        this.focusOffset = focusOffset;\n        this.exclude = exclude;\n        this.schemas = [];\n    }\n    SchemaCollector.prototype.add = function (schema) {\n        this.schemas.push(schema);\n    };\n    SchemaCollector.prototype.merge = function (other) {\n        (_a = this.schemas).push.apply(_a, other.schemas);\n        var _a;\n    };\n    SchemaCollector.prototype.include = function (node) {\n        return (this.focusOffset === -1 || contains(node, this.focusOffset)) && (node !== this.exclude);\n    };\n    SchemaCollector.prototype.newSub = function () {\n        return new SchemaCollector(-1, this.exclude);\n    };\n    return SchemaCollector;\n}());\nvar NoOpSchemaCollector = /** @class */ (function () {\n    function NoOpSchemaCollector() {\n    }\n    Object.defineProperty(NoOpSchemaCollector.prototype, \"schemas\", {\n        get: function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    NoOpSchemaCollector.prototype.add = function (schema) { };\n    NoOpSchemaCollector.prototype.merge = function (other) { };\n    NoOpSchemaCollector.prototype.include = function (node) { return true; };\n    NoOpSchemaCollector.prototype.newSub = function () { return this; };\n    NoOpSchemaCollector.instance = new NoOpSchemaCollector();\n    return NoOpSchemaCollector;\n}());\nvar ValidationResult = /** @class */ (function () {\n    function ValidationResult() {\n        this.problems = [];\n        this.propertiesMatches = 0;\n        this.propertiesValueMatches = 0;\n        this.primaryValueMatches = 0;\n        this.enumValueMatch = false;\n        this.enumValues = null;\n    }\n    ValidationResult.prototype.hasProblems = function () {\n        return !!this.problems.length;\n    };\n    ValidationResult.prototype.mergeAll = function (validationResults) {\n        var _this = this;\n        validationResults.forEach(function (validationResult) {\n            _this.merge(validationResult);\n        });\n    };\n    ValidationResult.prototype.merge = function (validationResult) {\n        this.problems = this.problems.concat(validationResult.problems);\n    };\n    ValidationResult.prototype.mergeEnumValues = function (validationResult) {\n        if (!this.enumValueMatch && !validationResult.enumValueMatch && this.enumValues && validationResult.enumValues) {\n            this.enumValues = this.enumValues.concat(validationResult.enumValues);\n            for (var _i = 0, _a = this.problems; _i < _a.length; _i++) {\n                var error = _a[_i];\n                if (error.code === ErrorCode.EnumValueMismatch) {\n                    error.message = localize('enumWarning', 'Value is not accepted. Valid values: {0}.', this.enumValues.map(function (v) { return JSON.stringify(v); }).join(', '));\n                }\n            }\n        }\n    };\n    ValidationResult.prototype.mergePropertyMatch = function (propertyValidationResult) {\n        this.merge(propertyValidationResult);\n        this.propertiesMatches++;\n        if (propertyValidationResult.enumValueMatch || !propertyValidationResult.hasProblems() && propertyValidationResult.propertiesMatches) {\n            this.propertiesValueMatches++;\n        }\n        if (propertyValidationResult.enumValueMatch && propertyValidationResult.enumValues && propertyValidationResult.enumValues.length === 1) {\n            this.primaryValueMatches++;\n        }\n    };\n    ValidationResult.prototype.compare = function (other) {\n        var hasProblems = this.hasProblems();\n        if (hasProblems !== other.hasProblems()) {\n            return hasProblems ? -1 : 1;\n        }\n        if (this.enumValueMatch !== other.enumValueMatch) {\n            return other.enumValueMatch ? -1 : 1;\n        }\n        if (this.primaryValueMatches !== other.primaryValueMatches) {\n            return this.primaryValueMatches - other.primaryValueMatches;\n        }\n        if (this.propertiesValueMatches !== other.propertiesValueMatches) {\n            return this.propertiesValueMatches - other.propertiesValueMatches;\n        }\n        return this.propertiesMatches - other.propertiesMatches;\n    };\n    return ValidationResult;\n}());\nexport { ValidationResult };\nfunction toProblemSeverity(diagnosticsSeverity) {\n    switch (diagnosticsSeverity) {\n        case DiagnosticSeverity.Error: return ProblemSeverity.Error;\n        case DiagnosticSeverity.Warning: return ProblemSeverity.Warning;\n        case DiagnosticSeverity.Information: return ProblemSeverity.Warning;\n    }\n    return ProblemSeverity.Ignore;\n}\nexport function newJSONDocument(root, diagnostics) {\n    if (diagnostics === void 0) { diagnostics = []; }\n    return new JSONDocument(root, [], [], diagnostics);\n}\nexport function getNodeValue(node) {\n    switch (node.type) {\n        case 'array':\n            return node.items.map(getNodeValue);\n        case 'object':\n            var obj = Object.create(null);\n            for (var _i = 0, _a = node.properties; _i < _a.length; _i++) {\n                var prop = _a[_i];\n                obj[prop.keyNode.value] = getNodeValue(prop.valueNode);\n            }\n            return obj;\n        case 'string':\n        case 'number':\n        case 'boolean':\n            return node.value;\n    }\n    return null;\n}\nexport function getNodePath(node) {\n    if (!node.parent) {\n        return [];\n    }\n    var path = getNodePath(node.parent);\n    if (node.parent.type === 'property') {\n        var key = node.parent.keyNode.value;\n        path.push(key);\n    }\n    else if (node.parent.type === 'array') {\n        var index = node.parent.items.indexOf(node);\n        if (index !== -1) {\n            path.push(index);\n        }\n    }\n    return path;\n}\nexport function contains(node, offset, includeRightBound) {\n    if (includeRightBound === void 0) { includeRightBound = false; }\n    return offset >= node.offset && offset < (node.offset + node.length) || includeRightBound && offset === (node.offset + node.length);\n}\nvar JSONDocument = /** @class */ (function () {\n    function JSONDocument(root, syntaxErrors, comments, externalDiagnostic) {\n        if (syntaxErrors === void 0) { syntaxErrors = []; }\n        if (comments === void 0) { comments = []; }\n        if (externalDiagnostic === void 0) { externalDiagnostic = []; }\n        this.root = root;\n        this.syntaxErrors = syntaxErrors;\n        this.comments = comments;\n        this.externalDiagnostic = externalDiagnostic;\n    }\n    JSONDocument.prototype.getNodeFromOffset = function (offset) {\n        var findNode = function (node) {\n            if (offset >= node.offset && offset < (node.offset + node.length)) {\n                var children = node.children;\n                for (var i = 0; i < children.length && children[i].offset <= offset; i++) {\n                    var item = findNode(children[i]);\n                    if (item) {\n                        return item;\n                    }\n                }\n                return node;\n            }\n            return null;\n        };\n        return this.root && findNode(this.root);\n    };\n    JSONDocument.prototype.getNodeFromOffsetEndInclusive = function (offset) {\n        var findNode = function (node) {\n            if (offset >= node.offset && offset <= (node.offset + node.length)) {\n                var children = node.children;\n                for (var i = 0; i < children.length && children[i].offset <= offset; i++) {\n                    var item = findNode(children[i]);\n                    if (item) {\n                        return item;\n                    }\n                }\n                return node;\n            }\n            return null;\n        };\n        return this.root && findNode(this.root);\n    };\n    JSONDocument.prototype.visit = function (visitor) {\n        if (this.root) {\n            var doVisit_1 = function (node) {\n                var ctn = visitor(node);\n                var children = node.children;\n                for (var i = 0; i < children.length && ctn; i++) {\n                    ctn = doVisit_1(children[i]);\n                }\n                return ctn;\n            };\n            doVisit_1(this.root);\n        }\n    };\n    JSONDocument.prototype.validate = function (schema) {\n        if (this.root && schema) {\n            var validationResult = new ValidationResult();\n            validate(this.root, schema, validationResult, NoOpSchemaCollector.instance);\n            return validationResult.problems;\n        }\n        return null;\n    };\n    JSONDocument.prototype.getMatchingSchemas = function (schema, focusOffset, exclude) {\n        if (focusOffset === void 0) { focusOffset = -1; }\n        if (exclude === void 0) { exclude = null; }\n        var matchingSchemas = new SchemaCollector(focusOffset, exclude);\n        if (this.root && schema) {\n            validate(this.root, schema, new ValidationResult(), matchingSchemas);\n        }\n        return matchingSchemas.schemas;\n    };\n    return JSONDocument;\n}());\nexport { JSONDocument };\nfunction validate(node, schema, validationResult, matchingSchemas) {\n    if (!node || !matchingSchemas.include(node)) {\n        return;\n    }\n    switch (node.type) {\n        case 'object':\n            _validateObjectNode(node, schema, validationResult, matchingSchemas);\n            break;\n        case 'array':\n            _validateArrayNode(node, schema, validationResult, matchingSchemas);\n            break;\n        case 'string':\n            _validateStringNode(node, schema, validationResult, matchingSchemas);\n            break;\n        case 'number':\n            _validateNumberNode(node, schema, validationResult, matchingSchemas);\n            break;\n        case 'property':\n            return validate(node.valueNode, schema, validationResult, matchingSchemas);\n    }\n    _validateNode();\n    matchingSchemas.add({ node: node, schema: schema });\n    function _validateNode() {\n        function matchesType(type) {\n            return node.type === type || (type === 'integer' && node.type === 'number' && node.isInteger);\n        }\n        if (Array.isArray(schema.type)) {\n            if (!schema.type.some(matchesType)) {\n                validationResult.problems.push({\n                    location: { offset: node.offset, length: node.length },\n                    severity: ProblemSeverity.Warning,\n                    message: schema.errorMessage || localize('typeArrayMismatchWarning', 'Incorrect type. Expected one of {0}.', schema.type.join(', '))\n                });\n            }\n        }\n        else if (schema.type) {\n            if (!matchesType(schema.type)) {\n                validationResult.problems.push({\n                    location: { offset: node.offset, length: node.length },\n                    severity: ProblemSeverity.Warning,\n                    message: schema.errorMessage || localize('typeMismatchWarning', 'Incorrect type. Expected \"{0}\".', schema.type)\n                });\n            }\n        }\n        if (Array.isArray(schema.allOf)) {\n            schema.allOf.forEach(function (subSchemaRef) {\n                validate(node, asSchema(subSchemaRef), validationResult, matchingSchemas);\n            });\n        }\n        var notSchema = asSchema(schema.not);\n        if (notSchema) {\n            var subValidationResult = new ValidationResult();\n            var subMatchingSchemas = matchingSchemas.newSub();\n            validate(node, notSchema, subValidationResult, subMatchingSchemas);\n            if (!subValidationResult.hasProblems()) {\n                validationResult.problems.push({\n                    location: { offset: node.offset, length: node.length },\n                    severity: ProblemSeverity.Warning,\n                    message: localize('notSchemaWarning', \"Matches a schema that is not allowed.\")\n                });\n            }\n            subMatchingSchemas.schemas.forEach(function (ms) {\n                ms.inverted = !ms.inverted;\n                matchingSchemas.add(ms);\n            });\n        }\n        var testAlternatives = function (alternatives, maxOneMatch) {\n            var matches = [];\n            // remember the best match that is used for error messages\n            var bestMatch = null;\n            alternatives.forEach(function (subSchemaRef) {\n                var subSchema = asSchema(subSchemaRef);\n                var subValidationResult = new ValidationResult();\n                var subMatchingSchemas = matchingSchemas.newSub();\n                validate(node, subSchema, subValidationResult, subMatchingSchemas);\n                if (!subValidationResult.hasProblems()) {\n                    matches.push(subSchema);\n                }\n                if (!bestMatch) {\n                    bestMatch = { schema: subSchema, validationResult: subValidationResult, matchingSchemas: subMatchingSchemas };\n                }\n                else {\n                    if (!maxOneMatch && !subValidationResult.hasProblems() && !bestMatch.validationResult.hasProblems()) {\n                        // no errors, both are equally good matches\n                        bestMatch.matchingSchemas.merge(subMatchingSchemas);\n                        bestMatch.validationResult.propertiesMatches += subValidationResult.propertiesMatches;\n                        bestMatch.validationResult.propertiesValueMatches += subValidationResult.propertiesValueMatches;\n                    }\n                    else {\n                        var compareResult = subValidationResult.compare(bestMatch.validationResult);\n                        if (compareResult > 0) {\n                            // our node is the best matching so far\n                            bestMatch = { schema: subSchema, validationResult: subValidationResult, matchingSchemas: subMatchingSchemas };\n                        }\n                        else if (compareResult === 0) {\n                            // there's already a best matching but we are as good\n                            bestMatch.matchingSchemas.merge(subMatchingSchemas);\n                            bestMatch.validationResult.mergeEnumValues(subValidationResult);\n                        }\n                    }\n                }\n            });\n            if (matches.length > 1 && maxOneMatch) {\n                validationResult.problems.push({\n                    location: { offset: node.offset, length: 1 },\n                    severity: ProblemSeverity.Warning,\n                    message: localize('oneOfWarning', \"Matches multiple schemas when only one must validate.\")\n                });\n            }\n            if (bestMatch !== null) {\n                validationResult.merge(bestMatch.validationResult);\n                validationResult.propertiesMatches += bestMatch.validationResult.propertiesMatches;\n                validationResult.propertiesValueMatches += bestMatch.validationResult.propertiesValueMatches;\n                matchingSchemas.merge(bestMatch.matchingSchemas);\n            }\n            return matches.length;\n        };\n        if (Array.isArray(schema.anyOf)) {\n            testAlternatives(schema.anyOf, false);\n        }\n        if (Array.isArray(schema.oneOf)) {\n            testAlternatives(schema.oneOf, true);\n        }\n        if (Array.isArray(schema.enum)) {\n            var val = getNodeValue(node);\n            var enumValueMatch = false;\n            for (var _i = 0, _a = schema.enum; _i < _a.length; _i++) {\n                var e = _a[_i];\n                if (objects.equals(val, e)) {\n                    enumValueMatch = true;\n                    break;\n                }\n            }\n            validationResult.enumValues = schema.enum;\n            validationResult.enumValueMatch = enumValueMatch;\n            if (!enumValueMatch) {\n                validationResult.problems.push({\n                    location: { offset: node.offset, length: node.length },\n                    severity: ProblemSeverity.Warning,\n                    code: ErrorCode.EnumValueMismatch,\n                    message: schema.errorMessage || localize('enumWarning', 'Value is not accepted. Valid values: {0}.', schema.enum.map(function (v) { return JSON.stringify(v); }).join(', '))\n                });\n            }\n        }\n        if (schema.const) {\n            var val = getNodeValue(node);\n            if (!objects.equals(val, schema.const)) {\n                validationResult.problems.push({\n                    location: { offset: node.offset, length: node.length },\n                    severity: ProblemSeverity.Warning,\n                    code: ErrorCode.EnumValueMismatch,\n                    message: schema.errorMessage || localize('constWarning', 'Value must be {0}.', JSON.stringify(schema.const))\n                });\n                validationResult.enumValueMatch = false;\n            }\n            else {\n                validationResult.enumValueMatch = true;\n            }\n            validationResult.enumValues = [schema.const];\n        }\n        if (schema.deprecationMessage && node.parent) {\n            validationResult.problems.push({\n                location: { offset: node.parent.offset, length: node.parent.length },\n                severity: ProblemSeverity.Warning,\n                message: schema.deprecationMessage\n            });\n        }\n    }\n    function _validateNumberNode(node, schema, validationResult, matchingSchemas) {\n        var val = node.value;\n        if (typeof schema.multipleOf === 'number') {\n            if (val % schema.multipleOf !== 0) {\n                validationResult.problems.push({\n                    location: { offset: node.offset, length: node.length },\n                    severity: ProblemSeverity.Warning,\n                    message: localize('multipleOfWarning', 'Value is not divisible by {0}.', schema.multipleOf)\n                });\n            }\n        }\n        function getExclusiveLimit(limit, exclusive) {\n            if (typeof exclusive === 'number') {\n                return exclusive;\n            }\n            if (typeof exclusive === 'boolean' && exclusive) {\n                return limit;\n            }\n            return void 0;\n        }\n        function getLimit(limit, exclusive) {\n            if (typeof exclusive !== 'boolean' || !exclusive) {\n                return limit;\n            }\n            return void 0;\n        }\n        var exclusiveMinimum = getExclusiveLimit(schema.minimum, schema.exclusiveMinimum);\n        if (typeof exclusiveMinimum === 'number' && val <= exclusiveMinimum) {\n            validationResult.problems.push({\n                location: { offset: node.offset, length: node.length },\n                severity: ProblemSeverity.Warning,\n                message: localize('exclusiveMinimumWarning', 'Value is below the exclusive minimum of {0}.', exclusiveMinimum)\n            });\n        }\n        var exclusiveMaximum = getExclusiveLimit(schema.maximum, schema.exclusiveMaximum);\n        if (typeof exclusiveMaximum === 'number' && val >= exclusiveMaximum) {\n            validationResult.problems.push({\n                location: { offset: node.offset, length: node.length },\n                severity: ProblemSeverity.Warning,\n                message: localize('exclusiveMaximumWarning', 'Value is above the exclusive maximum of {0}.', exclusiveMaximum)\n            });\n        }\n        var minimum = getLimit(schema.minimum, schema.exclusiveMinimum);\n        if (typeof minimum === 'number' && val < minimum) {\n            validationResult.problems.push({\n                location: { offset: node.offset, length: node.length },\n                severity: ProblemSeverity.Warning,\n                message: localize('minimumWarning', 'Value is below the minimum of {0}.', minimum)\n            });\n        }\n        var maximum = getLimit(schema.maximum, schema.exclusiveMaximum);\n        if (typeof maximum === 'number' && val > maximum) {\n            validationResult.problems.push({\n                location: { offset: node.offset, length: node.length },\n                severity: ProblemSeverity.Warning,\n                message: localize('maximumWarning', 'Value is above the maximum of {0}.', maximum)\n            });\n        }\n    }\n    function _validateStringNode(node, schema, validationResult, matchingSchemas) {\n        if (schema.minLength && node.value.length < schema.minLength) {\n            validationResult.problems.push({\n                location: { offset: node.offset, length: node.length },\n                severity: ProblemSeverity.Warning,\n                message: localize('minLengthWarning', 'String is shorter than the minimum length of {0}.', schema.minLength)\n            });\n        }\n        if (schema.maxLength && node.value.length > schema.maxLength) {\n            validationResult.problems.push({\n                location: { offset: node.offset, length: node.length },\n                severity: ProblemSeverity.Warning,\n                message: localize('maxLengthWarning', 'String is longer than the maximum length of {0}.', schema.maxLength)\n            });\n        }\n        if (schema.pattern) {\n            var regex = new RegExp(schema.pattern);\n            if (!regex.test(node.value)) {\n                validationResult.problems.push({\n                    location: { offset: node.offset, length: node.length },\n                    severity: ProblemSeverity.Warning,\n                    message: schema.patternErrorMessage || schema.errorMessage || localize('patternWarning', 'String does not match the pattern of \"{0}\".', schema.pattern)\n                });\n            }\n        }\n        if (schema.format) {\n            switch (schema.format) {\n                case 'uri':\n                case 'uri-reference':\n                    {\n                        var errorMessage = void 0;\n                        if (!node.value) {\n                            errorMessage = localize('uriEmpty', 'URI expected.');\n                        }\n                        else {\n                            try {\n                                var uri = Uri.parse(node.value);\n                                if (!uri.scheme && schema.format === 'uri') {\n                                    errorMessage = localize('uriSchemeMissing', 'URI with a scheme is expected.');\n                                }\n                            }\n                            catch (e) {\n                                errorMessage = e.message;\n                            }\n                        }\n                        if (errorMessage) {\n                            validationResult.problems.push({\n                                location: { offset: node.offset, length: node.length },\n                                severity: ProblemSeverity.Warning,\n                                message: schema.patternErrorMessage || schema.errorMessage || localize('uriFormatWarning', 'String is not a URI: {0}', errorMessage)\n                            });\n                        }\n                    }\n                    break;\n                case 'email':\n                    {\n                        if (!node.value.match(emailPattern)) {\n                            validationResult.problems.push({\n                                location: { offset: node.offset, length: node.length },\n                                severity: ProblemSeverity.Warning,\n                                message: schema.patternErrorMessage || schema.errorMessage || localize('emailFormatWarning', 'String is not an e-mail address.')\n                            });\n                        }\n                    }\n                    break;\n                case 'color-hex':\n                    {\n                        if (!node.value.match(colorHexPattern)) {\n                            validationResult.problems.push({\n                                location: { offset: node.offset, length: node.length },\n                                severity: ProblemSeverity.Warning,\n                                message: schema.patternErrorMessage || schema.errorMessage || localize('colorHexFormatWarning', 'Invalid color format. Use #RGB, #RGBA, #RRGGBB or #RRGGBBAA.')\n                            });\n                        }\n                    }\n                    break;\n                default:\n            }\n        }\n    }\n    function _validateArrayNode(node, schema, validationResult, matchingSchemas) {\n        if (Array.isArray(schema.items)) {\n            var subSchemas_1 = schema.items;\n            subSchemas_1.forEach(function (subSchemaRef, index) {\n                var subSchema = asSchema(subSchemaRef);\n                var itemValidationResult = new ValidationResult();\n                var item = node.items[index];\n                if (item) {\n                    validate(item, subSchema, itemValidationResult, matchingSchemas);\n                    validationResult.mergePropertyMatch(itemValidationResult);\n                }\n                else if (node.items.length >= subSchemas_1.length) {\n                    validationResult.propertiesValueMatches++;\n                }\n            });\n            if (node.items.length > subSchemas_1.length) {\n                if (typeof schema.additionalItems === 'object') {\n                    for (var i = subSchemas_1.length; i < node.items.length; i++) {\n                        var itemValidationResult = new ValidationResult();\n                        validate(node.items[i], schema.additionalItems, itemValidationResult, matchingSchemas);\n                        validationResult.mergePropertyMatch(itemValidationResult);\n                    }\n                }\n                else if (schema.additionalItems === false) {\n                    validationResult.problems.push({\n                        location: { offset: node.offset, length: node.length },\n                        severity: ProblemSeverity.Warning,\n                        message: localize('additionalItemsWarning', 'Array has too many items according to schema. Expected {0} or fewer.', subSchemas_1.length)\n                    });\n                }\n            }\n        }\n        else {\n            var itemSchema_1 = asSchema(schema.items);\n            if (itemSchema_1) {\n                node.items.forEach(function (item) {\n                    var itemValidationResult = new ValidationResult();\n                    validate(item, itemSchema_1, itemValidationResult, matchingSchemas);\n                    validationResult.mergePropertyMatch(itemValidationResult);\n                });\n            }\n        }\n        var containsSchema = asSchema(schema.contains);\n        if (containsSchema) {\n            var doesContain = node.items.some(function (item) {\n                var itemValidationResult = new ValidationResult();\n                validate(item, containsSchema, itemValidationResult, NoOpSchemaCollector.instance);\n                return !itemValidationResult.hasProblems();\n            });\n            if (!doesContain) {\n                validationResult.problems.push({\n                    location: { offset: node.offset, length: node.length },\n                    severity: ProblemSeverity.Warning,\n                    message: schema.errorMessage || localize('requiredItemMissingWarning', 'Array does not contain required item.', schema.minItems)\n                });\n            }\n        }\n        if (schema.minItems && node.items.length < schema.minItems) {\n            validationResult.problems.push({\n                location: { offset: node.offset, length: node.length },\n                severity: ProblemSeverity.Warning,\n                message: localize('minItemsWarning', 'Array has too few items. Expected {0} or more.', schema.minItems)\n            });\n        }\n        if (schema.maxItems && node.items.length > schema.maxItems) {\n            validationResult.problems.push({\n                location: { offset: node.offset, length: node.length },\n                severity: ProblemSeverity.Warning,\n                message: localize('maxItemsWarning', 'Array has too many items. Expected {0} or fewer.', schema.minItems)\n            });\n        }\n        if (schema.uniqueItems === true) {\n            var values_1 = getNodeValue(node);\n            var duplicates = values_1.some(function (value, index) {\n                return index !== values_1.lastIndexOf(value);\n            });\n            if (duplicates) {\n                validationResult.problems.push({\n                    location: { offset: node.offset, length: node.length },\n                    severity: ProblemSeverity.Warning,\n                    message: localize('uniqueItemsWarning', 'Array has duplicate items.')\n                });\n            }\n        }\n    }\n    function _validateObjectNode(node, schema, validationResult, matchingSchemas) {\n        var seenKeys = Object.create(null);\n        var unprocessedProperties = [];\n        node.properties.forEach(function (node) {\n            var key = node.keyNode.value;\n            seenKeys[key] = node.valueNode;\n            unprocessedProperties.push(key);\n        });\n        if (Array.isArray(schema.required)) {\n            schema.required.forEach(function (propertyName) {\n                if (!seenKeys[propertyName]) {\n                    var keyNode = node.parent && node.parent.type === 'property' && node.parent.keyNode;\n                    var location = keyNode ? { offset: keyNode.offset, length: keyNode.length } : { offset: node.offset, length: 1 };\n                    validationResult.problems.push({\n                        location: location,\n                        severity: ProblemSeverity.Warning,\n                        message: localize('MissingRequiredPropWarning', 'Missing property \"{0}\".', propertyName)\n                    });\n                }\n            });\n        }\n        var propertyProcessed = function (prop) {\n            var index = unprocessedProperties.indexOf(prop);\n            while (index >= 0) {\n                unprocessedProperties.splice(index, 1);\n                index = unprocessedProperties.indexOf(prop);\n            }\n        };\n        if (schema.properties) {\n            Object.keys(schema.properties).forEach(function (propertyName) {\n                propertyProcessed(propertyName);\n                var propertySchema = schema.properties[propertyName];\n                var child = seenKeys[propertyName];\n                if (child) {\n                    if (typeof propertySchema === 'boolean') {\n                        if (!propertySchema) {\n                            var propertyNode = child.parent;\n                            validationResult.problems.push({\n                                location: { offset: propertyNode.keyNode.offset, length: propertyNode.keyNode.length },\n                                severity: ProblemSeverity.Warning,\n                                message: schema.errorMessage || localize('DisallowedExtraPropWarning', 'Property {0} is not allowed.', propertyName)\n                            });\n                        }\n                        else {\n                            validationResult.propertiesMatches++;\n                            validationResult.propertiesValueMatches++;\n                        }\n                    }\n                    else {\n                        var propertyValidationResult = new ValidationResult();\n                        validate(child, propertySchema, propertyValidationResult, matchingSchemas);\n                        validationResult.mergePropertyMatch(propertyValidationResult);\n                    }\n                }\n            });\n        }\n        if (schema.patternProperties) {\n            Object.keys(schema.patternProperties).forEach(function (propertyPattern) {\n                var regex = new RegExp(propertyPattern);\n                unprocessedProperties.slice(0).forEach(function (propertyName) {\n                    if (regex.test(propertyName)) {\n                        propertyProcessed(propertyName);\n                        var child = seenKeys[propertyName];\n                        if (child) {\n                            var propertySchema = schema.patternProperties[propertyPattern];\n                            if (typeof propertySchema === 'boolean') {\n                                if (!propertySchema) {\n                                    var propertyNode = child.parent;\n                                    validationResult.problems.push({\n                                        location: { offset: propertyNode.keyNode.offset, length: propertyNode.keyNode.length },\n                                        severity: ProblemSeverity.Warning,\n                                        message: schema.errorMessage || localize('DisallowedExtraPropWarning', 'Property {0} is not allowed.', propertyName)\n                                    });\n                                }\n                                else {\n                                    validationResult.propertiesMatches++;\n                                    validationResult.propertiesValueMatches++;\n                                }\n                            }\n                            else {\n                                var propertyValidationResult = new ValidationResult();\n                                validate(child, propertySchema, propertyValidationResult, matchingSchemas);\n                                validationResult.mergePropertyMatch(propertyValidationResult);\n                            }\n                        }\n                    }\n                });\n            });\n        }\n        if (typeof schema.additionalProperties === 'object') {\n            unprocessedProperties.forEach(function (propertyName) {\n                var child = seenKeys[propertyName];\n                if (child) {\n                    var propertyValidationResult = new ValidationResult();\n                    validate(child, schema.additionalProperties, propertyValidationResult, matchingSchemas);\n                    validationResult.mergePropertyMatch(propertyValidationResult);\n                }\n            });\n        }\n        else if (schema.additionalProperties === false) {\n            if (unprocessedProperties.length > 0) {\n                unprocessedProperties.forEach(function (propertyName) {\n                    var child = seenKeys[propertyName];\n                    if (child) {\n                        var propertyNode = child.parent;\n                        validationResult.problems.push({\n                            location: { offset: propertyNode.keyNode.offset, length: propertyNode.keyNode.length },\n                            severity: ProblemSeverity.Warning,\n                            message: schema.errorMessage || localize('DisallowedExtraPropWarning', 'Property {0} is not allowed.', propertyName)\n                        });\n                    }\n                });\n            }\n        }\n        if (schema.maxProperties) {\n            if (node.properties.length > schema.maxProperties) {\n                validationResult.problems.push({\n                    location: { offset: node.offset, length: node.length },\n                    severity: ProblemSeverity.Warning,\n                    message: localize('MaxPropWarning', 'Object has more properties than limit of {0}.', schema.maxProperties)\n                });\n            }\n        }\n        if (schema.minProperties) {\n            if (node.properties.length < schema.minProperties) {\n                validationResult.problems.push({\n                    location: { offset: node.offset, length: node.length },\n                    severity: ProblemSeverity.Warning,\n                    message: localize('MinPropWarning', 'Object has fewer properties than the required number of {0}', schema.minProperties)\n                });\n            }\n        }\n        if (schema.dependencies) {\n            Object.keys(schema.dependencies).forEach(function (key) {\n                var prop = seenKeys[key];\n                if (prop) {\n                    var propertyDep = schema.dependencies[key];\n                    if (Array.isArray(propertyDep)) {\n                        propertyDep.forEach(function (requiredProp) {\n                            if (!seenKeys[requiredProp]) {\n                                validationResult.problems.push({\n                                    location: { offset: node.offset, length: node.length },\n                                    severity: ProblemSeverity.Warning,\n                                    message: localize('RequiredDependentPropWarning', 'Object is missing property {0} required by property {1}.', requiredProp, key)\n                                });\n                            }\n                            else {\n                                validationResult.propertiesValueMatches++;\n                            }\n                        });\n                    }\n                    else {\n                        var propertySchema = asSchema(propertyDep);\n                        if (propertySchema) {\n                            var propertyValidationResult = new ValidationResult();\n                            validate(node, propertySchema, propertyValidationResult, matchingSchemas);\n                            validationResult.mergePropertyMatch(propertyValidationResult);\n                        }\n                    }\n                }\n            });\n        }\n        var propertyNames = asSchema(schema.propertyNames);\n        if (propertyNames) {\n            node.properties.forEach(function (f) {\n                var key = f.keyNode;\n                if (key) {\n                    validate(key, propertyNames, validationResult, NoOpSchemaCollector.instance);\n                }\n            });\n        }\n    }\n}\nexport function parse(textDocument, config) {\n    var problems = [];\n    var text = textDocument.getText();\n    var scanner = Json.createScanner(text, false);\n    var comments = config && config.collectComments ? [] : void 0;\n    function _scanNext() {\n        while (true) {\n            var token_1 = scanner.scan();\n            _checkScanError();\n            switch (token_1) {\n                case 12 /* LineCommentTrivia */:\n                case 13 /* BlockCommentTrivia */:\n                    if (Array.isArray(comments)) {\n                        comments.push({ offset: scanner.getTokenOffset(), length: scanner.getTokenLength() });\n                    }\n                    break;\n                case 15 /* Trivia */:\n                case 14 /* LineBreakTrivia */:\n                    break;\n                default:\n                    return token_1;\n            }\n        }\n    }\n    function _accept(token) {\n        if (scanner.getToken() === token) {\n            _scanNext();\n            return true;\n        }\n        return false;\n    }\n    function _errorAtRange(message, code, location) {\n        if (problems.length === 0 || problems[problems.length - 1].location.offset !== location.offset) {\n            problems.push({ message: message, location: location, code: code, severity: ProblemSeverity.Error });\n        }\n    }\n    function _error(message, code, node, skipUntilAfter, skipUntil) {\n        if (node === void 0) { node = null; }\n        if (skipUntilAfter === void 0) { skipUntilAfter = []; }\n        if (skipUntil === void 0) { skipUntil = []; }\n        var start = scanner.getTokenOffset();\n        var end = scanner.getTokenOffset() + scanner.getTokenLength();\n        if (start === end && start > 0) {\n            start--;\n            while (start > 0 && /\\s/.test(text.charAt(start))) {\n                start--;\n            }\n            end = start + 1;\n        }\n        _errorAtRange(message, code, { offset: start, length: end - start });\n        if (node) {\n            _finalize(node, false);\n        }\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            var token_2 = scanner.getToken();\n            while (token_2 !== 17 /* EOF */) {\n                if (skipUntilAfter.indexOf(token_2) !== -1) {\n                    _scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token_2) !== -1) {\n                    break;\n                }\n                token_2 = _scanNext();\n            }\n        }\n        return node;\n    }\n    function _checkScanError() {\n        switch (scanner.getTokenError()) {\n            case 4 /* InvalidUnicode */:\n                _error(localize('InvalidUnicode', 'Invalid unicode sequence in string.'), ErrorCode.InvalidUnicode);\n                return true;\n            case 5 /* InvalidEscapeCharacter */:\n                _error(localize('InvalidEscapeCharacter', 'Invalid escape character in string.'), ErrorCode.InvalidEscapeCharacter);\n                return true;\n            case 3 /* UnexpectedEndOfNumber */:\n                _error(localize('UnexpectedEndOfNumber', 'Unexpected end of number.'), ErrorCode.UnexpectedEndOfNumber);\n                return true;\n            case 1 /* UnexpectedEndOfComment */:\n                _error(localize('UnexpectedEndOfComment', 'Unexpected end of comment.'), ErrorCode.UnexpectedEndOfComment);\n                return true;\n            case 2 /* UnexpectedEndOfString */:\n                _error(localize('UnexpectedEndOfString', 'Unexpected end of string.'), ErrorCode.UnexpectedEndOfString);\n                return true;\n            case 6 /* InvalidCharacter */:\n                _error(localize('InvalidCharacter', 'Invalid characters in string. Control characters must be escaped.'), ErrorCode.InvalidCharacter);\n                return true;\n        }\n        return false;\n    }\n    function _finalize(node, scanNext) {\n        node.length = scanner.getTokenOffset() + scanner.getTokenLength() - node.offset;\n        if (scanNext) {\n            _scanNext();\n        }\n        return node;\n    }\n    function _parseArray(parent) {\n        if (scanner.getToken() !== 3 /* OpenBracketToken */) {\n            return null;\n        }\n        var node = new ArrayASTNodeImpl(parent, scanner.getTokenOffset());\n        _scanNext(); // consume OpenBracketToken\n        var count = 0;\n        var needsComma = false;\n        while (scanner.getToken() !== 4 /* CloseBracketToken */ && scanner.getToken() !== 17 /* EOF */) {\n            if (scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    _error(localize('ValueExpected', 'Value expected'), ErrorCode.ValueExpected);\n                }\n                var commaOffset = scanner.getTokenOffset();\n                _scanNext(); // consume comma\n                if (scanner.getToken() === 4 /* CloseBracketToken */) {\n                    if (needsComma) {\n                        _errorAtRange(localize('TrailingComma', 'Trailing comma'), ErrorCode.TrailingComma, { offset: commaOffset, length: 1 });\n                    }\n                    continue;\n                }\n            }\n            else if (needsComma) {\n                _error(localize('ExpectedComma', 'Expected comma'), ErrorCode.CommaExpected);\n            }\n            var item = _parseValue(node, count++);\n            if (!item) {\n                _error(localize('PropertyExpected', 'Value expected'), ErrorCode.ValueExpected, null, [], [4 /* CloseBracketToken */, 5 /* CommaToken */]);\n            }\n            else {\n                node.items.push(item);\n            }\n            needsComma = true;\n        }\n        if (scanner.getToken() !== 4 /* CloseBracketToken */) {\n            return _error(localize('ExpectedCloseBracket', 'Expected comma or closing bracket'), ErrorCode.CommaOrCloseBacketExpected, node);\n        }\n        return _finalize(node, true);\n    }\n    function _parseProperty(parent, keysSeen) {\n        var node = new PropertyASTNodeImpl(parent, scanner.getTokenOffset());\n        var key = _parseString(node);\n        if (!key) {\n            if (scanner.getToken() === 16 /* Unknown */) {\n                // give a more helpful error message\n                _error(localize('DoubleQuotesExpected', 'Property keys must be doublequoted'), ErrorCode.Undefined);\n                var keyNode = new StringASTNodeImpl(node, scanner.getTokenOffset(), scanner.getTokenLength());\n                keyNode.value = scanner.getTokenValue();\n                key = keyNode;\n                _scanNext(); // consume Unknown\n            }\n            else {\n                return null;\n            }\n        }\n        node.keyNode = key;\n        var seen = keysSeen[key.value];\n        if (seen) {\n            problems.push({ location: { offset: node.keyNode.offset, length: node.keyNode.length }, message: localize('DuplicateKeyWarning', \"Duplicate object key\"), code: ErrorCode.Undefined, severity: ProblemSeverity.Warning });\n            if (typeof seen === 'object') {\n                problems.push({ location: { offset: seen.keyNode.offset, length: seen.keyNode.length }, message: localize('DuplicateKeyWarning', \"Duplicate object key\"), code: ErrorCode.Undefined, severity: ProblemSeverity.Warning });\n            }\n            keysSeen[key.value] = true; // if the same key is duplicate again, avoid duplicate error reporting\n        }\n        else {\n            keysSeen[key.value] = node;\n        }\n        if (scanner.getToken() === 6 /* ColonToken */) {\n            node.colonOffset = scanner.getTokenOffset();\n            _scanNext(); // consume ColonToken\n        }\n        else {\n            _error(localize('ColonExpected', 'Colon expected'), ErrorCode.ColonExpected);\n            if (scanner.getToken() === 10 /* StringLiteral */ && textDocument.positionAt(key.offset + key.length).line < textDocument.positionAt(scanner.getTokenOffset()).line) {\n                node.length = key.length;\n                return node;\n            }\n        }\n        var value = _parseValue(node, key.value);\n        if (!value) {\n            return _error(localize('ValueExpected', 'Value expected'), ErrorCode.ValueExpected, node, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n        }\n        node.valueNode = value;\n        node.length = value.offset + value.length - node.offset;\n        return node;\n    }\n    function _parseObject(parent) {\n        if (scanner.getToken() !== 1 /* OpenBraceToken */) {\n            return null;\n        }\n        var node = new ObjectASTNodeImpl(parent, scanner.getTokenOffset());\n        var keysSeen = Object.create(null);\n        _scanNext(); // consume OpenBraceToken\n        var needsComma = false;\n        while (scanner.getToken() !== 2 /* CloseBraceToken */ && scanner.getToken() !== 17 /* EOF */) {\n            if (scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    _error(localize('PropertyExpected', 'Property expected'), ErrorCode.PropertyExpected);\n                }\n                var commaOffset = scanner.getTokenOffset();\n                _scanNext(); // consume comma\n                if (scanner.getToken() === 2 /* CloseBraceToken */) {\n                    if (needsComma) {\n                        _errorAtRange(localize('TrailingComma', 'Trailing comma'), ErrorCode.TrailingComma, { offset: commaOffset, length: 1 });\n                    }\n                    continue;\n                }\n            }\n            else if (needsComma) {\n                _error(localize('ExpectedComma', 'Expected comma'), ErrorCode.CommaExpected);\n            }\n            var property = _parseProperty(node, keysSeen);\n            if (!property) {\n                _error(localize('PropertyExpected', 'Property expected'), ErrorCode.PropertyExpected, null, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n            else {\n                node.properties.push(property);\n            }\n            needsComma = true;\n        }\n        if (scanner.getToken() !== 2 /* CloseBraceToken */) {\n            return _error(localize('ExpectedCloseBrace', 'Expected comma or closing brace'), ErrorCode.CommaOrCloseBraceExpected, node);\n        }\n        return _finalize(node, true);\n    }\n    function _parseString(parent) {\n        if (scanner.getToken() !== 10 /* StringLiteral */) {\n            return null;\n        }\n        var node = new StringASTNodeImpl(parent, scanner.getTokenOffset());\n        node.value = scanner.getTokenValue();\n        return _finalize(node, true);\n    }\n    function _parseNumber(parent) {\n        if (scanner.getToken() !== 11 /* NumericLiteral */) {\n            return null;\n        }\n        var node = new NumberASTNodeImpl(parent, scanner.getTokenOffset());\n        if (scanner.getTokenError() === 0 /* None */) {\n            var tokenValue = scanner.getTokenValue();\n            try {\n                var numberValue = JSON.parse(tokenValue);\n                if (typeof numberValue !== 'number') {\n                    return _error(localize('InvalidNumberFormat', 'Invalid number format.'), ErrorCode.Undefined, node);\n                }\n                node.value = numberValue;\n            }\n            catch (e) {\n                return _error(localize('InvalidNumberFormat', 'Invalid number format.'), ErrorCode.Undefined, node);\n            }\n            node.isInteger = tokenValue.indexOf('.') === -1;\n        }\n        return _finalize(node, true);\n    }\n    function _parseLiteral(parent) {\n        var node;\n        switch (scanner.getToken()) {\n            case 7 /* NullKeyword */:\n                return _finalize(new NullASTNodeImpl(parent, scanner.getTokenOffset()), true);\n            case 8 /* TrueKeyword */:\n                return _finalize(new BooleanASTNodeImpl(parent, true, scanner.getTokenOffset()), true);\n            case 9 /* FalseKeyword */:\n                return _finalize(new BooleanASTNodeImpl(parent, false, scanner.getTokenOffset()), true);\n            default:\n                return null;\n        }\n    }\n    function _parseValue(parent, name) {\n        return _parseArray(parent) || _parseObject(parent) || _parseString(parent) || _parseNumber(parent) || _parseLiteral(parent);\n    }\n    var _root = null;\n    var token = _scanNext();\n    if (token !== 17 /* EOF */) {\n        _root = _parseValue(null, null);\n        if (!_root) {\n            _error(localize('Invalid symbol', 'Expected a JSON object, array or literal.'), ErrorCode.Undefined);\n        }\n        else if (scanner.getToken() !== 17 /* EOF */) {\n            _error(localize('End of file expected', 'End of file expected.'), ErrorCode.Undefined);\n        }\n    }\n    return new JSONDocument(_root, problems, comments);\n}\n//# sourceMappingURL=jsonParser.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport function startsWith(haystack, needle) {\n    if (haystack.length < needle.length) {\n        return false;\n    }\n    for (var i = 0; i < needle.length; i++) {\n        if (haystack[i] !== needle[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Determines if haystack ends with needle.\n */\nexport function endsWith(haystack, needle) {\n    var diff = haystack.length - needle.length;\n    if (diff > 0) {\n        return haystack.lastIndexOf(needle) === diff;\n    }\n    else if (diff === 0) {\n        return haystack === needle;\n    }\n    else {\n        return false;\n    }\n}\nexport function convertSimple2RegExpPattern(pattern) {\n    return pattern.replace(/[\\-\\\\\\{\\}\\+\\?\\|\\^\\$\\.\\,\\[\\]\\(\\)\\#\\s]/g, '\\\\$&').replace(/[\\*]/g, '.*');\n}\nexport function repeat(value, count) {\n    var s = '';\n    while (count > 0) {\n        if ((count & 1) === 1) {\n            s += value;\n        }\n        value += value;\n        count = count >>> 1;\n    }\n    return s;\n}\n//# sourceMappingURL=strings.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as Parser from '../parser/jsonParser.js';\nimport * as Json from '../../jsonc-parser/main.js';\nimport { stringifyObject } from '../utils/json.js';\nimport { endsWith } from '../utils/strings.js';\nimport { CompletionItem, CompletionItemKind, Range, TextEdit, InsertTextFormat } from '../../vscode-languageserver-types/main.js';\nimport * as nls from '../../../fillers/vscode-nls.js';\nvar localize = nls.loadMessageBundle();\nvar JSONCompletion = /** @class */ (function () {\n    function JSONCompletion(schemaService, contributions, promiseConstructor) {\n        if (contributions === void 0) { contributions = []; }\n        this.templateVarIdCounter = 0;\n        this.schemaService = schemaService;\n        this.contributions = contributions;\n        this.promise = promiseConstructor || Promise;\n    }\n    JSONCompletion.prototype.doResolve = function (item) {\n        for (var i = this.contributions.length - 1; i >= 0; i--) {\n            if (this.contributions[i].resolveCompletion) {\n                var resolver = this.contributions[i].resolveCompletion(item);\n                if (resolver) {\n                    return resolver;\n                }\n            }\n        }\n        return this.promise.resolve(item);\n    };\n    JSONCompletion.prototype.doComplete = function (document, position, doc) {\n        var _this = this;\n        var result = {\n            items: [],\n            isIncomplete: false\n        };\n        var offset = document.offsetAt(position);\n        var node = doc.getNodeFromOffsetEndInclusive(offset);\n        if (this.isInComment(document, node ? node.offset : 0, offset)) {\n            return Promise.resolve(result);\n        }\n        var currentWord = this.getCurrentWord(document, offset);\n        var overwriteRange = null;\n        if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n            overwriteRange = Range.create(document.positionAt(node.offset), document.positionAt(node.offset + node.length));\n        }\n        else {\n            var overwriteStart = offset - currentWord.length;\n            if (overwriteStart > 0 && document.getText()[overwriteStart - 1] === '\"') {\n                overwriteStart--;\n            }\n            overwriteRange = Range.create(document.positionAt(overwriteStart), position);\n        }\n        var proposed = {};\n        var collector = {\n            add: function (suggestion) {\n                var existing = proposed[suggestion.label];\n                if (!existing) {\n                    proposed[suggestion.label] = suggestion;\n                    if (overwriteRange) {\n                        suggestion.textEdit = TextEdit.replace(overwriteRange, suggestion.insertText);\n                    }\n                    result.items.push(suggestion);\n                }\n                else if (!existing.documentation) {\n                    existing.documentation = suggestion.documentation;\n                }\n            },\n            setAsIncomplete: function () {\n                result.isIncomplete = true;\n            },\n            error: function (message) {\n                console.error(message);\n            },\n            log: function (message) {\n                console.log(message);\n            },\n            getNumberOfProposals: function () {\n                return result.items.length;\n            }\n        };\n        return this.schemaService.getSchemaForResource(document.uri, doc).then(function (schema) {\n            var collectionPromises = [];\n            var addValue = true;\n            var currentKey = '';\n            var currentProperty = null;\n            if (node) {\n                if (node.type === 'string') {\n                    var parent = node.parent;\n                    if (parent && parent.type === 'property' && parent.keyNode === node) {\n                        addValue = !parent.valueNode;\n                        currentProperty = parent;\n                        currentKey = document.getText().substr(node.offset + 1, node.length - 2);\n                        if (parent) {\n                            node = parent.parent;\n                        }\n                    }\n                }\n            }\n            // proposals for properties\n            if (node && node.type === 'object') {\n                // don't suggest keys when the cursor is just before the opening curly brace\n                if (node.offset === offset) {\n                    return result;\n                }\n                // don't suggest properties that are already present\n                var properties = node.properties;\n                properties.forEach(function (p) {\n                    if (!currentProperty || currentProperty !== p) {\n                        proposed[p.keyNode.value] = CompletionItem.create('__');\n                    }\n                });\n                var separatorAfter_1 = '';\n                if (addValue) {\n                    separatorAfter_1 = _this.evaluateSeparatorAfter(document, document.offsetAt(overwriteRange.end));\n                }\n                if (schema) {\n                    // property proposals with schema\n                    _this.getPropertyCompletions(schema, doc, node, addValue, separatorAfter_1, collector);\n                }\n                else {\n                    // property proposals without schema\n                    _this.getSchemaLessPropertyCompletions(doc, node, currentKey, collector);\n                }\n                var location_1 = Parser.getNodePath(node);\n                _this.contributions.forEach(function (contribution) {\n                    var collectPromise = contribution.collectPropertyCompletions(document.uri, location_1, currentWord, addValue, separatorAfter_1 === '', collector);\n                    if (collectPromise) {\n                        collectionPromises.push(collectPromise);\n                    }\n                });\n                if ((!schema && currentWord.length > 0 && document.getText().charAt(offset - currentWord.length - 1) !== '\"')) {\n                    collector.add({\n                        kind: CompletionItemKind.Property,\n                        label: _this.getLabelForValue(currentWord),\n                        insertText: _this.getInsertTextForProperty(currentWord, null, false, separatorAfter_1),\n                        insertTextFormat: InsertTextFormat.Snippet, documentation: ''\n                    });\n                }\n            }\n            // proposals for values\n            var types = {};\n            if (schema) {\n                // value proposals with schema\n                _this.getValueCompletions(schema, doc, node, offset, document, collector, types);\n            }\n            else {\n                // value proposals without schema\n                _this.getSchemaLessValueCompletions(doc, node, offset, document, collector);\n            }\n            if (_this.contributions.length > 0) {\n                _this.getContributedValueCompletions(doc, node, offset, document, collector, collectionPromises);\n            }\n            return _this.promise.all(collectionPromises).then(function () {\n                if (collector.getNumberOfProposals() === 0) {\n                    var offsetForSeparator = offset;\n                    if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n                        offsetForSeparator = node.offset + node.length;\n                    }\n                    var separatorAfter = _this.evaluateSeparatorAfter(document, offsetForSeparator);\n                    _this.addFillerValueCompletions(types, separatorAfter, collector);\n                }\n                return result;\n            });\n        });\n    };\n    JSONCompletion.prototype.getPropertyCompletions = function (schema, doc, node, addValue, separatorAfter, collector) {\n        var _this = this;\n        var matchingSchemas = doc.getMatchingSchemas(schema.schema, node.offset);\n        matchingSchemas.forEach(function (s) {\n            if (s.node === node && !s.inverted) {\n                var schemaProperties_1 = s.schema.properties;\n                if (schemaProperties_1) {\n                    Object.keys(schemaProperties_1).forEach(function (key) {\n                        var propertySchema = schemaProperties_1[key];\n                        if (typeof propertySchema === 'object' && !propertySchema.deprecationMessage && !propertySchema.doNotSuggest) {\n                            var proposal = {\n                                kind: CompletionItemKind.Property,\n                                label: key,\n                                insertText: _this.getInsertTextForProperty(key, propertySchema, addValue, separatorAfter),\n                                insertTextFormat: InsertTextFormat.Snippet,\n                                filterText: _this.getFilterTextForValue(key),\n                                documentation: propertySchema.description || '',\n                            };\n                            if (endsWith(proposal.insertText, \"$1\" + separatorAfter)) {\n                                proposal.command = {\n                                    title: 'Suggest',\n                                    command: 'editor.action.triggerSuggest'\n                                };\n                            }\n                            collector.add(proposal);\n                        }\n                    });\n                }\n            }\n        });\n    };\n    JSONCompletion.prototype.getSchemaLessPropertyCompletions = function (doc, node, currentKey, collector) {\n        var _this = this;\n        var collectCompletionsForSimilarObject = function (obj) {\n            obj.properties.forEach(function (p) {\n                var key = p.keyNode.value;\n                collector.add({\n                    kind: CompletionItemKind.Property,\n                    label: key,\n                    insertText: _this.getInsertTextForValue(key, ''),\n                    insertTextFormat: InsertTextFormat.Snippet,\n                    filterText: _this.getFilterTextForValue(key),\n                    documentation: ''\n                });\n            });\n        };\n        if (node.parent) {\n            if (node.parent.type === 'property') {\n                // if the object is a property value, check the tree for other objects that hang under a property of the same name\n                var parentKey_1 = node.parent.keyNode.value;\n                doc.visit(function (n) {\n                    if (n.type === 'property' && n !== node.parent && n.keyNode.value === parentKey_1 && n.valueNode && n.valueNode.type === 'object') {\n                        collectCompletionsForSimilarObject(n.valueNode);\n                    }\n                    return true;\n                });\n            }\n            else if (node.parent.type === 'array') {\n                // if the object is in an array, use all other array elements as similar objects\n                node.parent.items.forEach(function (n) {\n                    if (n.type === 'object' && n !== node) {\n                        collectCompletionsForSimilarObject(n);\n                    }\n                });\n            }\n        }\n        else if (node.type === 'object') {\n            collector.add({\n                kind: CompletionItemKind.Property,\n                label: '$schema',\n                insertText: this.getInsertTextForProperty('$schema', null, true, ''),\n                insertTextFormat: InsertTextFormat.Snippet, documentation: '',\n                filterText: this.getFilterTextForValue(\"$schema\")\n            });\n        }\n    };\n    JSONCompletion.prototype.getSchemaLessValueCompletions = function (doc, node, offset, document, collector) {\n        var _this = this;\n        var offsetForSeparator = offset;\n        if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n            offsetForSeparator = node.offset + node.length;\n            node = node.parent;\n        }\n        if (!node) {\n            collector.add({\n                kind: this.getSuggestionKind('object'),\n                label: 'Empty object',\n                insertText: this.getInsertTextForValue({}, ''),\n                insertTextFormat: InsertTextFormat.Snippet,\n                documentation: ''\n            });\n            collector.add({\n                kind: this.getSuggestionKind('array'),\n                label: 'Empty array',\n                insertText: this.getInsertTextForValue([], ''),\n                insertTextFormat: InsertTextFormat.Snippet,\n                documentation: ''\n            });\n            return;\n        }\n        var separatorAfter = this.evaluateSeparatorAfter(document, offsetForSeparator);\n        var collectSuggestionsForValues = function (value) {\n            if (!Parser.contains(value.parent, offset, true)) {\n                collector.add({\n                    kind: _this.getSuggestionKind(value.type),\n                    label: _this.getLabelTextForMatchingNode(value, document),\n                    insertText: _this.getInsertTextForMatchingNode(value, document, separatorAfter),\n                    insertTextFormat: InsertTextFormat.Snippet, documentation: ''\n                });\n            }\n            if (value.type === 'boolean') {\n                _this.addBooleanValueCompletion(!value.value, separatorAfter, collector);\n            }\n        };\n        if (node.type === 'property') {\n            if (offset > node.colonOffset) {\n                var valueNode = node.valueNode;\n                if (valueNode && (offset > (valueNode.offset + valueNode.length) || valueNode.type === 'object' || valueNode.type === 'array')) {\n                    return;\n                }\n                // suggest values at the same key\n                var parentKey_2 = node.keyNode.value;\n                doc.visit(function (n) {\n                    if (n.type === 'property' && n.keyNode.value === parentKey_2 && n.valueNode) {\n                        collectSuggestionsForValues(n.valueNode);\n                    }\n                    return true;\n                });\n                if (parentKey_2 === '$schema' && node.parent && !node.parent.parent) {\n                    this.addDollarSchemaCompletions(separatorAfter, collector);\n                }\n            }\n        }\n        if (node.type === 'array') {\n            if (node.parent && node.parent.type === 'property') {\n                // suggest items of an array at the same key\n                var parentKey_3 = node.parent.keyNode.value;\n                doc.visit(function (n) {\n                    var p = n;\n                    if (n.type === 'property' && p.keyNode.value === parentKey_3 && p.valueNode && p.valueNode.type === 'array') {\n                        p.valueNode.items.forEach(collectSuggestionsForValues);\n                    }\n                    return true;\n                });\n            }\n            else {\n                // suggest items in the same array\n                node.items.forEach(collectSuggestionsForValues);\n            }\n        }\n    };\n    JSONCompletion.prototype.getValueCompletions = function (schema, doc, node, offset, document, collector, types) {\n        var _this = this;\n        var offsetForSeparator = offset;\n        var parentKey = null;\n        var valueNode = null;\n        if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n            offsetForSeparator = node.offset + node.length;\n            valueNode = node;\n            node = node.parent;\n        }\n        if (!node) {\n            this.addSchemaValueCompletions(schema.schema, '', collector, types);\n            return;\n        }\n        if ((node.type === 'property') && offset > node.colonOffset) {\n            var valueNode_1 = node.valueNode;\n            if (valueNode_1 && offset > (valueNode_1.offset + valueNode_1.length)) {\n                return; // we are past the value node\n            }\n            parentKey = node.keyNode.value;\n            node = node.parent;\n        }\n        if (node && (parentKey !== null || node.type === 'array')) {\n            var separatorAfter_2 = this.evaluateSeparatorAfter(document, offsetForSeparator);\n            var matchingSchemas = doc.getMatchingSchemas(schema.schema, node.offset, valueNode);\n            matchingSchemas.forEach(function (s) {\n                if (s.node === node && !s.inverted && s.schema) {\n                    if (node.type === 'array' && s.schema.items) {\n                        if (Array.isArray(s.schema.items)) {\n                            var index = _this.findItemAtOffset(node, document, offset);\n                            if (index < s.schema.items.length) {\n                                _this.addSchemaValueCompletions(s.schema.items[index], separatorAfter_2, collector, types);\n                            }\n                        }\n                        else {\n                            _this.addSchemaValueCompletions(s.schema.items, separatorAfter_2, collector, types);\n                        }\n                    }\n                    if (s.schema.properties) {\n                        var propertySchema = s.schema.properties[parentKey];\n                        if (propertySchema) {\n                            _this.addSchemaValueCompletions(propertySchema, separatorAfter_2, collector, types);\n                        }\n                    }\n                }\n            });\n            if (parentKey === '$schema' && !node.parent) {\n                this.addDollarSchemaCompletions(separatorAfter_2, collector);\n            }\n            if (types['boolean']) {\n                this.addBooleanValueCompletion(true, separatorAfter_2, collector);\n                this.addBooleanValueCompletion(false, separatorAfter_2, collector);\n            }\n            if (types['null']) {\n                this.addNullValueCompletion(separatorAfter_2, collector);\n            }\n        }\n    };\n    JSONCompletion.prototype.getContributedValueCompletions = function (doc, node, offset, document, collector, collectionPromises) {\n        if (!node) {\n            this.contributions.forEach(function (contribution) {\n                var collectPromise = contribution.collectDefaultCompletions(document.uri, collector);\n                if (collectPromise) {\n                    collectionPromises.push(collectPromise);\n                }\n            });\n        }\n        else {\n            if (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null') {\n                node = node.parent;\n            }\n            if ((node.type === 'property') && offset > node.colonOffset) {\n                var parentKey_4 = node.keyNode.value;\n                var valueNode = node.valueNode;\n                if (!valueNode || offset <= (valueNode.offset + valueNode.length)) {\n                    var location_2 = Parser.getNodePath(node.parent);\n                    this.contributions.forEach(function (contribution) {\n                        var collectPromise = contribution.collectValueCompletions(document.uri, location_2, parentKey_4, collector);\n                        if (collectPromise) {\n                            collectionPromises.push(collectPromise);\n                        }\n                    });\n                }\n            }\n        }\n    };\n    JSONCompletion.prototype.addSchemaValueCompletions = function (schema, separatorAfter, collector, types) {\n        var _this = this;\n        if (typeof schema === 'object') {\n            this.addEnumValueCompletions(schema, separatorAfter, collector);\n            this.addDefaultValueCompletions(schema, separatorAfter, collector);\n            this.collectTypes(schema, types);\n            if (Array.isArray(schema.allOf)) {\n                schema.allOf.forEach(function (s) { return _this.addSchemaValueCompletions(s, separatorAfter, collector, types); });\n            }\n            if (Array.isArray(schema.anyOf)) {\n                schema.anyOf.forEach(function (s) { return _this.addSchemaValueCompletions(s, separatorAfter, collector, types); });\n            }\n            if (Array.isArray(schema.oneOf)) {\n                schema.oneOf.forEach(function (s) { return _this.addSchemaValueCompletions(s, separatorAfter, collector, types); });\n            }\n        }\n    };\n    JSONCompletion.prototype.addDefaultValueCompletions = function (schema, separatorAfter, collector, arrayDepth) {\n        var _this = this;\n        if (arrayDepth === void 0) { arrayDepth = 0; }\n        var hasProposals = false;\n        if (schema.default) {\n            var type = schema.type;\n            var value = schema.default;\n            for (var i = arrayDepth; i > 0; i--) {\n                value = [value];\n                type = 'array';\n            }\n            collector.add({\n                kind: this.getSuggestionKind(type),\n                label: this.getLabelForValue(value),\n                insertText: this.getInsertTextForValue(value, separatorAfter),\n                insertTextFormat: InsertTextFormat.Snippet,\n                detail: localize('json.suggest.default', 'Default value'),\n            });\n            hasProposals = true;\n        }\n        if (Array.isArray(schema.defaultSnippets)) {\n            schema.defaultSnippets.forEach(function (s) {\n                var type = schema.type;\n                var value = s.body;\n                var label = s.label;\n                var insertText;\n                var filterText;\n                if (typeof value !== 'undefined') {\n                    var type_1 = schema.type;\n                    for (var i = arrayDepth; i > 0; i--) {\n                        value = [value];\n                        type_1 = 'array';\n                    }\n                    insertText = _this.getInsertTextForSnippetValue(value, separatorAfter);\n                    filterText = _this.getFilterTextForSnippetValue(value);\n                    label = label || _this.getLabelForSnippetValue(value);\n                }\n                else if (typeof s.bodyText === 'string') {\n                    var prefix = '', suffix = '', indent = '';\n                    for (var i = arrayDepth; i > 0; i--) {\n                        prefix = prefix + indent + '[\\n';\n                        suffix = suffix + '\\n' + indent + ']';\n                        indent += '\\t';\n                        type = 'array';\n                    }\n                    insertText = prefix + indent + s.bodyText.split('\\n').join('\\n' + indent) + suffix + separatorAfter;\n                    label = label || insertText;\n                    filterText = insertText.replace(/[\\n]/g, ''); // remove new lines\n                }\n                collector.add({\n                    kind: _this.getSuggestionKind(type),\n                    label: label,\n                    documentation: s.description,\n                    insertText: insertText,\n                    insertTextFormat: InsertTextFormat.Snippet,\n                    filterText: filterText\n                });\n                hasProposals = true;\n            });\n        }\n        if (!hasProposals && typeof schema.items === 'object' && !Array.isArray(schema.items)) {\n            this.addDefaultValueCompletions(schema.items, separatorAfter, collector, arrayDepth + 1);\n        }\n    };\n    JSONCompletion.prototype.addEnumValueCompletions = function (schema, separatorAfter, collector) {\n        if (Array.isArray(schema.enum)) {\n            for (var i = 0, length = schema.enum.length; i < length; i++) {\n                var enm = schema.enum[i];\n                var documentation = schema.description;\n                if (schema.enumDescriptions && i < schema.enumDescriptions.length) {\n                    documentation = schema.enumDescriptions[i];\n                }\n                collector.add({\n                    kind: this.getSuggestionKind(schema.type),\n                    label: this.getLabelForValue(enm),\n                    insertText: this.getInsertTextForValue(enm, separatorAfter),\n                    insertTextFormat: InsertTextFormat.Snippet,\n                    documentation: documentation\n                });\n            }\n        }\n    };\n    JSONCompletion.prototype.collectTypes = function (schema, types) {\n        if (Array.isArray(schema.enum)) {\n            return;\n        }\n        var type = schema.type;\n        if (Array.isArray(type)) {\n            type.forEach(function (t) { return types[t] = true; });\n        }\n        else {\n            types[type] = true;\n        }\n    };\n    JSONCompletion.prototype.addFillerValueCompletions = function (types, separatorAfter, collector) {\n        if (types['object']) {\n            collector.add({\n                kind: this.getSuggestionKind('object'),\n                label: '{}',\n                insertText: this.getInsertTextForGuessedValue({}, separatorAfter),\n                insertTextFormat: InsertTextFormat.Snippet,\n                detail: localize('defaults.object', 'New object'),\n                documentation: ''\n            });\n        }\n        if (types['array']) {\n            collector.add({\n                kind: this.getSuggestionKind('array'),\n                label: '[]',\n                insertText: this.getInsertTextForGuessedValue([], separatorAfter),\n                insertTextFormat: InsertTextFormat.Snippet,\n                detail: localize('defaults.array', 'New array'),\n                documentation: ''\n            });\n        }\n    };\n    JSONCompletion.prototype.addBooleanValueCompletion = function (value, separatorAfter, collector) {\n        collector.add({\n            kind: this.getSuggestionKind('boolean'),\n            label: value ? 'true' : 'false',\n            insertText: this.getInsertTextForValue(value, separatorAfter),\n            insertTextFormat: InsertTextFormat.Snippet,\n            documentation: ''\n        });\n    };\n    JSONCompletion.prototype.addNullValueCompletion = function (separatorAfter, collector) {\n        collector.add({\n            kind: this.getSuggestionKind('null'),\n            label: 'null',\n            insertText: 'null' + separatorAfter,\n            insertTextFormat: InsertTextFormat.Snippet,\n            documentation: ''\n        });\n    };\n    JSONCompletion.prototype.addDollarSchemaCompletions = function (separatorAfter, collector) {\n        var _this = this;\n        var schemaIds = this.schemaService.getRegisteredSchemaIds(function (schema) { return schema === 'http' || schema === 'https'; });\n        schemaIds.forEach(function (schemaId) { return collector.add({\n            kind: CompletionItemKind.Module,\n            label: _this.getLabelForValue(schemaId),\n            filterText: _this.getFilterTextForValue(schemaId),\n            insertText: _this.getInsertTextForValue(schemaId, separatorAfter),\n            insertTextFormat: InsertTextFormat.Snippet, documentation: ''\n        }); });\n    };\n    JSONCompletion.prototype.getLabelForValue = function (value) {\n        var label = JSON.stringify(value);\n        if (label.length > 57) {\n            return label.substr(0, 57).trim() + '...';\n        }\n        return label;\n    };\n    JSONCompletion.prototype.getFilterTextForValue = function (value) {\n        return JSON.stringify(value);\n    };\n    JSONCompletion.prototype.getFilterTextForSnippetValue = function (value) {\n        return JSON.stringify(value).replace(/\\$\\{\\d+:([^}]+)\\}|\\$\\d+/g, '$1');\n    };\n    JSONCompletion.prototype.getLabelForSnippetValue = function (value) {\n        var label = JSON.stringify(value);\n        label = label.replace(/\\$\\{\\d+:([^}]+)\\}|\\$\\d+/g, '$1');\n        if (label.length > 57) {\n            return label.substr(0, 57).trim() + '...';\n        }\n        return label;\n    };\n    JSONCompletion.prototype.getInsertTextForPlainText = function (text) {\n        return text.replace(/[\\\\\\$\\}]/g, '\\\\$&'); // escape $, \\ and } \n    };\n    JSONCompletion.prototype.getInsertTextForValue = function (value, separatorAfter) {\n        var text = JSON.stringify(value, null, '\\t');\n        if (text === '{}') {\n            return '{\\n\\t$1\\n}' + separatorAfter;\n        }\n        else if (text === '[]') {\n            return '[\\n\\t$1\\n]' + separatorAfter;\n        }\n        return this.getInsertTextForPlainText(text + separatorAfter);\n    };\n    JSONCompletion.prototype.getInsertTextForSnippetValue = function (value, separatorAfter) {\n        var replacer = function (value) {\n            if (typeof value === 'string') {\n                if (value[0] === '^') {\n                    return value.substr(1);\n                }\n            }\n            return JSON.stringify(value);\n        };\n        return stringifyObject(value, '', replacer) + separatorAfter;\n    };\n    JSONCompletion.prototype.getInsertTextForGuessedValue = function (value, separatorAfter) {\n        switch (typeof value) {\n            case 'object':\n                if (value === null) {\n                    return '${1:null}' + separatorAfter;\n                }\n                return this.getInsertTextForValue(value, separatorAfter);\n            case 'string':\n                var snippetValue = JSON.stringify(value);\n                snippetValue = snippetValue.substr(1, snippetValue.length - 2); // remove quotes\n                snippetValue = this.getInsertTextForPlainText(snippetValue); // escape \\ and }\n                return '\"${1:' + snippetValue + '}\"' + separatorAfter;\n            case 'number':\n            case 'boolean':\n                return '${1:' + JSON.stringify(value) + '}' + separatorAfter;\n        }\n        return this.getInsertTextForValue(value, separatorAfter);\n    };\n    JSONCompletion.prototype.getSuggestionKind = function (type) {\n        if (Array.isArray(type)) {\n            var array = type;\n            type = array.length > 0 ? array[0] : null;\n        }\n        if (!type) {\n            return CompletionItemKind.Value;\n        }\n        switch (type) {\n            case 'string': return CompletionItemKind.Value;\n            case 'object': return CompletionItemKind.Module;\n            case 'property': return CompletionItemKind.Property;\n            default: return CompletionItemKind.Value;\n        }\n    };\n    JSONCompletion.prototype.getLabelTextForMatchingNode = function (node, document) {\n        switch (node.type) {\n            case 'array':\n                return '[]';\n            case 'object':\n                return '{}';\n            default:\n                var content = document.getText().substr(node.offset, node.length);\n                return content;\n        }\n    };\n    JSONCompletion.prototype.getInsertTextForMatchingNode = function (node, document, separatorAfter) {\n        switch (node.type) {\n            case 'array':\n                return this.getInsertTextForValue([], separatorAfter);\n            case 'object':\n                return this.getInsertTextForValue({}, separatorAfter);\n            default:\n                var content = document.getText().substr(node.offset, node.length) + separatorAfter;\n                return this.getInsertTextForPlainText(content);\n        }\n    };\n    JSONCompletion.prototype.getInsertTextForProperty = function (key, propertySchema, addValue, separatorAfter) {\n        var propertyText = this.getInsertTextForValue(key, '');\n        if (!addValue) {\n            return propertyText;\n        }\n        var resultText = propertyText + ': ';\n        var value;\n        var nValueProposals = 0;\n        if (propertySchema) {\n            if (Array.isArray(propertySchema.defaultSnippets)) {\n                if (propertySchema.defaultSnippets.length === 1) {\n                    var body = propertySchema.defaultSnippets[0].body;\n                    if (typeof body !== 'undefined') {\n                        value = this.getInsertTextForSnippetValue(body, '');\n                    }\n                }\n                nValueProposals += propertySchema.defaultSnippets.length;\n            }\n            if (propertySchema.enum) {\n                if (!value && propertySchema.enum.length === 1) {\n                    value = this.getInsertTextForGuessedValue(propertySchema.enum[0], '');\n                }\n                nValueProposals += propertySchema.enum.length;\n            }\n            if (typeof propertySchema.default !== 'undefined') {\n                if (!value) {\n                    value = this.getInsertTextForGuessedValue(propertySchema.default, '');\n                }\n                nValueProposals++;\n            }\n            if (nValueProposals === 0) {\n                var type = Array.isArray(propertySchema.type) ? propertySchema.type[0] : propertySchema.type;\n                if (!type) {\n                    if (propertySchema.properties) {\n                        type = 'object';\n                    }\n                    else if (propertySchema.items) {\n                        type = 'array';\n                    }\n                }\n                switch (type) {\n                    case 'boolean':\n                        value = '$1';\n                        break;\n                    case 'string':\n                        value = '\"$1\"';\n                        break;\n                    case 'object':\n                        value = '{\\n\\t$1\\n}';\n                        break;\n                    case 'array':\n                        value = '[\\n\\t$1\\n]';\n                        break;\n                    case 'number':\n                    case 'integer':\n                        value = '${1:0}';\n                        break;\n                    case 'null':\n                        value = '${1:null}';\n                        break;\n                    default:\n                        return propertyText;\n                }\n            }\n        }\n        if (!value || nValueProposals > 1) {\n            value = '$1';\n        }\n        return resultText + value + separatorAfter;\n    };\n    JSONCompletion.prototype.getCurrentWord = function (document, offset) {\n        var i = offset - 1;\n        var text = document.getText();\n        while (i >= 0 && ' \\t\\n\\r\\v\":{[,]}'.indexOf(text.charAt(i)) === -1) {\n            i--;\n        }\n        return text.substring(i + 1, offset);\n    };\n    JSONCompletion.prototype.evaluateSeparatorAfter = function (document, offset) {\n        var scanner = Json.createScanner(document.getText(), true);\n        scanner.setPosition(offset);\n        var token = scanner.scan();\n        switch (token) {\n            case 5 /* CommaToken */:\n            case 2 /* CloseBraceToken */:\n            case 4 /* CloseBracketToken */:\n            case 17 /* EOF */:\n                return '';\n            default:\n                return ',';\n        }\n    };\n    JSONCompletion.prototype.findItemAtOffset = function (node, document, offset) {\n        var scanner = Json.createScanner(document.getText(), true);\n        var children = node.items;\n        for (var i = children.length - 1; i >= 0; i--) {\n            var child = children[i];\n            if (offset > child.offset + child.length) {\n                scanner.setPosition(child.offset + child.length);\n                var token = scanner.scan();\n                if (token === 5 /* CommaToken */ && offset >= scanner.getTokenOffset() + scanner.getTokenLength()) {\n                    return i + 1;\n                }\n                return i;\n            }\n            else if (offset >= child.offset) {\n                return i;\n            }\n        }\n        return 0;\n    };\n    JSONCompletion.prototype.isInComment = function (document, start, offset) {\n        var scanner = Json.createScanner(document.getText(), false);\n        scanner.setPosition(start);\n        var token = scanner.scan();\n        while (token !== 17 /* EOF */ && (scanner.getTokenOffset() + scanner.getTokenLength() < offset)) {\n            token = scanner.scan();\n        }\n        return (token === 12 /* LineCommentTrivia */ || token === 13 /* BlockCommentTrivia */) && scanner.getTokenOffset() <= offset;\n    };\n    return JSONCompletion;\n}());\nexport { JSONCompletion };\n//# sourceMappingURL=jsonCompletion.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport function stringifyObject(obj, indent, stringifyLiteral) {\n    if (obj !== null && typeof obj === 'object') {\n        var newIndent = indent + '\\t';\n        if (Array.isArray(obj)) {\n            if (obj.length === 0) {\n                return '[]';\n            }\n            var result = '[\\n';\n            for (var i = 0; i < obj.length; i++) {\n                result += newIndent + stringifyObject(obj[i], newIndent, stringifyLiteral);\n                if (i < obj.length - 1) {\n                    result += ',';\n                }\n                result += '\\n';\n            }\n            result += indent + ']';\n            return result;\n        }\n        else {\n            var keys = Object.keys(obj);\n            if (keys.length === 0) {\n                return '{}';\n            }\n            var result = '{\\n';\n            for (var i = 0; i < keys.length; i++) {\n                var key = keys[i];\n                result += newIndent + JSON.stringify(key) + ': ' + stringifyObject(obj[key], newIndent, stringifyLiteral);\n                if (i < keys.length - 1) {\n                    result += ',';\n                }\n                result += '\\n';\n            }\n            result += indent + '}';\n            return result;\n        }\n    }\n    return stringifyLiteral(obj);\n}\n//# sourceMappingURL=json.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as Parser from '../parser/jsonParser.js';\nimport { Range } from '../../vscode-languageserver-types/main.js';\nvar JSONHover = /** @class */ (function () {\n    function JSONHover(schemaService, contributions, promiseConstructor) {\n        if (contributions === void 0) { contributions = []; }\n        this.schemaService = schemaService;\n        this.contributions = contributions;\n        this.promise = promiseConstructor || Promise;\n    }\n    JSONHover.prototype.doHover = function (document, position, doc) {\n        var offset = document.offsetAt(position);\n        var node = doc.getNodeFromOffset(offset);\n        if (!node || (node.type === 'object' || node.type === 'array') && offset > node.offset + 1 && offset < node.offset + node.length - 1) {\n            return this.promise.resolve(null);\n        }\n        var hoverRangeNode = node;\n        // use the property description when hovering over an object key\n        if (node.type === 'string') {\n            var parent = node.parent;\n            if (parent.type === 'property' && parent.keyNode === node) {\n                node = parent.valueNode;\n                if (!node) {\n                    return this.promise.resolve(null);\n                }\n            }\n        }\n        var hoverRange = Range.create(document.positionAt(hoverRangeNode.offset), document.positionAt(hoverRangeNode.offset + hoverRangeNode.length));\n        var createHover = function (contents) {\n            var result = {\n                contents: contents,\n                range: hoverRange\n            };\n            return result;\n        };\n        var location = Parser.getNodePath(node);\n        for (var i = this.contributions.length - 1; i >= 0; i--) {\n            var contribution = this.contributions[i];\n            var promise = contribution.getInfoContribution(document.uri, location);\n            if (promise) {\n                return promise.then(function (htmlContent) { return createHover(htmlContent); });\n            }\n        }\n        return this.schemaService.getSchemaForResource(document.uri, doc).then(function (schema) {\n            if (schema) {\n                var matchingSchemas = doc.getMatchingSchemas(schema.schema, node.offset);\n                var title_1 = null;\n                var markdownDescription_1 = null;\n                var markdownEnumValueDescription_1 = null, enumValue_1 = null;\n                matchingSchemas.every(function (s) {\n                    if (s.node === node && !s.inverted && s.schema) {\n                        title_1 = title_1 || s.schema.title;\n                        markdownDescription_1 = markdownDescription_1 || s.schema.markdownDescription || toMarkdown(s.schema.description);\n                        if (s.schema.enum) {\n                            var idx = s.schema.enum.indexOf(Parser.getNodeValue(node));\n                            if (s.schema.markdownEnumDescriptions) {\n                                markdownEnumValueDescription_1 = s.schema.markdownEnumDescriptions[idx];\n                            }\n                            else if (s.schema.enumDescriptions) {\n                                markdownEnumValueDescription_1 = toMarkdown(s.schema.enumDescriptions[idx]);\n                            }\n                            if (markdownEnumValueDescription_1) {\n                                enumValue_1 = s.schema.enum[idx];\n                                if (typeof enumValue_1 !== 'string') {\n                                    enumValue_1 = JSON.stringify(enumValue_1);\n                                }\n                            }\n                        }\n                    }\n                    return true;\n                });\n                var result = '';\n                if (title_1) {\n                    result = toMarkdown(title_1);\n                }\n                if (markdownDescription_1) {\n                    if (result.length > 0) {\n                        result += \"\\n\\n\";\n                    }\n                    result += markdownDescription_1;\n                }\n                if (markdownEnumValueDescription_1) {\n                    if (result.length > 0) {\n                        result += \"\\n\\n\";\n                    }\n                    result += \"`\" + toMarkdown(enumValue_1) + \"`: \" + markdownEnumValueDescription_1;\n                }\n                return createHover([result]);\n            }\n            return null;\n        });\n    };\n    return JSONHover;\n}());\nexport { JSONHover };\nfunction toMarkdown(plain) {\n    if (plain) {\n        var res = plain.replace(/([^\\n\\r])(\\r?\\n)([^\\n\\r])/gm, '$1\\n\\n$3'); // single new lines to \\n\\n (Markdown paragraph)\n        return res.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    return void 0;\n}\n//# sourceMappingURL=jsonHover.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { ProblemSeverity, ErrorCode } from '../parser/jsonParser.js';\nimport { DiagnosticSeverity } from '../../vscode-languageserver-types/main.js';\nimport * as nls from '../../../fillers/vscode-nls.js';\nvar localize = nls.loadMessageBundle();\nvar JSONValidation = /** @class */ (function () {\n    function JSONValidation(jsonSchemaService, promiseConstructor) {\n        this.jsonSchemaService = jsonSchemaService;\n        this.promise = promiseConstructor;\n        this.validationEnabled = true;\n    }\n    JSONValidation.prototype.configure = function (raw) {\n        if (raw) {\n            this.validationEnabled = raw.validate;\n            this.commentSeverity = raw.allowComments ? ProblemSeverity.Ignore : ProblemSeverity.Error;\n        }\n    };\n    JSONValidation.prototype.doValidation = function (textDocument, jsonDocument, documentSettings) {\n        var _this = this;\n        if (!this.validationEnabled) {\n            return this.promise.resolve([]);\n        }\n        var diagnostics = [];\n        var added = {};\n        var addProblem = function (problem) {\n            if (problem.severity === ProblemSeverity.Ignore) {\n                return;\n            }\n            // remove duplicated messages\n            var signature = problem.location.offset + ' ' + problem.location.length + ' ' + problem.message;\n            if (!added[signature]) {\n                added[signature] = true;\n                var range = {\n                    start: textDocument.positionAt(problem.location.offset),\n                    end: textDocument.positionAt(problem.location.offset + problem.location.length)\n                };\n                var severity = problem.severity === ProblemSeverity.Error ? DiagnosticSeverity.Error : DiagnosticSeverity.Warning;\n                diagnostics.push({ severity: severity, range: range, message: problem.message });\n            }\n        };\n        return this.jsonSchemaService.getSchemaForResource(textDocument.uri, jsonDocument).then(function (schema) {\n            var trailingCommaSeverity = documentSettings ? documentSettings.trailingCommas : ProblemSeverity.Error;\n            var commentSeverity = documentSettings ? documentSettings.comments : _this.commentSeverity;\n            if (schema) {\n                if (schema.errors.length && jsonDocument.root) {\n                    var astRoot = jsonDocument.root;\n                    var property = astRoot.type === 'object' ? astRoot.properties[0] : null;\n                    if (property && property.keyNode.value === '$schema') {\n                        var node = property.valueNode || property;\n                        addProblem({ location: { offset: node.offset, length: node.length }, message: schema.errors[0], severity: ProblemSeverity.Warning });\n                    }\n                    else {\n                        addProblem({ location: { offset: astRoot.offset, length: 1 }, message: schema.errors[0], severity: ProblemSeverity.Warning });\n                    }\n                }\n                else {\n                    var semanticErrors = jsonDocument.validate(schema.schema);\n                    if (semanticErrors) {\n                        semanticErrors.forEach(addProblem);\n                    }\n                }\n                if (schemaAllowsComments(schema.schema)) {\n                    trailingCommaSeverity = commentSeverity = ProblemSeverity.Ignore;\n                }\n            }\n            jsonDocument.syntaxErrors.forEach(function (p) {\n                if (p.code === ErrorCode.TrailingComma) {\n                    p.severity = trailingCommaSeverity;\n                }\n                addProblem(p);\n            });\n            diagnostics.push.apply(diagnostics, jsonDocument.externalDiagnostic);\n            if (commentSeverity !== ProblemSeverity.Ignore) {\n                var message_1 = localize('InvalidCommentToken', 'Comments are not permitted in JSON.');\n                jsonDocument.comments.forEach(function (c) {\n                    addProblem({ location: c, severity: commentSeverity, message: message_1 });\n                });\n            }\n            return diagnostics;\n        });\n    };\n    return JSONValidation;\n}());\nexport { JSONValidation };\nfunction schemaAllowsComments(schemaRef) {\n    if (schemaRef && typeof schemaRef === 'object') {\n        if (schemaRef.allowComments) {\n            return true;\n        }\n        if (schemaRef.allOf) {\n            return schemaRef.allOf.some(schemaAllowsComments);\n        }\n    }\n    return false;\n}\n//# sourceMappingURL=jsonValidation.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nvar Digit0 = 48;\nvar Digit9 = 57;\nvar A = 65;\nvar F = 70;\nvar a = 97;\nvar f = 102;\nexport function hexDigit(charCode) {\n    if (charCode < Digit0) {\n        return 0;\n    }\n    if (charCode <= Digit9) {\n        return charCode - Digit0;\n    }\n    if (charCode < a) {\n        charCode += (a - A);\n    }\n    if (charCode >= a && charCode <= f) {\n        return charCode - a + 10;\n    }\n    return 0;\n}\nexport function colorFromHex(text) {\n    if (text[0] !== '#') {\n        return null;\n    }\n    switch (text.length) {\n        case 4:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x11) / 255.0,\n                green: (hexDigit(text.charCodeAt(2)) * 0x11) / 255.0,\n                blue: (hexDigit(text.charCodeAt(3)) * 0x11) / 255.0,\n                alpha: 1\n            };\n        case 5:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x11) / 255.0,\n                green: (hexDigit(text.charCodeAt(2)) * 0x11) / 255.0,\n                blue: (hexDigit(text.charCodeAt(3)) * 0x11) / 255.0,\n                alpha: (hexDigit(text.charCodeAt(4)) * 0x11) / 255.0,\n            };\n        case 7:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,\n                green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,\n                blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,\n                alpha: 1\n            };\n        case 9:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,\n                green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,\n                blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,\n                alpha: (hexDigit(text.charCodeAt(7)) * 0x10 + hexDigit(text.charCodeAt(8))) / 255.0\n            };\n    }\n    return null;\n}\nexport function colorFrom256RGB(red, green, blue, alpha) {\n    if (alpha === void 0) { alpha = 1.0; }\n    return {\n        red: red / 255.0,\n        green: green / 255.0,\n        blue: blue / 255.0,\n        alpha: alpha\n    };\n}\n//# sourceMappingURL=colors.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as Parser from '../parser/jsonParser.js';\nimport * as Strings from '../utils/strings.js';\nimport { colorFromHex } from '../utils/colors.js';\nimport { SymbolKind, Range, Location, TextEdit } from '../../vscode-languageserver-types/main.js';\nvar JSONDocumentSymbols = /** @class */ (function () {\n    function JSONDocumentSymbols(schemaService) {\n        this.schemaService = schemaService;\n    }\n    JSONDocumentSymbols.prototype.findDocumentSymbols = function (document, doc) {\n        var _this = this;\n        var root = doc.root;\n        if (!root) {\n            return null;\n        }\n        // special handling for key bindings\n        var resourceString = document.uri;\n        if ((resourceString === 'vscode://defaultsettings/keybindings.json') || Strings.endsWith(resourceString.toLowerCase(), '/user/keybindings.json')) {\n            if (root.type === 'array') {\n                var result_1 = [];\n                root.items.forEach(function (item) {\n                    if (item.type === 'object') {\n                        for (var _i = 0, _a = item.properties; _i < _a.length; _i++) {\n                            var property = _a[_i];\n                            if (property.keyNode.value === 'key') {\n                                if (property.valueNode) {\n                                    var location = Location.create(document.uri, Range.create(document.positionAt(item.offset), document.positionAt(item.offset + item.length)));\n                                    result_1.push({ name: Parser.getNodeValue(property.valueNode), kind: SymbolKind.Function, location: location });\n                                }\n                                return;\n                            }\n                        }\n                    }\n                });\n                return result_1;\n            }\n        }\n        var collectOutlineEntries = function (result, node, containerName) {\n            if (node.type === 'array') {\n                node.items.forEach(function (node) { return collectOutlineEntries(result, node, containerName); });\n            }\n            else if (node.type === 'object') {\n                node.properties.forEach(function (property) {\n                    var location = Location.create(document.uri, Range.create(document.positionAt(property.offset), document.positionAt(property.offset + property.length)));\n                    var valueNode = property.valueNode;\n                    if (valueNode) {\n                        var childContainerName = containerName ? containerName + '.' + property.keyNode.value : property.keyNode.value;\n                        result.push({ name: property.keyNode.value, kind: _this.getSymbolKind(valueNode.type), location: location, containerName: containerName });\n                        collectOutlineEntries(result, valueNode, childContainerName);\n                    }\n                });\n            }\n            return result;\n        };\n        var result = collectOutlineEntries([], root, void 0);\n        return result;\n    };\n    JSONDocumentSymbols.prototype.getSymbolKind = function (nodeType) {\n        switch (nodeType) {\n            case 'object':\n                return SymbolKind.Module;\n            case 'string':\n                return SymbolKind.String;\n            case 'number':\n                return SymbolKind.Number;\n            case 'array':\n                return SymbolKind.Array;\n            case 'boolean':\n                return SymbolKind.Boolean;\n            default:// 'null'\n                return SymbolKind.Variable;\n        }\n    };\n    JSONDocumentSymbols.prototype.findDocumentColors = function (document, doc) {\n        return this.schemaService.getSchemaForResource(document.uri, doc).then(function (schema) {\n            var result = [];\n            if (schema) {\n                var matchingSchemas = doc.getMatchingSchemas(schema.schema);\n                var visitedNode = {};\n                for (var _i = 0, matchingSchemas_1 = matchingSchemas; _i < matchingSchemas_1.length; _i++) {\n                    var s = matchingSchemas_1[_i];\n                    if (!s.inverted && s.schema && (s.schema.format === 'color' || s.schema.format === 'color-hex') && s.node && s.node.type === 'string') {\n                        var nodeId = String(s.node.offset);\n                        if (!visitedNode[nodeId]) {\n                            var color = colorFromHex(Parser.getNodeValue(s.node));\n                            if (color) {\n                                var range = Range.create(document.positionAt(s.node.offset), document.positionAt(s.node.offset + s.node.length));\n                                result.push({ color: color, range: range });\n                            }\n                            visitedNode[nodeId] = true;\n                        }\n                    }\n                }\n            }\n            return result;\n        });\n    };\n    JSONDocumentSymbols.prototype.getColorPresentations = function (document, doc, color, range) {\n        var result = [];\n        var red256 = Math.round(color.red * 255), green256 = Math.round(color.green * 255), blue256 = Math.round(color.blue * 255);\n        function toTwoDigitHex(n) {\n            var r = n.toString(16);\n            return r.length !== 2 ? '0' + r : r;\n        }\n        var label;\n        if (color.alpha === 1) {\n            label = \"#\" + toTwoDigitHex(red256) + toTwoDigitHex(green256) + toTwoDigitHex(blue256);\n        }\n        else {\n            label = \"#\" + toTwoDigitHex(red256) + toTwoDigitHex(green256) + toTwoDigitHex(blue256) + toTwoDigitHex(Math.round(color.alpha * 255));\n        }\n        result.push({ label: label, textEdit: TextEdit.replace(range, JSON.stringify(label)) });\n        return result;\n    };\n    return JSONDocumentSymbols;\n}());\nexport { JSONDocumentSymbols };\n//# sourceMappingURL=jsonDocumentSymbols.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as nls from '../../../fillers/vscode-nls.js';\nvar localize = nls.loadMessageBundle();\nexport var schemaContributions = {\n    schemaAssociations: {},\n    schemas: {\n        // bundle the schema-schema to include (localized) descriptions\n        'http://json-schema.org/draft-04/schema#': {\n            'title': localize('schema.json', 'Describes a JSON file using a schema. See json-schema.org for more info.'),\n            '$schema': 'http://json-schema.org/draft-04/schema#',\n            'definitions': {\n                'schemaArray': {\n                    'type': 'array',\n                    'minItems': 1,\n                    'items': { '$ref': '#' }\n                },\n                'positiveInteger': {\n                    'type': 'integer',\n                    'minimum': 0\n                },\n                'positiveIntegerDefault0': {\n                    'allOf': [{ '$ref': '#/definitions/positiveInteger' }, { 'default': 0 }]\n                },\n                'simpleTypes': {\n                    'type': 'string',\n                    'enum': ['array', 'boolean', 'integer', 'null', 'number', 'object', 'string']\n                },\n                'stringArray': {\n                    'type': 'array',\n                    'items': { 'type': 'string' },\n                    'minItems': 1,\n                    'uniqueItems': true\n                }\n            },\n            'type': 'object',\n            'properties': {\n                'id': {\n                    'type': 'string',\n                    'format': 'uri',\n                    'description': localize('schema.json.id', 'A unique identifier for the schema.')\n                },\n                '$schema': {\n                    'type': 'string',\n                    'format': 'uri',\n                    'description': localize('schema.json.$schema', 'The schema to verify this document against ')\n                },\n                'title': {\n                    'type': 'string',\n                    'description': localize('schema.json.title', 'A descriptive title of the element')\n                },\n                'description': {\n                    'type': 'string',\n                    'description': localize('schema.json.description', 'A long description of the element. Used in hover menus and suggestions.')\n                },\n                'default': {\n                    'description': localize('schema.json.default', 'A default value. Used by suggestions.')\n                },\n                'multipleOf': {\n                    'type': 'number',\n                    'minimum': 0,\n                    'exclusiveMinimum': true,\n                    'description': localize('schema.json.multipleOf', 'A number that should cleanly divide the current value (i.e. have no remainder)')\n                },\n                'maximum': {\n                    'type': 'number',\n                    'description': localize('schema.json.maximum', 'The maximum numerical value, inclusive by default.')\n                },\n                'exclusiveMaximum': {\n                    'type': 'boolean',\n                    'default': false,\n                    'description': localize('schema.json.exclusiveMaximum', 'Makes the maximum property exclusive.')\n                },\n                'minimum': {\n                    'type': 'number',\n                    'description': localize('schema.json.minimum', 'The minimum numerical value, inclusive by default.')\n                },\n                'exclusiveMinimum': {\n                    'type': 'boolean',\n                    'default': false,\n                    'description': localize('schema.json.exclusiveMininum', 'Makes the minimum property exclusive.')\n                },\n                'maxLength': {\n                    'allOf': [\n                        { '$ref': '#/definitions/positiveInteger' }\n                    ],\n                    'description': localize('schema.json.maxLength', 'The maximum length of a string.')\n                },\n                'minLength': {\n                    'allOf': [\n                        { '$ref': '#/definitions/positiveIntegerDefault0' }\n                    ],\n                    'description': localize('schema.json.minLength', 'The minimum length of a string.')\n                },\n                'pattern': {\n                    'type': 'string',\n                    'format': 'regex',\n                    'description': localize('schema.json.pattern', 'A regular expression to match the string against. It is not implicitly anchored.')\n                },\n                'additionalItems': {\n                    'anyOf': [\n                        { 'type': 'boolean' },\n                        { '$ref': '#' }\n                    ],\n                    'default': {},\n                    'description': localize('schema.json.additionalItems', 'For arrays, only when items is set as an array. If it is a schema, then this schema validates items after the ones specified by the items array. If it is false, then additional items will cause validation to fail.')\n                },\n                'items': {\n                    'anyOf': [\n                        { '$ref': '#' },\n                        { '$ref': '#/definitions/schemaArray' }\n                    ],\n                    'default': {},\n                    'description': localize('schema.json.items', 'For arrays. Can either be a schema to validate every element against or an array of schemas to validate each item against in order (the first schema will validate the first element, the second schema will validate the second element, and so on.')\n                },\n                'maxItems': {\n                    'allOf': [\n                        { '$ref': '#/definitions/positiveInteger' }\n                    ],\n                    'description': localize('schema.json.maxItems', 'The maximum number of items that can be inside an array. Inclusive.')\n                },\n                'minItems': {\n                    'allOf': [\n                        { '$ref': '#/definitions/positiveIntegerDefault0' }\n                    ],\n                    'description': localize('schema.json.minItems', 'The minimum number of items that can be inside an array. Inclusive.')\n                },\n                'uniqueItems': {\n                    'type': 'boolean',\n                    'default': false,\n                    'description': localize('schema.json.uniqueItems', 'If all of the items in the array must be unique. Defaults to false.')\n                },\n                'maxProperties': {\n                    'allOf': [\n                        { '$ref': '#/definitions/positiveInteger' }\n                    ],\n                    'description': localize('schema.json.maxProperties', 'The maximum number of properties an object can have. Inclusive.')\n                },\n                'minProperties': {\n                    'allOf': [\n                        { '$ref': '#/definitions/positiveIntegerDefault0' },\n                    ],\n                    'description': localize('schema.json.minProperties', 'The minimum number of properties an object can have. Inclusive.')\n                },\n                'required': {\n                    'allOf': [\n                        { '$ref': '#/definitions/stringArray' }\n                    ],\n                    'description': localize('schema.json.required', 'An array of strings that lists the names of all properties required on this object.')\n                },\n                'additionalProperties': {\n                    'anyOf': [\n                        { 'type': 'boolean' },\n                        { '$ref': '#' }\n                    ],\n                    'default': {},\n                    'description': localize('schema.json.additionalProperties', 'Either a schema or a boolean. If a schema, then used to validate all properties not matched by \\'properties\\' or \\'patternProperties\\'. If false, then any properties not matched by either will cause this schema to fail.')\n                },\n                'definitions': {\n                    'type': 'object',\n                    'additionalProperties': { '$ref': '#' },\n                    'default': {},\n                    'description': localize('schema.json.definitions', 'Not used for validation. Place subschemas here that you wish to reference inline with $ref')\n                },\n                'properties': {\n                    'type': 'object',\n                    'additionalProperties': { '$ref': '#' },\n                    'default': {},\n                    'description': localize('schema.json.properties', 'A map of property names to schemas for each property.')\n                },\n                'patternProperties': {\n                    'type': 'object',\n                    'additionalProperties': { '$ref': '#' },\n                    'default': {},\n                    'description': localize('schema.json.patternProperties', 'A map of regular expressions on property names to schemas for matching properties.')\n                },\n                'dependencies': {\n                    'type': 'object',\n                    'additionalProperties': {\n                        'anyOf': [\n                            { '$ref': '#' },\n                            { '$ref': '#/definitions/stringArray' }\n                        ]\n                    },\n                    'description': localize('schema.json.dependencies', 'A map of property names to either an array of property names or a schema. An array of property names means the property named in the key depends on the properties in the array being present in the object in order to be valid. If the value is a schema, then the schema is only applied to the object if the property in the key exists on the object.')\n                },\n                'enum': {\n                    'type': 'array',\n                    'minItems': 1,\n                    'uniqueItems': true,\n                    'description': localize('schema.json.enum', 'The set of literal values that are valid')\n                },\n                'type': {\n                    'anyOf': [\n                        { '$ref': '#/definitions/simpleTypes' },\n                        {\n                            'type': 'array',\n                            'items': { '$ref': '#/definitions/simpleTypes' },\n                            'minItems': 1,\n                            'uniqueItems': true\n                        }\n                    ],\n                    'description': localize('schema.json.type', 'Either a string of one of the basic schema types (number, integer, null, array, object, boolean, string) or an array of strings specifying a subset of those types.')\n                },\n                'format': {\n                    'anyOf': [\n                        {\n                            'type': 'string',\n                            'description': localize('schema.json.format', 'Describes the format expected for the value.'),\n                            'enum': ['date-time', 'uri', 'email', 'hostname', 'ipv4', 'ipv6', 'regex']\n                        }, {\n                            'type': 'string'\n                        }\n                    ]\n                },\n                'allOf': {\n                    'allOf': [\n                        { '$ref': '#/definitions/schemaArray' }\n                    ],\n                    'description': localize('schema.json.allOf', 'An array of schemas, all of which must match.')\n                },\n                'anyOf': {\n                    'allOf': [\n                        { '$ref': '#/definitions/schemaArray' }\n                    ],\n                    'description': localize('schema.json.anyOf', 'An array of schemas, where at least one must match.')\n                },\n                'oneOf': {\n                    'allOf': [\n                        { '$ref': '#/definitions/schemaArray' }\n                    ],\n                    'description': localize('schema.json.oneOf', 'An array of schemas, exactly one of which must match.')\n                },\n                'not': {\n                    'allOf': [\n                        { '$ref': '#' }\n                    ],\n                    'description': localize('schema.json.not', 'A schema which must not match.')\n                }\n            },\n            'dependencies': {\n                'exclusiveMaximum': ['maximum'],\n                'exclusiveMinimum': ['minimum']\n            },\n            'default': {}\n        }\n    }\n};\n//# sourceMappingURL=configuration.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as Json from '../../jsonc-parser/main.js';\nimport URI from '../../vscode-uri/index.js';\nimport * as Strings from '../utils/strings.js';\nimport * as Parser from '../parser/jsonParser.js';\nimport * as nls from '../../../fillers/vscode-nls.js';\nvar localize = nls.loadMessageBundle();\nvar FilePatternAssociation = /** @class */ (function () {\n    function FilePatternAssociation(pattern) {\n        try {\n            this.patternRegExp = new RegExp(Strings.convertSimple2RegExpPattern(pattern) + '$');\n        }\n        catch (e) {\n            // invalid pattern\n            this.patternRegExp = null;\n        }\n        this.schemas = [];\n    }\n    FilePatternAssociation.prototype.addSchema = function (id) {\n        this.schemas.push(id);\n    };\n    FilePatternAssociation.prototype.matchesPattern = function (fileName) {\n        return this.patternRegExp && this.patternRegExp.test(fileName);\n    };\n    FilePatternAssociation.prototype.getSchemas = function () {\n        return this.schemas;\n    };\n    return FilePatternAssociation;\n}());\nvar SchemaHandle = /** @class */ (function () {\n    function SchemaHandle(service, url, unresolvedSchemaContent) {\n        this.service = service;\n        this.url = url;\n        if (unresolvedSchemaContent) {\n            this.unresolvedSchema = this.service.promise.resolve(new UnresolvedSchema(unresolvedSchemaContent));\n        }\n    }\n    SchemaHandle.prototype.getUnresolvedSchema = function () {\n        if (!this.unresolvedSchema) {\n            this.unresolvedSchema = this.service.loadSchema(this.url);\n        }\n        return this.unresolvedSchema;\n    };\n    SchemaHandle.prototype.getResolvedSchema = function () {\n        var _this = this;\n        if (!this.resolvedSchema) {\n            this.resolvedSchema = this.getUnresolvedSchema().then(function (unresolved) {\n                return _this.service.resolveSchemaContent(unresolved, _this.url);\n            });\n        }\n        return this.resolvedSchema;\n    };\n    SchemaHandle.prototype.clearSchema = function () {\n        this.resolvedSchema = null;\n        this.unresolvedSchema = null;\n    };\n    return SchemaHandle;\n}());\nvar UnresolvedSchema = /** @class */ (function () {\n    function UnresolvedSchema(schema, errors) {\n        if (errors === void 0) { errors = []; }\n        this.schema = schema;\n        this.errors = errors;\n    }\n    return UnresolvedSchema;\n}());\nexport { UnresolvedSchema };\nvar ResolvedSchema = /** @class */ (function () {\n    function ResolvedSchema(schema, errors) {\n        if (errors === void 0) { errors = []; }\n        this.schema = schema;\n        this.errors = errors;\n    }\n    ResolvedSchema.prototype.getSection = function (path) {\n        return Parser.asSchema(this.getSectionRecursive(path, this.schema));\n    };\n    ResolvedSchema.prototype.getSectionRecursive = function (path, schema) {\n        var _this = this;\n        if (!schema || typeof schema === 'boolean' || path.length === 0) {\n            return schema;\n        }\n        var next = path.shift();\n        if (schema.properties && typeof schema.properties[next]) {\n            return this.getSectionRecursive(path, schema.properties[next]);\n        }\n        else if (schema.patternProperties) {\n            Object.keys(schema.patternProperties).forEach(function (pattern) {\n                var regex = new RegExp(pattern);\n                if (regex.test(next)) {\n                    return _this.getSectionRecursive(path, schema.patternProperties[pattern]);\n                }\n            });\n        }\n        else if (typeof schema.additionalProperties === 'object') {\n            return this.getSectionRecursive(path, schema.additionalProperties);\n        }\n        else if (next.match('[0-9]+')) {\n            if (Array.isArray(schema.items)) {\n                var index = parseInt(next, 10);\n                if (!isNaN(index) && schema.items[index]) {\n                    return this.getSectionRecursive(path, schema.items[index]);\n                }\n            }\n            else if (schema.items) {\n                return this.getSectionRecursive(path, schema.items);\n            }\n        }\n        return null;\n    };\n    return ResolvedSchema;\n}());\nexport { ResolvedSchema };\nvar JSONSchemaService = /** @class */ (function () {\n    function JSONSchemaService(requestService, contextService, promiseConstructor) {\n        this.contextService = contextService;\n        this.requestService = requestService;\n        this.promiseConstructor = promiseConstructor || Promise;\n        this.callOnDispose = [];\n        this.contributionSchemas = {};\n        this.contributionAssociations = {};\n        this.schemasById = {};\n        this.filePatternAssociations = [];\n        this.filePatternAssociationById = {};\n        this.registeredSchemasIds = {};\n    }\n    JSONSchemaService.prototype.getRegisteredSchemaIds = function (filter) {\n        return Object.keys(this.registeredSchemasIds).filter(function (id) {\n            var scheme = URI.parse(id).scheme;\n            return scheme !== 'schemaservice' && (!filter || filter(scheme));\n        });\n    };\n    Object.defineProperty(JSONSchemaService.prototype, \"promise\", {\n        get: function () {\n            return this.promiseConstructor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    JSONSchemaService.prototype.dispose = function () {\n        while (this.callOnDispose.length > 0) {\n            this.callOnDispose.pop()();\n        }\n    };\n    JSONSchemaService.prototype.onResourceChange = function (uri) {\n        uri = this.normalizeId(uri);\n        var schemaFile = this.schemasById[uri];\n        if (schemaFile) {\n            schemaFile.clearSchema();\n            return true;\n        }\n        return false;\n    };\n    JSONSchemaService.prototype.normalizeId = function (id) {\n        // remove trailing '#', normalize drive capitalization\n        return URI.parse(id).toString();\n    };\n    JSONSchemaService.prototype.setSchemaContributions = function (schemaContributions) {\n        var _this = this;\n        if (schemaContributions.schemas) {\n            var schemas = schemaContributions.schemas;\n            for (var id in schemas) {\n                var normalizedId = this.normalizeId(id);\n                this.contributionSchemas[normalizedId] = this.addSchemaHandle(normalizedId, schemas[id]);\n            }\n        }\n        if (schemaContributions.schemaAssociations) {\n            var schemaAssociations = schemaContributions.schemaAssociations;\n            for (var pattern in schemaAssociations) {\n                var associations = schemaAssociations[pattern];\n                this.contributionAssociations[pattern] = associations;\n                var fpa = this.getOrAddFilePatternAssociation(pattern);\n                associations.forEach(function (schemaId) {\n                    var id = _this.normalizeId(schemaId);\n                    fpa.addSchema(id);\n                });\n            }\n        }\n    };\n    JSONSchemaService.prototype.addSchemaHandle = function (id, unresolvedSchemaContent) {\n        var schemaHandle = new SchemaHandle(this, id, unresolvedSchemaContent);\n        this.schemasById[id] = schemaHandle;\n        return schemaHandle;\n    };\n    JSONSchemaService.prototype.getOrAddSchemaHandle = function (id, unresolvedSchemaContent) {\n        return this.schemasById[id] || this.addSchemaHandle(id, unresolvedSchemaContent);\n    };\n    JSONSchemaService.prototype.getOrAddFilePatternAssociation = function (pattern) {\n        var fpa = this.filePatternAssociationById[pattern];\n        if (!fpa) {\n            fpa = new FilePatternAssociation(pattern);\n            this.filePatternAssociationById[pattern] = fpa;\n            this.filePatternAssociations.push(fpa);\n        }\n        return fpa;\n    };\n    JSONSchemaService.prototype.registerExternalSchema = function (uri, filePatterns, unresolvedSchemaContent) {\n        var _this = this;\n        if (filePatterns === void 0) { filePatterns = null; }\n        var id = this.normalizeId(uri);\n        this.registeredSchemasIds[id] = true;\n        if (filePatterns) {\n            filePatterns.forEach(function (pattern) {\n                _this.getOrAddFilePatternAssociation(pattern).addSchema(id);\n            });\n        }\n        return unresolvedSchemaContent ? this.addSchemaHandle(id, unresolvedSchemaContent) : this.getOrAddSchemaHandle(id);\n    };\n    JSONSchemaService.prototype.clearExternalSchemas = function () {\n        var _this = this;\n        this.schemasById = {};\n        this.filePatternAssociations = [];\n        this.filePatternAssociationById = {};\n        this.registeredSchemasIds = {};\n        for (var id in this.contributionSchemas) {\n            this.schemasById[id] = this.contributionSchemas[id];\n            this.registeredSchemasIds[id] = true;\n        }\n        for (var pattern in this.contributionAssociations) {\n            var fpa = this.getOrAddFilePatternAssociation(pattern);\n            this.contributionAssociations[pattern].forEach(function (schemaId) {\n                var id = _this.normalizeId(schemaId);\n                fpa.addSchema(id);\n            });\n        }\n    };\n    JSONSchemaService.prototype.getResolvedSchema = function (schemaId) {\n        var id = this.normalizeId(schemaId);\n        var schemaHandle = this.schemasById[id];\n        if (schemaHandle) {\n            return schemaHandle.getResolvedSchema();\n        }\n        return this.promise.resolve(null);\n    };\n    JSONSchemaService.prototype.loadSchema = function (url) {\n        if (!this.requestService) {\n            var errorMessage = localize('json.schema.norequestservice', 'Unable to load schema from \\'{0}\\'. No schema request service available', toDisplayString(url));\n            return this.promise.resolve(new UnresolvedSchema({}, [errorMessage]));\n        }\n        return this.requestService(url).then(function (content) {\n            if (!content) {\n                var errorMessage = localize('json.schema.nocontent', 'Unable to load schema from \\'{0}\\': No content.', toDisplayString(url));\n                return new UnresolvedSchema({}, [errorMessage]);\n            }\n            var schemaContent = {};\n            var jsonErrors = [];\n            schemaContent = Json.parse(content, jsonErrors);\n            var errors = jsonErrors.length ? [localize('json.schema.invalidFormat', 'Unable to parse content from \\'{0}\\': Parse error at offset {1}.', toDisplayString(url), jsonErrors[0].offset)] : [];\n            return new UnresolvedSchema(schemaContent, errors);\n        }, function (error) {\n            var errorMessage = localize('json.schema.unabletoload', 'Unable to load schema from \\'{0}\\': {1}', toDisplayString(url), error.toString());\n            return new UnresolvedSchema({}, [errorMessage]);\n        });\n    };\n    JSONSchemaService.prototype.resolveSchemaContent = function (schemaToResolve, schemaURL) {\n        var _this = this;\n        var resolveErrors = schemaToResolve.errors.slice(0);\n        var schema = schemaToResolve.schema;\n        var contextService = this.contextService;\n        var findSection = function (schema, path) {\n            if (!path) {\n                return schema;\n            }\n            var current = schema;\n            if (path[0] === '/') {\n                path = path.substr(1);\n            }\n            path.split('/').some(function (part) {\n                current = current[part];\n                return !current;\n            });\n            return current;\n        };\n        var merge = function (target, sourceRoot, sourceURI, path) {\n            var section = findSection(sourceRoot, path);\n            if (section) {\n                for (var key in section) {\n                    if (section.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n                        target[key] = section[key];\n                    }\n                }\n            }\n            else {\n                resolveErrors.push(localize('json.schema.invalidref', '$ref \\'{0}\\' in \\'{1}\\' can not be resolved.', path, sourceURI));\n            }\n        };\n        var resolveExternalLink = function (node, uri, linkPath, parentSchemaURL) {\n            if (contextService && !/^\\w+:\\/\\/.*/.test(uri)) {\n                uri = contextService.resolveRelativePath(uri, parentSchemaURL);\n            }\n            uri = _this.normalizeId(uri);\n            return _this.getOrAddSchemaHandle(uri).getUnresolvedSchema().then(function (unresolvedSchema) {\n                if (unresolvedSchema.errors.length) {\n                    var loc = linkPath ? uri + '#' + linkPath : uri;\n                    resolveErrors.push(localize('json.schema.problemloadingref', 'Problems loading reference \\'{0}\\': {1}', loc, unresolvedSchema.errors[0]));\n                }\n                merge(node, unresolvedSchema.schema, uri, linkPath);\n                return resolveRefs(node, unresolvedSchema.schema, uri);\n            });\n        };\n        var resolveRefs = function (node, parentSchema, parentSchemaURL) {\n            if (!node || typeof node !== 'object') {\n                return Promise.resolve(null);\n            }\n            var toWalk = [node];\n            var seen = [];\n            var openPromises = [];\n            var collectEntries = function () {\n                var entries = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    entries[_i] = arguments[_i];\n                }\n                for (var _a = 0, entries_1 = entries; _a < entries_1.length; _a++) {\n                    var entry = entries_1[_a];\n                    if (typeof entry === 'object') {\n                        toWalk.push(entry);\n                    }\n                }\n            };\n            var collectMapEntries = function () {\n                var maps = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    maps[_i] = arguments[_i];\n                }\n                for (var _a = 0, maps_1 = maps; _a < maps_1.length; _a++) {\n                    var map = maps_1[_a];\n                    if (typeof map === 'object') {\n                        for (var key in map) {\n                            var entry = map[key];\n                            if (typeof entry === 'object') {\n                                toWalk.push(entry);\n                            }\n                        }\n                    }\n                }\n            };\n            var collectArrayEntries = function () {\n                var arrays = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    arrays[_i] = arguments[_i];\n                }\n                for (var _a = 0, arrays_1 = arrays; _a < arrays_1.length; _a++) {\n                    var array = arrays_1[_a];\n                    if (Array.isArray(array)) {\n                        for (var _b = 0, array_1 = array; _b < array_1.length; _b++) {\n                            var entry = array_1[_b];\n                            if (typeof entry === 'object') {\n                                toWalk.push(entry);\n                            }\n                        }\n                    }\n                }\n            };\n            var handleRef = function (next) {\n                while (next.$ref) {\n                    var segments = next.$ref.split('#', 2);\n                    delete next.$ref;\n                    if (segments[0].length > 0) {\n                        openPromises.push(resolveExternalLink(next, segments[0], segments[1], parentSchemaURL));\n                        return;\n                    }\n                    else {\n                        merge(next, parentSchema, parentSchemaURL, segments[1]); // can set next.$ref again\n                    }\n                }\n                collectEntries(next.items, next.additionalProperties, next.not, next.contains, next.propertyNames);\n                collectMapEntries(next.definitions, next.properties, next.patternProperties, next.dependencies);\n                collectArrayEntries(next.anyOf, next.allOf, next.oneOf, next.items);\n            };\n            while (toWalk.length) {\n                var next = toWalk.pop();\n                if (seen.indexOf(next) >= 0) {\n                    continue;\n                }\n                seen.push(next);\n                handleRef(next);\n            }\n            return _this.promise.all(openPromises);\n        };\n        return resolveRefs(schema, schema, schemaURL).then(function (_) { return new ResolvedSchema(schema, resolveErrors); });\n    };\n    JSONSchemaService.prototype.getSchemaForResource = function (resource, document) {\n        // first use $schema if present\n        if (document && document.root && document.root.type === 'object') {\n            var schemaProperties = document.root.properties.filter(function (p) { return (p.keyNode.value === '$schema') && p.valueNode && p.valueNode.type === 'string'; });\n            if (schemaProperties.length > 0) {\n                var schemeId = Parser.getNodeValue(schemaProperties[0].valueNode);\n                if (schemeId && Strings.startsWith(schemeId, '.') && this.contextService) {\n                    schemeId = this.contextService.resolveRelativePath(schemeId, resource);\n                }\n                if (schemeId) {\n                    var id = this.normalizeId(schemeId);\n                    return this.getOrAddSchemaHandle(id).getResolvedSchema();\n                }\n            }\n        }\n        var seen = Object.create(null);\n        var schemas = [];\n        for (var _i = 0, _a = this.filePatternAssociations; _i < _a.length; _i++) {\n            var entry = _a[_i];\n            if (entry.matchesPattern(resource)) {\n                for (var _b = 0, _c = entry.getSchemas(); _b < _c.length; _b++) {\n                    var schemaId = _c[_b];\n                    if (!seen[schemaId]) {\n                        schemas.push(schemaId);\n                        seen[schemaId] = true;\n                    }\n                }\n            }\n        }\n        if (schemas.length > 0) {\n            return this.createCombinedSchema(resource, schemas).getResolvedSchema();\n        }\n        return this.promise.resolve(null);\n    };\n    JSONSchemaService.prototype.createCombinedSchema = function (resource, schemaIds) {\n        if (schemaIds.length === 1) {\n            return this.getOrAddSchemaHandle(schemaIds[0]);\n        }\n        else {\n            var combinedSchemaId = 'schemaservice://combinedSchema/' + encodeURIComponent(resource);\n            var combinedSchema = {\n                allOf: schemaIds.map(function (schemaId) { return ({ $ref: schemaId }); })\n            };\n            return this.addSchemaHandle(combinedSchemaId, combinedSchema);\n        }\n    };\n    return JSONSchemaService;\n}());\nexport { JSONSchemaService };\nfunction toDisplayString(url) {\n    try {\n        var uri = URI.parse(url);\n        if (uri.scheme === 'file') {\n            return uri.fsPath;\n        }\n    }\n    catch (e) {\n        // ignore\n    }\n    return url;\n}\n//# sourceMappingURL=jsonSchemaService.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { TextDocument, Position, CompletionItem, CompletionList, Range, SymbolInformation, Diagnostic, TextEdit, FormattingOptions, MarkedString } from '../vscode-languageserver-types/main.js';\nimport { JSONCompletion } from './services/jsonCompletion.js';\nimport { JSONHover } from './services/jsonHover.js';\nimport { JSONValidation } from './services/jsonValidation.js';\nimport { JSONDocumentSymbols } from './services/jsonDocumentSymbols.js';\nimport { parse as parseJSON, newJSONDocument } from './parser/jsonParser.js';\nimport { schemaContributions } from './services/configuration.js';\nimport { JSONSchemaService } from './services/jsonSchemaService.js';\nimport { format as formatJSON } from '../jsonc-parser/main.js';\nexport { TextDocument, Position, CompletionItem, CompletionList, Range, SymbolInformation, Diagnostic, TextEdit, FormattingOptions, MarkedString };\nexport function getLanguageService(params) {\n    var promise = params.promiseConstructor || Promise;\n    var jsonSchemaService = new JSONSchemaService(params.schemaRequestService, params.workspaceContext, promise);\n    jsonSchemaService.setSchemaContributions(schemaContributions);\n    var jsonCompletion = new JSONCompletion(jsonSchemaService, params.contributions, promise);\n    var jsonHover = new JSONHover(jsonSchemaService, params.contributions, promise);\n    var jsonDocumentSymbols = new JSONDocumentSymbols(jsonSchemaService);\n    var jsonValidation = new JSONValidation(jsonSchemaService, promise);\n    return {\n        configure: function (settings) {\n            jsonSchemaService.clearExternalSchemas();\n            if (settings.schemas) {\n                settings.schemas.forEach(function (settings) {\n                    jsonSchemaService.registerExternalSchema(settings.uri, settings.fileMatch, settings.schema);\n                });\n            }\n            jsonValidation.configure(settings);\n        },\n        resetSchema: function (uri) { return jsonSchemaService.onResourceChange(uri); },\n        doValidation: jsonValidation.doValidation.bind(jsonValidation),\n        parseJSONDocument: function (document) { return parseJSON(document, { collectComments: true }); },\n        newJSONDocument: function (root, diagnostics) { return newJSONDocument(root, diagnostics); },\n        doResolve: jsonCompletion.doResolve.bind(jsonCompletion),\n        doComplete: jsonCompletion.doComplete.bind(jsonCompletion),\n        findDocumentSymbols: jsonDocumentSymbols.findDocumentSymbols.bind(jsonDocumentSymbols),\n        findColorSymbols: function (d, s) { return jsonDocumentSymbols.findDocumentColors(d, s).then(function (s) { return s.map(function (s) { return s.range; }); }); },\n        findDocumentColors: jsonDocumentSymbols.findDocumentColors.bind(jsonDocumentSymbols),\n        getColorPresentations: jsonDocumentSymbols.getColorPresentations.bind(jsonDocumentSymbols),\n        doHover: jsonHover.doHover.bind(jsonHover),\n        format: function (d, r, o) {\n            var range = void 0;\n            if (r) {\n                var offset = d.offsetAt(r.start);\n                var length = d.offsetAt(r.end) - offset;\n                range = { offset: offset, length: length };\n            }\n            var options = { tabSize: o ? o.tabSize : 4, insertSpaces: o ? o.insertSpaces : true, eol: '\\n' };\n            return formatJSON(d.getText(), range, options).map(function (e) {\n                return TextEdit.replace(Range.create(d.positionAt(e.offset), d.positionAt(e.offset + e.length)), e.content);\n            });\n        }\n    };\n}\n//# sourceMappingURL=jsonLanguageService.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nvar Promise = monaco.Promise;\nimport * as jsonService from './_deps/vscode-json-languageservice/jsonLanguageService.js';\nimport * as ls from './_deps/vscode-languageserver-types/main.js';\nvar PromiseAdapter = /** @class */ (function () {\n    function PromiseAdapter(executor) {\n        this.wrapped = new monaco.Promise(executor);\n    }\n    PromiseAdapter.prototype.then = function (onfulfilled, onrejected) {\n        var thenable = this.wrapped;\n        return thenable.then(onfulfilled, onrejected);\n    };\n    PromiseAdapter.prototype.getWrapped = function () {\n        return this.wrapped;\n    };\n    PromiseAdapter.prototype.cancel = function () {\n        this.wrapped.cancel();\n    };\n    PromiseAdapter.resolve = function (v) {\n        return monaco.Promise.as(v);\n    };\n    PromiseAdapter.reject = function (v) {\n        return monaco.Promise.wrapError(v);\n    };\n    PromiseAdapter.all = function (values) {\n        return monaco.Promise.join(values);\n    };\n    return PromiseAdapter;\n}());\nvar JSONWorker = /** @class */ (function () {\n    function JSONWorker(ctx, createData) {\n        this._ctx = ctx;\n        this._languageSettings = createData.languageSettings;\n        this._languageId = createData.languageId;\n        this._languageService = jsonService.getLanguageService({ promiseConstructor: PromiseAdapter });\n        this._languageService.configure(this._languageSettings);\n    }\n    JSONWorker.prototype.doValidation = function (uri) {\n        var document = this._getTextDocument(uri);\n        if (document) {\n            var jsonDocument = this._languageService.parseJSONDocument(document);\n            return this._languageService.doValidation(document, jsonDocument);\n        }\n        return Promise.as([]);\n    };\n    JSONWorker.prototype.doComplete = function (uri, position) {\n        var document = this._getTextDocument(uri);\n        var jsonDocument = this._languageService.parseJSONDocument(document);\n        return this._languageService.doComplete(document, position, jsonDocument);\n    };\n    JSONWorker.prototype.doResolve = function (item) {\n        return this._languageService.doResolve(item);\n    };\n    JSONWorker.prototype.doHover = function (uri, position) {\n        var document = this._getTextDocument(uri);\n        var jsonDocument = this._languageService.parseJSONDocument(document);\n        return this._languageService.doHover(document, position, jsonDocument);\n    };\n    JSONWorker.prototype.format = function (uri, range, options) {\n        var document = this._getTextDocument(uri);\n        var textEdits = this._languageService.format(document, range, options);\n        return Promise.as(textEdits);\n    };\n    JSONWorker.prototype.resetSchema = function (uri) {\n        return Promise.as(this._languageService.resetSchema(uri));\n    };\n    JSONWorker.prototype.findDocumentSymbols = function (uri) {\n        var document = this._getTextDocument(uri);\n        var jsonDocument = this._languageService.parseJSONDocument(document);\n        var symbols = this._languageService.findDocumentSymbols(document, jsonDocument);\n        return Promise.as(symbols);\n    };\n    JSONWorker.prototype.findDocumentColors = function (uri) {\n        var document = this._getTextDocument(uri);\n        var stylesheet = this._languageService.parseJSONDocument(document);\n        var colorSymbols = this._languageService.findDocumentColors(document, stylesheet);\n        return Promise.as(colorSymbols);\n    };\n    JSONWorker.prototype.getColorPresentations = function (uri, color, range) {\n        var document = this._getTextDocument(uri);\n        var stylesheet = this._languageService.parseJSONDocument(document);\n        var colorPresentations = this._languageService.getColorPresentations(document, stylesheet, color, range);\n        return Promise.as(colorPresentations);\n    };\n    JSONWorker.prototype._getTextDocument = function (uri) {\n        var models = this._ctx.getMirrorModels();\n        for (var _i = 0, models_1 = models; _i < models_1.length; _i++) {\n            var model = models_1[_i];\n            if (model.uri.toString() === uri) {\n                return ls.TextDocument.create(uri, this._languageId, model.version, model.getValue());\n            }\n        }\n        return null;\n    };\n    return JSONWorker;\n}());\nexport { JSONWorker };\nexport function create(ctx, createData) {\n    return new JSONWorker(ctx, createData);\n}\n"],"sourceRoot":""}