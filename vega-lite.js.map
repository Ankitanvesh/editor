{"version":3,"sources":["webpack:///./node_modules/vega-lite/build/src/aggregate.js","webpack:///./node_modules/vega-lite/build/src/axis.js","webpack:///./node_modules/vega-lite/build/src/channel.js","webpack:///./node_modules/vega-lite/build/src/log.js","webpack:///./node_modules/vega-lite/build/src/datetime.js","webpack:///./node_modules/vega-lite/build/src/spec/facet.js","webpack:///./node_modules/vega-lite/build/src/timeunit.js","webpack:///./node_modules/vega-lite/build/src/type.js","webpack:///./node_modules/vega-lite/build/src/fielddef.js","webpack:///./node_modules/vega-lite/build/src/bin.js","webpack:///./node_modules/vega-lite/build/src/mark.js","webpack:///./node_modules/vega-lite/build/src/spec/unit.js","webpack:///./node_modules/vega-lite/build/src/compositemark/base.js","webpack:///./node_modules/vega-lite/build/src/encoding.js","webpack:///./node_modules/vega-lite/build/src/compositemark/common.js","webpack:///./node_modules/vega-lite/build/src/compositemark/boxplot.js","webpack:///./node_modules/vega-lite/build/src/compositemark/errorbar.js","webpack:///./node_modules/vega-lite/build/src/compositemark/errorband.js","webpack:///./node_modules/vega-lite/build/src/compositemark/index.js","webpack:///./node_modules/vega-lite/build/src/guide.js","webpack:///./node_modules/vega-lite/build/src/legend.js","webpack:///./node_modules/vega-lite/build/src/scale.js","webpack:///./node_modules/vega-lite/build/src/selection.js","webpack:///./node_modules/vega-lite/build/src/title.js","webpack:///./node_modules/vega-lite/build/src/config.js","webpack:///./node_modules/vega-lite/build/src/data.js","webpack:///./node_modules/vega-lite/build/src/header.js","webpack:///./node_modules/vega-lite/build/src/spec/concat.js","webpack:///./node_modules/vega-lite/build/src/spec/layer.js","webpack:///./node_modules/vega-lite/build/src/spec/repeat.js","webpack:///./node_modules/vega-lite/build/src/spec/map.js","webpack:///./node_modules/vega-lite/build/src/stack.js","webpack:///./node_modules/vega-lite/build/src/normalize/pathoverlay.js","webpack:///./node_modules/vega-lite/build/src/normalize/ruleforrangedline.js","webpack:///./node_modules/vega-lite/build/src/normalize/core.js","webpack:///./node_modules/vega-lite/build/src/normalize/index.js","webpack:///./node_modules/vega-lite/build/src/sort.js","webpack:///./node_modules/vega-lite/build/src/predicate.js","webpack:///./node_modules/vega-lite/build/src/transform.js","webpack:///./node_modules/vega-lite/build/src/validate.js","webpack:///./node_modules/vega-lite/build/src/spec/toplevel.js","webpack:///./node_modules/vega-lite/build/src/spec/base.js","webpack:///./node_modules/vega-lite/build/src/vega.schema.js","webpack:///./node_modules/vega-lite/build/src/compile/axis/assemble.js","webpack:///./node_modules/vega-lite/build/src/compile/common.js","webpack:///./node_modules/vega-lite/build/src/compile/data/dataflow.js","webpack:///./node_modules/vega-lite/build/src/compile/data/expressions.js","webpack:///./node_modules/vega-lite/build/src/compile/data/calculate.js","webpack:///./node_modules/vega-lite/build/src/compile/header/index.js","webpack:///./node_modules/vega-lite/build/src/compile/layoutsize/assemble.js","webpack:///./node_modules/vega-lite/build/src/compile/data/timeunit.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/transforms/scales.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/transforms/project.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/interval.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/multi.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/single.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/transforms/nearest.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/transforms/translate.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/transforms/zoom.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/transforms/transforms.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/transforms/toggle.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/transforms/inputs.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/selection.js","webpack:///./node_modules/vega-lite/build/src/compile/predicate.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/valueref.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/mixins.js","webpack:///./node_modules/vega-lite/build/src/compile/guide.js","webpack:///./node_modules/vega-lite/build/src/compile/resolve.js","webpack:///./node_modules/vega-lite/build/src/compile/split.js","webpack:///./node_modules/vega-lite/build/src/compile/legend/component.js","webpack:///./node_modules/vega-lite/build/src/compile/legend/properties.js","webpack:///./node_modules/vega-lite/build/src/compile/legend/encode.js","webpack:///./node_modules/vega-lite/build/src/compile/legend/parse.js","webpack:///./node_modules/vega-lite/build/src/compile/legend/assemble.js","webpack:///./node_modules/vega-lite/build/src/compile/projection/assemble.js","webpack:///./node_modules/vega-lite/build/src/projection.js","webpack:///./node_modules/vega-lite/build/src/compile/projection/component.js","webpack:///./node_modules/vega-lite/build/src/compile/projection/parse.js","webpack:///./node_modules/vega-lite/build/src/compile/data/debug.js","webpack:///./node_modules/vega-lite/build/src/compile/data/source.js","webpack:///./node_modules/vega-lite/build/src/compile/data/optimizer.js","webpack:///./node_modules/vega-lite/build/src/compile/data/aggregate.js","webpack:///./node_modules/vega-lite/build/src/compile/data/facet.js","webpack:///./node_modules/vega-lite/build/src/compile/data/formatparse.js","webpack:///./node_modules/vega-lite/build/src/compile/data/joinaggregate.js","webpack:///./node_modules/vega-lite/build/src/compile/data/stack.js","webpack:///./node_modules/vega-lite/build/src/compile/data/window.js","webpack:///./node_modules/vega-lite/build/src/compile/data/optimizers.js","webpack:///./node_modules/vega-lite/build/src/compile/data/optimize.js","webpack:///./node_modules/vega-lite/build/src/compile/scale/domain.js","webpack:///./node_modules/vega-lite/build/src/compile/scale/assemble.js","webpack:///./node_modules/vega-lite/build/src/compile/scale/component.js","webpack:///./node_modules/vega-lite/build/src/compile/signal.js","webpack:///./node_modules/vega-lite/build/src/compile/scale/range.js","webpack:///./node_modules/vega-lite/build/src/compile/scale/properties.js","webpack:///./node_modules/vega-lite/build/src/compile/scale/type.js","webpack:///./node_modules/vega-lite/build/src/compile/scale/parse.js","webpack:///./node_modules/vega-lite/build/src/compile/model.js","webpack:///./node_modules/vega-lite/build/src/compile/data/bin.js","webpack:///./node_modules/vega-lite/build/src/compile/data/filter.js","webpack:///./node_modules/vega-lite/build/src/compile/data/flatten.js","webpack:///./node_modules/vega-lite/build/src/compile/data/fold.js","webpack:///./node_modules/vega-lite/build/src/compile/data/geojson.js","webpack:///./node_modules/vega-lite/build/src/compile/data/geopoint.js","webpack:///./node_modules/vega-lite/build/src/compile/data/identifier.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/bar.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/point.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/tick.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/mark.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/area.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/geoshape.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/line.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/rect.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/rule.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/text.js","webpack:///./node_modules/vega-lite/build/src/compile/data/impute.js","webpack:///./node_modules/vega-lite/build/src/compile/data/index.js","webpack:///./node_modules/vega-lite/build/src/compile/data/lookup.js","webpack:///./node_modules/vega-lite/build/src/compile/data/sample.js","webpack:///./node_modules/vega-lite/build/src/compile/data/assemble.js","webpack:///./node_modules/vega-lite/build/src/compile/layoutsize/parse.js","webpack:///./node_modules/vega-lite/build/src/compile/repeater.js","webpack:///./node_modules/vega-lite/build/src/compile/facet.js","webpack:///./node_modules/vega-lite/build/src/compile/data/parse.js","webpack:///./node_modules/vega-lite/build/src/compile/data/joinaggregatefacet.js","webpack:///./node_modules/vega-lite/build/src/compile/baseconcat.js","webpack:///./node_modules/vega-lite/build/src/compile/concat.js","webpack:///./node_modules/vega-lite/build/src/compile/axis/component.js","webpack:///./node_modules/vega-lite/build/src/compile/axis/config.js","webpack:///./node_modules/vega-lite/build/src/compile/axis/properties.js","webpack:///./node_modules/vega-lite/build/src/compile/axis/parse.js","webpack:///./node_modules/vega-lite/build/src/compile/axis/encode.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/init.js","webpack:///./node_modules/vega-lite/build/src/compile/unit.js","webpack:///./node_modules/vega-lite/build/src/compile/layer.js","webpack:///./node_modules/vega-lite/build/src/compile/repeat.js","webpack:///./node_modules/vega-lite/build/src/compile/buildmodel.js","webpack:///./node_modules/vega-lite/build/src/compile/compile.js","webpack:///./node_modules/vega-lite/build/src/transformextract.js","webpack:///./node_modules/vega-lite/build/src/index.js","webpack:///./node_modules/vega-lite/build/src/logical.js","webpack:///./node_modules/vega-lite/build/src/util.js"],"names":["AGGREGATE_OP_INDEX","argmax","argmin","average","count","distinct","max","mean","median","min","missing","q1","q3","ci0","ci1","stderr","stdev","stdevp","sum","valid","values","variance","variancep","AGGREGATE_OPS","Object","util","isAggregateOp","a","COUNTING_OPS","isCountingAggregateOp","aggregate","isMinMaxOp","SUM_OPS","SHARED_DOMAIN_OPS","SHARED_DOMAIN_OP_INDEX","vega_util","AXIS_PARTS","AXIS_PROPERTY_TYPE","grid","gridColor","gridDash","gridOpacity","gridScale","gridWidth","orient","bandPosition","domain","domainColor","domainOpacity","domainWidth","format","labelAlign","labelAngle","labelBaseline","labelBound","labelColor","labelFlush","labelFlushOffset","labelFont","labelFontSize","labelFontWeight","labelLimit","labelOpacity","labelOverlap","labelPadding","labels","maxExtent","minExtent","offset","position","tickColor","tickExtra","tickOffset","tickOpacity","tickRound","ticks","tickSize","title","titleAlign","titleAngle","titleBaseline","titleColor","titleFont","titleFontSize","titleFontWeight","titleLimit","titleOpacity","titlePadding","titleX","titleY","tickWidth","tickCount","scale","zindex","COMMON_AXIS_PROPERTIES_INDEX","labelFontStyle","labelSeparation","tickMinStep","titleFontStyle","AXIS_PROPERTIES_INDEX","assign","encoding","VG_AXIS_PROPERTIES_INDEX","encode","isAxisProperty","prop","VG_AXIS_PROPERTIES","AXIS_PROPERTIES","Channel","ROW","COLUMN","X","Y","X2","Y2","LATITUDE","LONGITUDE","LATITUDE2","LONGITUDE2","COLOR","FILL","STROKE","SHAPE","SIZE","OPACITY","FILLOPACITY","STROKEOPACITY","STROKEWIDTH","TEXT","ORDER","DETAIL","KEY","TOOLTIP","HREF","GEOPOSITION_CHANNEL_INDEX","longitude","longitude2","latitude","latitude2","GEOPOSITION_CHANNELS","UNIT_CHANNEL_INDEX","x","y","x2","y2","color","fill","stroke","opacity","fillOpacity","strokeOpacity","strokeWidth","size","shape","order","text","detail","key","tooltip","href","isColorChannel","channel","FACET_CHANNEL_INDEX","row","column","FACET_CHANNELS","CHANNEL_INDEX","CHANNELS","_o","channel_d","SINGLE_DEF_CHANNEL_INDEX","tslib_es6","SINGLE_DEF_CHANNELS","isChannel","str","isSecondaryRangeChannel","c","getMainRangeChannel","UNIT_CHANNELS","_x","_y","_x2","_y2","_latitude","_longitude","_latitude2","_longitude2","NONPOSITION_CHANNEL_INDEX","NONPOSITION_CHANNELS","POSITION_SCALE_CHANNEL_INDEX","POSITION_SCALE_CHANNELS","_t","_tt","_hr","_dd","_k","_oo","NONPOSITION_SCALE_CHANNEL_INDEX","NONPOSITION_SCALE_CHANNELS","isNonPositionScaleChannel","supportLegend","SCALE_CHANNEL_INDEX","SCALE_CHANNELS","isScaleChannel","supportMark","mark","point","tick","rule","circle","square","bar","rect","line","trail","area","geoshape","getSupportedMark","rangeType","Error","log_main","current","log_reset","warn","_","apply","arguments","log_message","message","INVALID_SPEC","FIT_NON_SINGLE","CANNOT_FIX_RANGE_STEP_WITH_FIT","cannotProjectOnChannelWithoutField","nearestNotSupportForContinuous","selectionNotSupported","selectionNotFound","name","SCALE_BINDINGS_CONTINUOUS","NO_INIT_SCALE_BINDINGS","noSuchRepeatedValue","field","CONCAT_CANNOT_SHARE_AXIS","REPEAT_CANNOT_SHARE_AXIS","cannotSetTitleAnchor","type","unrecognizedParse","p","differentParse","local","ancestor","invalidTransformIgnored","transform","NO_FIELDS_NEEDS_AS","encodingOverridden","channels","join","length","projectionOverridden","opt","parentProjection","projection","primitiveChannelDef","value","invalidFieldType","nonZeroScaleUsedWithLengthMark","scaleType","zeroFalse","invalidFieldTypeForCountAggregate","invalidAggregate","missingFieldType","newType","droppingColor","emptyFieldDef","fieldDef","latLongDeprecated","newChannel","LINE_WITH_VARYING_SIZE","incompatibleChannel","markOrFacet","when","invalidEncodingChannel","facetChannelShouldBeDiscrete","discreteChannelCannotEncode","BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL","lineWithRange","hasX2","hasY2","orientOverridden","original","actual","CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN","cannotUseScalePropertyWithNonColor","unaggregateDomainHasNoEffectForRawField","unaggregateDomainWithNonSharedDomainOp","unaggregatedDomainWithLogScale","cannotApplySizeToNonOrientedMark","rangeStepDropped","scaleTypeNotWorkWithChannel","defaultScaleType","scaleTypeNotWorkWithFieldDef","scalePropertyNotWorkWithScaleType","propName","scaleTypeNotWorkWithMark","mergeConflictingProperty","property","propertyOf","v1","v2","toString","independentScaleMeansIndependentGuide","domainSortDropped","sort","UNABLE_TO_MERGE_DOMAINS","MORE_THAN_ONE_SORT","INVALID_CHANNEL_FOR_AXIS","cannotStackRangedMark","cannotStackNonLinearScale","stackNonSummativeAggregate","invalidTimeUnit","unitName","dayReplacedWithDate","fullTimeUnit","replace","droppedDay","d","errorBarCenterAndExtentAreNotNeeded","center","extent","errorBarCenterIsUsedWithWrongExtent","errorBarContinuousAxisHasCustomizedAggregate","compositeMark","errorBarCenterIsNotNeeded","errorBand1DNotSupport","channelRequiredForBinned","domainRequiredForThresholdScale","SUNDAY_YEAR","isDateTime","o","year","quarter","month","date","day","hours","minutes","seconds","milliseconds","MONTHS","SHORT_MONTHS","map","m","substr","DAYS","SHORT_DAYS","dateTimeExpr","normalize","units","undefined","push","lowerM","toLowerCase","monthIndex","indexOf","shortM","shortMonthIndex","normalizeMonth","q","normalizeQuarter","lowerD","dayIndex","shortD","shortDayIndex","normalizeDay","timeUnit","utc","isFacetSpec","spec","TimeUnit","YEAR","MONTH","DAY","DATE","HOURS","MINUTES","SECONDS","MILLISECONDS","YEARMONTH","YEARMONTHDATE","YEARMONTHDATEHOURS","YEARMONTHDATEHOURSMINUTES","YEARMONTHDATEHOURSMINUTESSECONDS","MONTHDATE","MONTHDATEHOURS","HOURSMINUTES","HOURSMINUTESSECONDS","MINUTESSECONDS","SECONDSMILLISECONDS","QUARTER","YEARQUARTER","QUARTERMONTH","YEARQUARTERMONTH","UTCYEAR","UTCMONTH","UTCDAY","UTCDATE","UTCHOURS","UTCMINUTES","UTCSECONDS","UTCMILLISECONDS","UTCYEARMONTH","UTCYEARMONTHDATE","UTCYEARMONTHDATEHOURS","UTCYEARMONTHDATEHOURSMINUTES","UTCYEARMONTHDATEHOURSMINUTESSECONDS","UTCMONTHDATE","UTCMONTHDATEHOURS","UTCHOURSMINUTES","UTCHOURSMINUTESSECONDS","UTCMINUTESSECONDS","UTCSECONDSMILLISECONDS","UTCQUARTER","UTCYEARQUARTER","UTCQUARTERMONTH","UTCYEARQUARTERMONTH","LOCAL_SINGLE_TIMEUNIT_INDEX","TIMEUNIT_PARTS","isLocalSingleTimeUnit","UTC_SINGLE_TIMEUNIT_INDEX","utcyear","utcquarter","utcmonth","utcday","utcdate","utchours","utcminutes","utcseconds","utcmilliseconds","isUtcSingleTimeUnit","UTC_MULTI_TIMEUNIT_INDEX","utcyearquarter","utcyearquartermonth","utcyearmonth","utcyearmonthdate","utcyearmonthdatehours","utcyearmonthdatehoursminutes","utcyearmonthdatehoursminutesseconds","utcquartermonth","utcmonthdate","utcmonthdatehours","utchoursminutes","utchoursminutesseconds","utcminutesseconds","utcsecondsmilliseconds","UTC_TIMEUNIT_INDEX","isUTCTimeUnit","t","getLocalTimeUnit","TIMEUNIT_INDEX","yearquarter","yearquartermonth","yearmonth","yearmonthdate","yearmonthdatehours","yearmonthdatehoursminutes","yearmonthdatehoursminutesseconds","quartermonth","monthdate","monthdatehours","hoursminutes","hoursminutesseconds","minutesseconds","secondsmilliseconds","TIMEUNITS","isTimeUnit","SET_DATE_METHOD","convert","unit","isUTC","result","Date","UTC","timeUnitPart","containsTimeUnit","getDateMethod","setDateMethod","dateMethods","Math","floor","singleUnit","isUtc","rawSetDateMethod","getTimeUnitParts","reduce","parts","part","index","charAt","timeunit_fieldExpr","fieldRef","dateExpr","tu","func","getDateTimeComponents","shortTimeLabels","dateComponents","hasYear","timeComponents","dateTimeComponents","formatExpression","isUTCScale","expression","normalizeTimeUnit","Type","QUANTITATIVE","ORDINAL","TEMPORAL","NOMINAL","GEOJSON","TYPE_INDEX","quantitative","ordinal","temporal","nominal","geojson","isType","getFullName","isConditionalSelection","isRepeatRef","toFieldDefBase","bin","isSortableFieldDef","isTypedFieldDef","isConditionalDef","channelDef","condition","hasConditionalFieldDef","isFieldDef","hasConditionalValueDef","isValueDef","isStringFieldDef","isScaleFieldDef","isPositionFieldDef","isMarkPropFieldDef","isTextFieldDef","vgField","prefix","suffix","isCount","fn","nofn","isOpFieldDef","isBinning","binToString","binSuffix","String","op","forAs","expr","isDiscrete","isContinuous","verbalTitleFormatter","config","countTitle","functionalTitleFormatter","toUpperCase","defaultTitleFormatter","fieldTitle","titleFormatter","setTitleFormatter","formatter","resetTitleFormatter","fielddef_title","allowDisabling","guideTitle","getGuide","defaultTitle","axis","legend","header","fielddef_format","defaultType","getFieldDef","getTypedFieldDef","fielddef_normalize","primitiveType","normalizeFieldDef","fieldDefWithoutAggregate","normalizeBin","isBinned","fullType","compatible","warning","channelCompatibility","maxbins","autoMaxBins","binned","step","COMPATIBLE","isNumberFieldDef","isTimeFieldDef","valueExpr","v","time","undefinedIfExprNotRequired","[object Object]","JSON","stringify","valueArray","signal","binRequiresRange","console","isBinParams","Mark","AREA","BAR","LINE","POINT","RECT","RULE","TICK","TRAIL","CIRCLE","SQUARE","GEOSHAPE","mark_TEXT","MARK_INDEX","isMark","isPathMark","PRIMITIVE_MARKS","isMarkDef","PRIMITIVE_MARK_INDEX","isPrimitiveMark","STROKE_CONFIG","FILL_CONFIG","FILL_STROKE_CONFIG","concat","VL_ONLY_MARK_CONFIG_PROPERTIES","VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX","defaultMarkConfig","content","defaultBarConfig","binSpacing","continuousBandSize","defaultTickConfig","thickness","getMarkType","isUnitSpec","base_CompositeMarkNormalizer","run","this","channelHasField","encoding_isAggregate","extractTransformsFromEncoding","oldEncoding","groupby","bins","timeUnits","forEach","aggOp","remaining","guide","isTitleDefined","newField","newChannelDef","isPositionChannel","aggregateEntry","as","secondaryChannel","markChannelCompatible","markSupported","primaryFieldDef","normalizeEncoding","normalizedEncoding","defs","isRanged","fieldDefs","arr","def","mapping","f","thisArg","el","call","init","r","r1","getCompositeMarkTooltip","tooltipSummary","continuousAxisChannelDef","encodingWithoutContinuousAxis","withFieldName","fieldPrefix","titlePrefix","makeCompositeAggregatePartFactory","compositeMarkDef","continuousAxis","sharedEncoding","compositeMarkConfig","partName","positionPrefix","endPositionPrefix","extraEncoding","partLayerMixins","markDef","partBaseSpec","clip","style","compositeMarkContinuousAxis","continuousAxisChannelDef2","continuousAxisChannelDefError","continuousAxisChannelDefError2","filterAggregateFromChannelDef","continuousAxisWithoutAggregate","compositeMarkOrient","BOXPLOT","BOXPLOT_PARTS","box","outliers","boxPlotNormalizer","normalizeBoxPlot","getBoxPlotType","_encoding","selection","_p","outerSpec","boxplot","sizeValue","boxPlotType","ticksOrient","continuousFieldName","boxplotSpecificAggregate","boxParamsQuartiles","postAggregateCalculates","calculate","_a","_b","oldEncodingWithoutContinuousAxis","boxParams","encodingWithoutSizeColorAndContinuousAxis","makeBoxPlotPart","makeBoxPlotExtent","makeBoxPlotBox","makeBoxPlotMidTick","fiveSummaryTooltipEncoding","endTick","whiskerTooltipEncoding","whiskerLayers","boxLayers","filteredLayersMixins","lowerBoxExpr","upperBoxExpr","iqrExpr","lowerWhiskerExpr","upperWhiskerExpr","fieldExpr","joinaggregateTransform","joinaggregate","filteredWhiskerSpec","filter","layer","outlierLayersMixins","unshift","continousAxisField","ERRORBAR","ERRORBAR_PARTS","errorBarNormalizer","normalizeErrorBar","tooltipEncoding","errorBarParams","makeErrorBarPart","errorbar","errorBarOrientAndInputType","xError","xError2","yError","yError2","errorBarIsInputTypeRaw","inputType","isTypeAggregatedUpperLower","errorBarIsInputTypeAggregatedUpperLower","isTypeAggregatedError","errorBarIsInputTypeAggregatedError","errorBarSpecificAggregate","tooltipTitleWithFieldName","getTitlePrefix","centerOp","lowerExtentOp","upperExtentOp","postAggregateCalculate","substring","RegExp","errorBarAggregationAndCalculation","_c","_d","oldAggregate","oldGroupBy","operation","ERRORBAND","ERRORBAND_PARTS","band","borders","errorBandNormalizer","normalizeErrorBand","makeErrorBandPart","errorband","is2D","bandMark","bordersMark","interpolate","tension","compositeMarkRegistry","compositemark_add","normalizer","remove","getAllCompositeMarks","VL_ONLY_GUIDE_CONFIG","VL_ONLY_LEGEND_CONFIG","defaultLegendConfig","gradientHorizontalMaxLength","gradientHorizontalMinLength","gradientVerticalMaxLength","gradientVerticalMinLength","COMMON_LEGEND_PROPERTY_INDEX","clipHeight","columnPadding","columns","cornerRadius","direction","fillColor","gradientLength","gradientOpacity","gradientStrokeColor","gradientStrokeWidth","gradientThickness","gridAlign","labelOffset","padding","rowPadding","strokeColor","symbolFillColor","symbolOffset","symbolOpacity","symbolSize","symbolStrokeColor","symbolStrokeWidth","symbolType","VG_LEGEND_PROPERTY_INDEX","LEGEND_PROPERTIES","VG_LEGEND_PROPERTIES","ScaleType","LINEAR","LOG","POW","SQRT","SYMLOG","TIME","QUANTILE","QUANTIZE","THRESHOLD","BIN_ORDINAL","BAND","SCALE_CATEGORY_INDEX","linear","log","pow","sqrt","symlog","bin-ordinal","quantile","quantize","threshold","SCALE_TYPES","scaleCompatible","scaleType1","scaleType2","scaleCategory1","scaleCategory2","SCALE_PRECEDENCE_INDEX","scaleTypePrecedence","CONTINUOUS_TO_CONTINUOUS_SCALES","CONTINUOUS_TO_CONTINUOUS_INDEX","CONTINUOUS_TO_DISCRETE_SCALES","CONTINUOUS_TO_DISCRETE_INDEX","CONTINUOUS_DOMAIN_SCALES","CONTINUOUS_DOMAIN_INDEX","DISCRETE_DOMAIN_SCALES","DISCRETE_DOMAIN_INDEX","TIME_SCALE_TYPES","hasDiscreteDomain","hasContinuousDomain","isContinuousToContinuous","isContinuousToDiscrete","defaultScaleConfig","textXRangeStep","rangeStep","pointPadding","barBandPaddingInner","rectBandPaddingInner","minBandSize","minFontSize","maxFontSize","minOpacity","maxOpacity","minSize","minStrokeWidth","maxStrokeWidth","quantileCount","quantizeCount","isExtendedScheme","scheme","isSelectionDomain","SCALE_PROPERTY_INDEX","range","reverse","round","clamp","nice","base","exponent","constant","zero","paddingInner","paddingOuter","SCALE_PROPERTIES","scale_type","scale_domain","scale_range","scale_rangeStep","scale_scheme","NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX","NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES","SCALE_TYPE_INDEX","fieldDefType","generateScaleTypeIndexKey","channelSupportScaleType","scaleTypeSupportDataType","generateScaleTypeIndex","scaleTypeSupportProperty","channelScalePropertyIncompatability","specifiedType","getSupportedScaleType","SELECTION_ID","extractTitleConfig","titleConfig","anchor","frame","titleMarkConfig","nonMark","defaultViewConfig","width","height","isVgScheme","rangeConfig","config_defaultConfig","timeFormat","invalidValues","view","axisX","axisY","axisLeft","axisRight","axisTop","axisBottom","axisBand","single","on","fields","resolve","empty","multi","toggle","interval","encodings","translate","zoom","initConfig","MARK_STYLES","VL_ONLY_CONFIG_PROPERTIES","VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX","stripAndRedirectConfig","markType","vlOnlyMarkSpecificConfigs","redirectConfig","toProp","compositeMarkPart","propConfig","isUrlData","data","isInlineData","isNamedData","MAIN","RAW","HEADER_TITLE_PROPERTIES_MAP","titleAnchor","HEADER_LABEL_PROPERTIES_MAP","HEADER_TITLE_PROPERTIES","HEADER_LABEL_PROPERTIES","isConcatSpec","isVConcatSpec","isHConcatSpec","isLayerSpec","isRepeatSpec","map_SpecMapper","params","mapFacet","mapRepeat","mapHConcat","mapVConcat","mapLayerOrUnit","mapLayer","mapUnit","subspec","hconcat","vconcat","STACK_OFFSET_INDEX","isStackOffset","s","STACKABLE_MARKS","STACK_BY_DEFAULT_MARKS","stack_stack","stackConfig","fieldChannel","xDef","yDef","stack","potentialStackedChannel","stackedFieldDef","stackedField","dimensionChannel","dimensionDef","dimensionField","stackBy","sc","cDef","groupbyChannel","impute","dropLineAndPoint","_point","_line","dropLineAndPointFromConfig","getPointOverlay","markConfig","getLineOverlay","pathoverlay_PathOverlayNormalizer","pointOverlay","lineOverlay","stackProps","overlayEncoding","stackFieldChannel","filled","ruleforrangedline_RuleForRangedLineNormalizer","mergeEncoding","parentEncoding","overriden","merged","mergeProjection","normalize_normalize","normalize_normalizer","normalizeGenericSpec","super","nonFacetUnitNormalizers","hasRow","hasColumn","mapFacetedUnit","mapUnitWithParentEncodingOrProjection","normalizeLayerOrUnit","bind","unitNormalizer","hasMatchingType","mergedProjection","mergedEncoding","facet","otherParams","rest","DEFAULT_SORT_OP","isSortByEncoding","isSortField","isSortArray","isFieldEqualPredicate","predicate","equal","isFieldLTPredicate","lt","isFieldLTEPredicate","lte","isFieldGTPredicate","gt","isFieldGTEPredicate","gte","isFieldRangePredicate","isFieldOneOfPredicate","oneOf","in","isFieldPredicate","predicateValueExpr","fieldFilterExpression","useInRange","vals","predicateValuesExpr","isFieldValidPredicate","lower","upper","exprs","normalizePredicate","isFilter","isImputeSequence","isLookup","isSample","isWindow","isJoinAggregate","isFlatten","isCalculate","isBin","isImpute","transform_isTimeUnit","transform_isAggregate","isStack","isFold","normalizeTransform","logical","DEFAULT_REQUIRED_CHANNEL_MAP","DEFAULT_SUPPORTED_CHANNEL_TYPE","getEncodingMappingError","requiredChannelMap","supportedChannelMap","requiredChannels","supportedChannels","i","_normalizeAutoSize","autosize","TOP_LEVEL_PROPERTIES","extractTopLevelProperties","DEFAULT_SPACING","isSignalRef","isVgRangeStep","isDataRefDomain","VG_MARK_CONFIGS","strokeCap","strokeDash","strokeDashOffset","strokeJoin","strokeMiterLimit","align","baseline","dir","dx","dy","ellipsis","limit","radius","theta","angle","font","fontSize","fontWeight","fontStyle","cursor","assembleAxis","axisCmpt","kind","combine","propType","mainExtracted","hasAxisPart","titleString","assembleTitle","getStyles","getMarkConfig","skipGeneralMarkConfig","getStyleConfig","styleConfigIndex","styles","styleConfig","formatSignalRef","specifiedFormat","numberFormat","binFormatExpression","formatExpr","timeFormatExpression","numberFormatExpr","startField","endField","rawTimeFormat","alwaysReturn","sortParams","orderDef","fieldRefOption","orderChannelDef","mergeTitleFieldDefs","f1","f2","fdToMerge","fieldDef1","mergeTitle","title1","title2","mergeTitleComponent","explicit","dataflow_DataFlowNode","parent","debugName","_children","_parent","_hash","Set","addChild","children","child","loc","splice","oldChild","removeChild","other","newParent","OutputNode","source","refCounts","_source","_name","cloneObj","constructor","getDependentFields","ast","vega_expression","dependents","visit","node","startsWithDatum","object","add","getName","slice","calculate_CalculateNode","_dependentFields","model","forEachFieldDef","sortValue","sortArrayIndexField","HEADER_CHANNELS","HEADER_TYPES","assembleTitleGroup","component","layoutHeaders","facetFieldDef","role","getHeaderProperties","assembleHeaderGroups","layoutHeader","groups","headerType","headerCmpt","assembleHeaderGroup","getSort","update","axes","hasAxes","sizeChannel","from","sizeSignal","properties","propertiesMap","props","assembleLayoutSignals","sizeSignals","sizeType","layoutSize","get","getSizeSignalRef","scaleComponent","getScaleComponent","scaleName","isFacetModel","stepSignal","sizeExpr","cardinality","timeunit_TimeUnitNode","formula","reduceFieldDef","timeUnitComponent","transforms_scales","has","selCmpt","parse","selDef","bound","scales","project","set","repeater","topLevelSignals","signals","channelSignals","channelSignalName","namedSg","VL_SELECTION_RESOLVE","cs","scales_domain","TUPLE_FIELDS","SCALE_TRIGGER","selection_interval","fieldsSg","TUPLE","hasScales","dataSignals","scaleTriggers","filterExpr","interval_events","evt","filters","between","idx","vname","dname","scaled","coord","events","assembleInit","interval_channelSignals","scaleStr","toNum","selection_unitName","modifyExpr","marks","xi","yi","positionalProjections","store","STORE","group","test","vgStroke","k","enter","cb","singleOrMultiSignals","proj","datum","force","insert","selection_multi","selection_single","transforms_nearest","nearest","cellDef","isVoronoi","exists","ANCHOR","DELTA","vega_event_selector","e","markname","onDelta","delta","sizeSg","scaleCmpt","zoom_ANCHOR","zoom_DELTA","sx","sy","zoom_onDelta","compilers","parseInit","isIntervalSelection","tpl","inputs","sgname","forEachTransform","MODIFY","SELECTION_DOMAIN","assembleUnitSelectionMarks","forEachSelection","selCompiler","txCompiler","selectionPredicate","selections","dfnode","stores","predicateStr","getSelectionComponent","raw","tunode","clone","insertAsParentOf","hasOwnProperty","sel","compiler","facetModel","getFacetModel","requiresSelectionId","identifier","some","sgNames","_signalNames","basename","counter","wrap","predicate_expression","filterOp","isSelectionPredicate","getOffset","markDefOffsetValue","valueref_bin","side","valueref_fieldRef","mixins","ref","bandRef","binMidSignal","fieldDef2","midPoint","channel2Def","defaultRef","channel2","tooltipForEncoding","keyValues","usedKey","mainChannel","valueref_text","mid","sizeRef","mult","getDefaultRef","domains","domainDefinitelyIncludeZero","isVisible","mixins_color","configValue","transparentIfNeeded","defaultFill","defaultStroke","colorVgChannel","fillStrokeMarkDefAndConfig","nonPosition","defaultValue","vgChannel","baseEncodeEntry","ignore","markDefProperties","wrapInvalid","wrapCondition","tooltipRefFromChannelDef","markTooltip","mixins_text","valueRef","validPredicate","invalid","filterIndex","aggregator","defined","refFn","conditionValueRef","centeredBandPositionMixins","centeredBandPosition","defaultPosRef","defaultSizeRef","centerChannel","pointPosition","binPosition","spacing","pointPosition2","baseChannel","aFieldDef","a2fieldDef","position2","guideEncodeEntry","valueDef","defaultScaleResolve","isLayerModel","isConcatModel","isRepeatModel","parseGuideResolve","channelScaleResolve","split_Split","implicit","val","getWithExplicit","setWithExplicit","makeExplicit","makeImplicit","tieBreakByComparing","compare","diff","defaultTieBreaker","mergeValuesWithExplicit","tieBreaker","component_LegendComponent","properties_type","properties_defaultType","legendConfig","legendType","defaultDirection","gradientLengthSignal","encode_type","legendCmp","symbols","symbolsSpec","out","propsList","applyMarkConfig","getMaxValue","getFirstConditionValue","gradient","gradientSpec","labelsSpec","getConditionValue","conditionalDef","reducer","parseLegend","isUnitModel","legends","legendComponent","legendCmpt","getLegendDefWithScale","getProperty","isExplicit","legendEncoding","legendEncode","legendEncodingPart","encode_namespaceObject","parseLegendForChannel","parseUnitLegend","mergeLegendComponent","parseNonUnitLegend","defaultLabelOverlap","defaultGradientLength","properties_values","mergedLegend","childLegend","mergedOrient","childOrient","typeMerged","mergedValueWithExplicit","assembleLegends","legendComponentIndex","legendByDomain","domainHash","mergedLegendComponent","assembleProjections","projections","assembleProjectionForModel","assembleProjectionsForModelAndChildren","fit","sources","lookupDataSource","PROJECTION_PROPERTIES","component_ProjectionComponent","specifiedProjection","parseProjection","hasProjection","posssiblePair","requestDataName","projectionName","parseUnitProjection","nonUnitProjection","mergable","merge","first","second","allPropertiesShared","mergeIfNoConflict","modelProjection","renameProjection","parseNonUnitProjections","checkLinks","nodes","error","source_SourceNode","_data","url","defaultExtension","exec","dataName","OptimizerBase","_mutated","mutatedFlag","optimizer_BottomUpOptimizer","_continue","continueFlag","flags","setContinue","setMutated","next","optimizeNextFromLeaves","TopDownOptimizer","aggregate_AggregateNode","dimensions","measures","groupBy","isAggregate","fd","meas","dims","scaleDomain","addDimension","parentMeasures","childMeasures","ops","mergeMeasures","debug","alias","facet_FacetNode","sortField","sortIndexField","childModel","childIndependentFieldsWithStep","childScaleComponent","getFieldFromDomain","assembleDomain","crossedDataName","childChannel","getChildIndependentFieldsWithStep","assembleRowColumnData","formatparse_ParseNode","_parse","ancestorParse","makeWithAncestors","mainFieldDef","parsedAs","copyAll","parseNothing","formatParse","onlyNested","parseExpression","joinaggregate_JoinAggregateTransformNode","w","getDefaultName","joinAggregateFieldDef","stack_StackNode","_stack","stackTransform","sortFields","sortOrder","normalizedAs","every","isValidAsArray","stackField","facetby","stackProperties","dimensionFieldDef","stackby","by","_field","getStackByFields","getGroupbyFields","method","window_WindowTransformNode","window","windowFieldDef","param","ignorePeers","optimizers_MoveParseUp","numChildren","producedFields","dependentFields","swapWithParent","optimizers_MergeIdenticalNodes","mergedNode","shift","hashes","hash","buckets","mergeNodes","optimizers_RemoveUnusedSubtrees","optimizers_RemoveDuplicateTimeUnits","pfields","moveFacetDown","facetMain","main","moveMainDownToFacet","cloner","copy","newName","FACET_SCALE_PREFIX","getSource","setSource","outputNodes","addDimensions","n","optimizers_RemoveUnnecessaryNodes","isRequired","optimizers_MergeParse","parseChildren","commonParse","parseNode","mergedParseNode","optimizers_MergeAggregateNodes","aggChildren","groupedAggregates","agg","groupBys","mergeableAggs","mergedAggs","pop","MAX_OPTIMIZATION_RUNS","getLeaves","roots","leaves","append","isTrue","runOptimizer","optimizer","flag","optimizerInstance","optimizationDataflowHelper","dataComponent","parseScaleDomain","specifiedScales","localScaleComponents","specifiedScale","specifiedDomain","scaleConfig","reason","canUseUnaggregatedDomain","useUnaggregatedDomain","normalizeUnaggregatedDomain","parseSingleChannelDomain","parseDomainForChannel","localScaleCmpt","isFaceted","facetParent","parseUnitScaleDomain","domainRaw","childComponent","dr","parseNonUnitScaleDomain","mapDomainToDataSignal","isStacked","normalizeSortField","domainSort","signalName","isDataRefUnionedDomain","nonUnionDomain","isFieldRefUnionDomain","uniqueDomains","_s","sorts","simpleSorts","allData","mergeDomains","assembleScalesForModel","_r","otherScaleProps","scaleRange","assembleScaleRange","isRawSelectionDomain","selDomain","selectionScaleDomain","component_ScaleComponent","typeWithExplicit","SignalRefWrapper","exprGenerator","rename","RANGE_PROPERTIES","getSizeType","parseUnitScaleRange","mergedScaleCmpt","sizeSpecified","xyRangeSteps","steps","getRangeStep","getXYRangeStep","rangeWithExplicit","getSignalName","noRangeStep","supportedByScaleType","channelIncompatability","parseScheme","fromName","rangeMin","sizeRangeMin","rangeMax","maxBandSize","minXYRangeStep","maxSize","pointStep","MAX_SIZE_RANGE_STEP_RATIO","sizeRangeMax","rMax","interpolateRange","defaultContinuousToDiscreteCount","defaultRange","parseRangeForChannel","binSignal","binCount","Infinity","parseScaleProperty","specifiedValue","sType","copyKeyFromObject","scalePadding","scalePaddingInner","properties_bins","properties_interpolate","barConfig","continuousPadding","properties_padding","paddingValue","bandPaddingInner","properties_paddingInner","paddingInnerValue","bandPaddingOuter","barBandPaddingOuter","rectBandPaddingOuter","properties_paddingOuter","properties_reverse","properties_zero","getDefaultValue","parseUnitScaleProperty","parseNonUnitScaleProperty","parseScaleRange","valueWithExplicit","type_scaleType","type_defaultType","parseScaleCore","scaleComponents","parseUnitScaleCore","scaleTypeWithExplicitIndex","explicitScaleType","childScaleType","scaleTypeTieBreaker","childScale","renameScale","parseNonUnitScaleCore","st1","st2","NameMap","nameMap","oldName","model_Model","parentGivenName","correctDataNames","scaleNameMap","projectionNameMap","signalNameMap","description","transforms","layout","bounds","extractCompositionLayout","outputNodeRefCounts","parseScale","parseLayoutSize","renameTopLevelLayoutSizeSignal","parseSelection","parseData","parseAxisAndHeader","parseMarkGroup","renameSignal","baseView","isTopLevel","encodeEntry","assembleEncodeFromView","assembleDefaultLayout","headerMarks","axisComponents","assembleAxes","titleNoEncoding","assembleSelectionSignals","assembleLayout","assembleHeaderMarks","assembleMarks","assembleScales","hasDescendantWithFieldOnChannel","fullName","oldSignalName","originalScaleName","localScaleComponent","variableName","origName","model_ModelWithField","getMapping","acc","cd","createBinComponent","isBinTransform","normalizedBin","binKey","extentSignal","getSignalsFromModel","binComponent","bin_BinNode","binComponentIndex","formulaAs","rangeFormula","binTrans","filter_FilterNode","flatten_FlattenTransformNode","flatten","fold_FoldTransformNode","specifiedAs","fold","geojson_GeoJSONNode","geoJsonCounter","coordinates","pair","geopoint_GeoPointNode","identifier_IdentifierNode","sizeConfig","discreteBandSize","point_encodeEntry","fixedShape","shapeMixins","defaultSize","bandSize","markCompiler","vgMark","sizeDef","x2Def","xScaleName","xScale","xScaleType","bar_x","y2Def","yScaleName","yScale","yScaleType","bar_y","postEncodingTransform","shapeDef","rect_x","rect_y","valueIfDefined","text_align","vgSizeChannel","vgThicknessChannel","details","pathGroupingFields","pathMarks","getMarkGroups","fromPrefix","FACETED_PATH_PREFIX","parsePathMark","scaleClip","dimensionChannelDef","mark_getSort","impute_ImputeNode","keyvals","start","stop","imputeTransform","imputedChannel","keyChannel","groupbyFields","initialImpute","processSequence","setImputedField","data_AncestorParse","lookup_LookupNode","secondary","fromSource","findSource","fromOutputName","fromOutputNode","Array","foreign","asName","lookup","default","sample_SampleTransformNode","sample","makeWalkTree","datasetIndex","walkTree","dataSource","assembleFormatParse","assembleTransforms","assemble","parseLayerLayoutSize","parseChildrenLayoutSize","layoutSizeCmpt","parseNonUnitLayoutSizeForChannel","parseRepeatLayoutSize","mergedSize","childSize","scaleResolve","defaultUnitSize","replaceRepeat","repeat","replaceRepeaterInFieldDef","replaceRepeaterInChannelDef","replaceRepeater","facetSortFieldName","facet_FacetModel","buildModel","replaceRepeaterInFacet","initFacet","normalizedFacet","parseHeader","mergeChildAxis","makeHeaderComponent","headerChannel","axisComponent","mainAxis","assembleSelectionTopLevelSignals","assembleSelectionData","layoutMixins","layoutHeaderComponent","headerComponent","bandType","columnDistinctSignal","getHeaderLayoutMixins","assembleGroup","facetRoot","getCardinalityAggregateForChild","outputName","cross","root","assembleFacetData","assembleGroupEncodeEntry","assembleGroupStyle","assembleFacet","headerSortFields","headerSortOrder","assembleFacetSignals","otherData","srcVals","otherVals","head","existingSource","parseRoot","parentIsLayer","makeFromEncoding","lookupCounter","transformNode","derivedType","makeImplicitFromFilterTransform","makeFromTransform","make","parseTransformArray","makeImplicitFromEncoding","parseAll","parseAllForSortIndex","rawName","mainName","facetName","makeJoinAggregateFromFacet","baseconcat_BaseConcatModel","sg","db","concat_ConcatModel","isVConcat","sizeTypeToMerge","parseConcatLayoutSize","component_AxisComponent","getAxisConfig","configTypes","configType","properties_orient","OPPOSITE_ORIENT","bottom","top","left","right","mergeAxisComponents","mergedAxisCmpts","childAxisCmpts","mergeAxisComponent","getFieldDefTitle","parseAxis","specifiedAxis","properties_labelAngle","gridChannel","defaultGrid","axisOrient","defaultLabelAlign","defaultLabelBaseline","defaultLabelFlush","properties_defaultLabelOverlap","defaultTickCount","axis_properties_values","parse_getProperty","parse_isExplicit","axisEncoding","axisEncode","axisEncodingPart","specifiedLabelsSpec","encode_labels","normalizeMarkDef","specifiedOrient","xIsContinuous","yIsContinuous","xIsTemporal","yIsTemporal","init_orient","init_opacity","filledConfig","init_filled","unit_UnitModel","parentGivenSize","specifiedAxes","specifiedLegends","initSize","replaceRepeaterInEncoding","initScales","initAxes","initLegend","isGeoShapeMark","hasGeoPosition","_axis","axisSpec","_legend","layoutSizeComponent","parseUnitLayoutSize","selDefs","selCmpts","selectionConfig","cfg","parseUnitSelection","hasSelections","assembleTopLevelSignals","assembleUnitSelectionData","excludeConfig","excludeData","layer_LayerModel","axisCount","oppositeOrient","parseLayerAxis","assembleLayerSelectionMarks","repeat_RepeatModel","repeatValues","_initChildren","rowField","columnField","childRepeat","unitSize","compile","inputSpec","newLogger","logger","topLevelAutosize","configAutosize","isUnitOrLayer","normalizeAutoSize","firstPassCounter","secondPassCounter","optimizeDataflow","topLevelProperties","datasets","usermeta","vgConfig","sourceIndex","hasName","newData","whereTo","assembleRootData","layoutSignals","$schema","assembleTopLevelModel","topLevelSpec","getTopLevelProperties","extractor","oldTransforms","extractTransforms","__webpack_require__","__webpack_exports__","version","aggregate_namespaceObject","axis_namespaceObject","bin_namespaceObject","channel_namespaceObject","compositemark_namespaceObject","config_namespaceObject","data_namespaceObject","datetime_namespaceObject","encoding_namespaceObject","fielddef_namespaceObject","header_namespaceObject","legend_namespaceObject","mark_namespaceObject","scale_namespaceObject","sort_namespaceObject","spec_namespaceObject","stack_namespaceObject","timeunit_namespaceObject","transform_namespaceObject","type_namespaceObject","validate_namespaceObject","build_package","isLogicalOr","or","isLogicalAnd","and","isLogicalNot","not","forEachLeaf","subop","normalizeLogicalOperand","deepEqual","duplicate","pick","omit","contains","without","union","mergeDeep","unique","isEqual","setEqual","hasIntersection","prefixGenerator","fieldIntersection","isNumeric","differArray","keys","entries","flagKeys","isBoolean","varName","logicalExpr","deleteNestedProperty","titlecase","accessPathWithDatum","flatAccessWithDatum","replacePathInField","removePathFromField","accessPathDepth","getFirstDefined","uniqueId","resetIdCounter","internalField","isInternalField","clone__WEBPACK_IMPORTED_MODULE_0__","clone__WEBPACK_IMPORTED_MODULE_0___default","fast_deep_equal__WEBPACK_IMPORTED_MODULE_1__","fast_deep_equal__WEBPACK_IMPORTED_MODULE_1___default","fast_json_stable_stringify__WEBPACK_IMPORTED_MODULE_2__","fast_json_stable_stringify__WEBPACK_IMPORTED_MODULE_2___default","vega_util__WEBPACK_IMPORTED_MODULE_3__","_logical__WEBPACK_IMPORTED_MODULE_4__","obj","prototype","h","charCodeAt","array","item","excludedItems","arrays","len","dest","src","deepMerge_","results","u","dict","dictKeys","otherKeys","b","prefixes","wrappedWithAccessors","num","isNaN","_vals","_entries","alphanumericS","match","orderedProps","path","pieces","args","arg","idCounter","id"],"mappings":"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","file":"vega-lite.js","sourcesContent":["import { toSet } from 'vega-util';\nimport { contains, flagKeys } from './util';\nconst AGGREGATE_OP_INDEX = {\n    argmax: 1,\n    argmin: 1,\n    average: 1,\n    count: 1,\n    distinct: 1,\n    max: 1,\n    mean: 1,\n    median: 1,\n    min: 1,\n    missing: 1,\n    q1: 1,\n    q3: 1,\n    ci0: 1,\n    ci1: 1,\n    stderr: 1,\n    stdev: 1,\n    stdevp: 1,\n    sum: 1,\n    valid: 1,\n    values: 1,\n    variance: 1,\n    variancep: 1\n};\nexport const AGGREGATE_OPS = flagKeys(AGGREGATE_OP_INDEX);\nexport function isAggregateOp(a) {\n    return !!AGGREGATE_OP_INDEX[a];\n}\nexport const COUNTING_OPS = ['count', 'valid', 'missing', 'distinct'];\nexport function isCountingAggregateOp(aggregate) {\n    return aggregate && contains(COUNTING_OPS, aggregate);\n}\nexport function isMinMaxOp(aggregate) {\n    return aggregate && contains(['min', 'max'], aggregate);\n}\n/** Additive-based aggregation operations.  These can be applied to stack. */\nexport const SUM_OPS = ['count', 'sum', 'distinct', 'valid', 'missing'];\n/**\n * Aggregation operators that always produce values within the range [domainMin, domainMax].\n */\nexport const SHARED_DOMAIN_OPS = ['mean', 'average', 'median', 'q1', 'q3', 'min', 'max'];\nexport const SHARED_DOMAIN_OP_INDEX = toSet(SHARED_DOMAIN_OPS);\n//# sourceMappingURL=aggregate.js.map","import { flagKeys } from './util';\nexport const AXIS_PARTS = ['domain', 'grid', 'labels', 'ticks', 'title'];\n/**\n * A dictionary listing whether a certain axis property is applicable for only main axes or only grid axes.\n * (Properties not listed are applicable for both)\n */\nexport const AXIS_PROPERTY_TYPE = {\n    grid: 'grid',\n    gridColor: 'grid',\n    gridDash: 'grid',\n    gridOpacity: 'grid',\n    gridScale: 'grid',\n    gridWidth: 'grid',\n    orient: 'main',\n    bandPosition: 'both',\n    domain: 'main',\n    domainColor: 'main',\n    domainOpacity: 'main',\n    domainWidth: 'main',\n    format: 'main',\n    labelAlign: 'main',\n    labelAngle: 'main',\n    labelBaseline: 'main',\n    labelBound: 'main',\n    labelColor: 'main',\n    labelFlush: 'main',\n    labelFlushOffset: 'main',\n    labelFont: 'main',\n    labelFontSize: 'main',\n    labelFontWeight: 'main',\n    labelLimit: 'main',\n    labelOpacity: 'main',\n    labelOverlap: 'main',\n    labelPadding: 'main',\n    labels: 'main',\n    maxExtent: 'main',\n    minExtent: 'main',\n    offset: 'main',\n    position: 'main',\n    tickColor: 'main',\n    tickExtra: 'main',\n    tickOffset: 'both',\n    tickOpacity: 'main',\n    tickRound: 'main',\n    ticks: 'main',\n    tickSize: 'main',\n    title: 'main',\n    titleAlign: 'main',\n    titleAngle: 'main',\n    titleBaseline: 'main',\n    titleColor: 'main',\n    titleFont: 'main',\n    titleFontSize: 'main',\n    titleFontWeight: 'main',\n    titleLimit: 'main',\n    titleOpacity: 'main',\n    titlePadding: 'main',\n    titleX: 'main',\n    titleY: 'main',\n    tickWidth: 'both',\n    tickCount: 'both',\n    values: 'both',\n    scale: 'both',\n    zindex: 'both' // this is actually set afterward, so it doesn't matter\n};\nconst COMMON_AXIS_PROPERTIES_INDEX = {\n    orient: 1,\n    bandPosition: 1,\n    domain: 1,\n    domainColor: 1,\n    domainOpacity: 1,\n    domainWidth: 1,\n    format: 1,\n    grid: 1,\n    gridColor: 1,\n    gridDash: 1,\n    gridOpacity: 1,\n    gridWidth: 1,\n    labelAlign: 1,\n    labelAngle: 1,\n    labelBaseline: 1,\n    labelBound: 1,\n    labelColor: 1,\n    labelFlush: 1,\n    labelFlushOffset: 1,\n    labelFont: 1,\n    labelFontSize: 1,\n    labelFontStyle: 1,\n    labelFontWeight: 1,\n    labelLimit: 1,\n    labelOpacity: 1,\n    labelOverlap: 1,\n    labelPadding: 1,\n    labels: 1,\n    labelSeparation: 1,\n    maxExtent: 1,\n    minExtent: 1,\n    offset: 1,\n    position: 1,\n    tickColor: 1,\n    tickCount: 1,\n    tickExtra: 1,\n    tickMinStep: 1,\n    tickOffset: 1,\n    tickOpacity: 1,\n    tickRound: 1,\n    ticks: 1,\n    tickSize: 1,\n    tickWidth: 1,\n    title: 1,\n    titleAlign: 1,\n    titleAngle: 1,\n    titleBaseline: 1,\n    titleColor: 1,\n    titleFont: 1,\n    titleFontSize: 1,\n    titleFontStyle: 1,\n    titleFontWeight: 1,\n    titleLimit: 1,\n    titleOpacity: 1,\n    titlePadding: 1,\n    titleX: 1,\n    titleY: 1,\n    values: 1,\n    zindex: 1\n};\nconst AXIS_PROPERTIES_INDEX = Object.assign({}, COMMON_AXIS_PROPERTIES_INDEX, { encoding: 1 });\nconst VG_AXIS_PROPERTIES_INDEX = Object.assign({ gridScale: 1, scale: 1 }, COMMON_AXIS_PROPERTIES_INDEX, { encode: 1 });\nexport function isAxisProperty(prop) {\n    return !!AXIS_PROPERTIES_INDEX[prop];\n}\nexport const VG_AXIS_PROPERTIES = flagKeys(VG_AXIS_PROPERTIES_INDEX);\n// Export for dependent projects\nexport const AXIS_PROPERTIES = flagKeys(AXIS_PROPERTIES_INDEX);\n//# sourceMappingURL=axis.js.map","/*\n * Constants and utilities for encoding channels (Visual variables)\n * such as 'x', 'y', 'color'.\n */\nimport * as tslib_1 from \"tslib\";\nimport { flagKeys } from './util';\nexport var Channel;\n(function (Channel) {\n    // Facet\n    Channel.ROW = 'row';\n    Channel.COLUMN = 'column';\n    // Position\n    Channel.X = 'x';\n    Channel.Y = 'y';\n    Channel.X2 = 'x2';\n    Channel.Y2 = 'y2';\n    // Geo Position\n    Channel.LATITUDE = 'latitude';\n    Channel.LONGITUDE = 'longitude';\n    Channel.LATITUDE2 = 'latitude2';\n    Channel.LONGITUDE2 = 'longitude2';\n    // Mark property with scale\n    Channel.COLOR = 'color';\n    Channel.FILL = 'fill';\n    Channel.STROKE = 'stroke';\n    Channel.SHAPE = 'shape';\n    Channel.SIZE = 'size';\n    Channel.OPACITY = 'opacity';\n    Channel.FILLOPACITY = 'fillOpacity';\n    Channel.STROKEOPACITY = 'strokeOpacity';\n    Channel.STROKEWIDTH = 'strokeWidth';\n    // Non-scale channel\n    Channel.TEXT = 'text';\n    Channel.ORDER = 'order';\n    Channel.DETAIL = 'detail';\n    Channel.KEY = 'key';\n    Channel.TOOLTIP = 'tooltip';\n    Channel.HREF = 'href';\n})(Channel || (Channel = {}));\nexport const X = Channel.X;\nexport const Y = Channel.Y;\nexport const X2 = Channel.X2;\nexport const Y2 = Channel.Y2;\nexport const LATITUDE = Channel.LATITUDE;\nexport const LATITUDE2 = Channel.LATITUDE2;\nexport const LONGITUDE = Channel.LONGITUDE;\nexport const LONGITUDE2 = Channel.LONGITUDE2;\nexport const ROW = Channel.ROW;\nexport const COLUMN = Channel.COLUMN;\nexport const SHAPE = Channel.SHAPE;\nexport const SIZE = Channel.SIZE;\nexport const COLOR = Channel.COLOR;\nexport const FILL = Channel.FILL;\nexport const STROKE = Channel.STROKE;\nexport const TEXT = Channel.TEXT;\nexport const DETAIL = Channel.DETAIL;\nexport const KEY = Channel.KEY;\nexport const ORDER = Channel.ORDER;\nexport const OPACITY = Channel.OPACITY;\nexport const FILLOPACITY = Channel.FILLOPACITY;\nexport const STROKEOPACITY = Channel.STROKEOPACITY;\nexport const STROKEWIDTH = Channel.STROKEWIDTH;\nexport const TOOLTIP = Channel.TOOLTIP;\nexport const HREF = Channel.HREF;\nexport const GEOPOSITION_CHANNEL_INDEX = {\n    longitude: 1,\n    longitude2: 1,\n    latitude: 1,\n    latitude2: 1\n};\nexport const GEOPOSITION_CHANNELS = flagKeys(GEOPOSITION_CHANNEL_INDEX);\nconst UNIT_CHANNEL_INDEX = Object.assign({ \n    // position\n    x: 1, y: 1, x2: 1, y2: 1 }, GEOPOSITION_CHANNEL_INDEX, { \n    // color\n    color: 1, fill: 1, stroke: 1, \n    // other non-position with scale\n    opacity: 1, fillOpacity: 1, strokeOpacity: 1, strokeWidth: 1, size: 1, shape: 1, \n    // channels without scales\n    order: 1, text: 1, detail: 1, key: 1, tooltip: 1, href: 1 });\nexport function isColorChannel(channel) {\n    return channel === 'color' || channel === 'fill' || channel === 'stroke';\n}\nconst FACET_CHANNEL_INDEX = {\n    row: 1,\n    column: 1\n};\nexport const FACET_CHANNELS = flagKeys(FACET_CHANNEL_INDEX);\nconst CHANNEL_INDEX = Object.assign({}, UNIT_CHANNEL_INDEX, FACET_CHANNEL_INDEX);\nexport const CHANNELS = flagKeys(CHANNEL_INDEX);\nconst { order: _o, detail: _d } = CHANNEL_INDEX, SINGLE_DEF_CHANNEL_INDEX = tslib_1.__rest(CHANNEL_INDEX, [\"order\", \"detail\"]);\n/**\n * Channels that cannot have an array of channelDef.\n * model.fieldDef, getFieldDef only work for these channels.\n *\n * (The only two channels that can have an array of channelDefs are \"detail\" and \"order\".\n * Since there can be multiple fieldDefs for detail and order, getFieldDef/model.fieldDef\n * are not applicable for them.  Similarly, selection projection won't work with \"detail\" and \"order\".)\n */\nexport const SINGLE_DEF_CHANNELS = flagKeys(SINGLE_DEF_CHANNEL_INDEX);\nexport function isChannel(str) {\n    return !!CHANNEL_INDEX[str];\n}\nexport function isSecondaryRangeChannel(c) {\n    const main = getMainRangeChannel(c);\n    return main !== c;\n}\nexport function getMainRangeChannel(channel) {\n    switch (channel) {\n        case 'x2':\n            return 'x';\n        case 'y2':\n            return 'y';\n        case 'latitude2':\n            return 'latitude';\n        case 'longitude2':\n            return 'longitude';\n    }\n    return channel;\n}\n// CHANNELS without COLUMN, ROW\nexport const UNIT_CHANNELS = flagKeys(UNIT_CHANNEL_INDEX);\n// NONPOSITION_CHANNELS = UNIT_CHANNELS without X, Y, X2, Y2;\nconst { x: _x, y: _y, \n// x2 and y2 share the same scale as x and y\nx2: _x2, y2: _y2, latitude: _latitude, longitude: _longitude, latitude2: _latitude2, longitude2: _longitude2 } = UNIT_CHANNEL_INDEX, \n// The rest of unit channels then have scale\nNONPOSITION_CHANNEL_INDEX = tslib_1.__rest(UNIT_CHANNEL_INDEX, [\"x\", \"y\", \"x2\", \"y2\", \"latitude\", \"longitude\", \"latitude2\", \"longitude2\"]);\nexport const NONPOSITION_CHANNELS = flagKeys(NONPOSITION_CHANNEL_INDEX);\n// POSITION_SCALE_CHANNELS = X and Y;\nconst POSITION_SCALE_CHANNEL_INDEX = { x: 1, y: 1 };\nexport const POSITION_SCALE_CHANNELS = flagKeys(POSITION_SCALE_CHANNEL_INDEX);\n// NON_POSITION_SCALE_CHANNEL = SCALE_CHANNELS without X, Y\nconst { \n// x2 and y2 share the same scale as x and y\n// text and tooltip have format instead of scale,\n// href has neither format, nor scale\ntext: _t, tooltip: _tt, href: _hr, \n// detail and order have no scale\ndetail: _dd, key: _k, order: _oo } = NONPOSITION_CHANNEL_INDEX, NONPOSITION_SCALE_CHANNEL_INDEX = tslib_1.__rest(NONPOSITION_CHANNEL_INDEX, [\"text\", \"tooltip\", \"href\", \"detail\", \"key\", \"order\"]);\nexport const NONPOSITION_SCALE_CHANNELS = flagKeys(NONPOSITION_SCALE_CHANNEL_INDEX);\nexport function isNonPositionScaleChannel(channel) {\n    return !!NONPOSITION_CHANNEL_INDEX[channel];\n}\n/**\n * @returns whether Vega supports legends for a particular channel\n */\nexport function supportLegend(channel) {\n    switch (channel) {\n        case COLOR:\n        case FILL:\n        case STROKE:\n        case SIZE:\n        case SHAPE:\n        case OPACITY:\n            return true;\n        case FILLOPACITY:\n        case STROKEOPACITY:\n        case STROKEWIDTH:\n            return false;\n    }\n}\n// Declare SCALE_CHANNEL_INDEX\nconst SCALE_CHANNEL_INDEX = Object.assign({}, POSITION_SCALE_CHANNEL_INDEX, NONPOSITION_SCALE_CHANNEL_INDEX);\n/** List of channels with scales */\nexport const SCALE_CHANNELS = flagKeys(SCALE_CHANNEL_INDEX);\nexport function isScaleChannel(channel) {\n    return !!SCALE_CHANNEL_INDEX[channel];\n}\n/**\n * Return whether a channel supports a particular mark type.\n * @param channel  channel name\n * @param mark the mark type\n * @return whether the mark supports the channel\n */\nexport function supportMark(channel, mark) {\n    return getSupportedMark(channel)[mark];\n}\n/**\n * Return a dictionary showing whether a channel supports mark type.\n * @param channel\n * @return A dictionary mapping mark types to 'always', 'binned', or undefined\n */\nfunction getSupportedMark(channel) {\n    switch (channel) {\n        case COLOR:\n        case FILL:\n        case STROKE:\n        case DETAIL:\n        case KEY:\n        case TOOLTIP:\n        case HREF:\n        case ORDER: // TODO: revise (order might not support rect, which is not stackable?)\n        case OPACITY:\n        case FILLOPACITY:\n        case STROKEOPACITY:\n        case STROKEWIDTH:\n        case ROW:\n        case COLUMN:\n            return {\n                // all marks\n                point: 'always',\n                tick: 'always',\n                rule: 'always',\n                circle: 'always',\n                square: 'always',\n                bar: 'always',\n                rect: 'always',\n                line: 'always',\n                trail: 'always',\n                area: 'always',\n                text: 'always',\n                geoshape: 'always'\n            };\n        case X:\n        case Y:\n        case LATITUDE:\n        case LONGITUDE:\n            return {\n                // all marks except geoshape. geoshape does not use X, Y -- it uses a projection\n                point: 'always',\n                tick: 'always',\n                rule: 'always',\n                circle: 'always',\n                square: 'always',\n                bar: 'always',\n                rect: 'always',\n                line: 'always',\n                trail: 'always',\n                area: 'always',\n                text: 'always'\n            };\n        case X2:\n        case Y2:\n        case LATITUDE2:\n        case LONGITUDE2:\n            return {\n                rule: 'always',\n                bar: 'always',\n                rect: 'always',\n                area: 'always',\n                circle: 'binned',\n                point: 'binned',\n                square: 'binned',\n                tick: 'binned'\n            };\n        case SIZE:\n            return {\n                point: 'always',\n                tick: 'always',\n                rule: 'always',\n                circle: 'always',\n                square: 'always',\n                bar: 'always',\n                text: 'always',\n                line: 'always',\n                trail: 'always'\n            };\n        case SHAPE:\n            return { point: 'always', geoshape: 'always' };\n        case TEXT:\n            return { text: 'always' };\n    }\n}\nexport function rangeType(channel) {\n    switch (channel) {\n        case X:\n        case Y:\n        case SIZE:\n        case STROKEWIDTH:\n        case OPACITY:\n        case FILLOPACITY:\n        case STROKEOPACITY:\n        // X2 and Y2 use X and Y scales, so they similarly have continuous range.\n        case X2:\n        case Y2:\n            return undefined;\n        case ROW:\n        case COLUMN:\n        case SHAPE:\n        // TEXT, TOOLTIP, and HREF have no scale but have discrete output\n        case TEXT:\n        case TOOLTIP:\n        case HREF:\n            return 'discrete';\n        // Color can be either continuous or discrete, depending on scale type.\n        case COLOR:\n        case FILL:\n        case STROKE:\n            return 'flexible';\n        // No scale, no range type.\n        case LATITUDE:\n        case LONGITUDE:\n        case LATITUDE2:\n        case LONGITUDE2:\n        case DETAIL:\n        case KEY:\n        case ORDER:\n            return undefined;\n    }\n    /* istanbul ignore next: should never reach here. */\n    throw new Error('rangeType not implemented for ' + channel);\n}\n//# sourceMappingURL=channel.js.map","/**\n * Vega-Lite's singleton logger utility.\n */\nimport { logger, Warn } from 'vega-util';\nimport { stringify } from './util';\n/**\n * Main (default) Vega Logger instance for Vega-Lite\n */\nconst main = logger(Warn);\nlet current = main;\n/**\n * Logger tool for checking if the code throws correct warning\n */\nexport class LocalLogger {\n    constructor() {\n        this.warns = [];\n        this.infos = [];\n        this.debugs = [];\n    }\n    level() {\n        return this;\n    }\n    warn(...args) {\n        this.warns.push(...args);\n        return this;\n    }\n    info(...args) {\n        this.infos.push(...args);\n        return this;\n    }\n    debug(...args) {\n        this.debugs.push(...args);\n        return this;\n    }\n}\nexport function wrap(f) {\n    return () => {\n        current = new LocalLogger();\n        f(current);\n        reset();\n    };\n}\n/**\n * Set the singleton logger to be a custom logger\n */\nexport function set(newLogger) {\n    current = newLogger;\n    return current;\n}\n/**\n * Reset the main logger to use the default Vega Logger\n */\nexport function reset() {\n    current = main;\n    return current;\n}\nexport function warn(..._) {\n    current.warn.apply(current, arguments);\n}\nexport function info(..._) {\n    current.info.apply(current, arguments);\n}\nexport function debug(..._) {\n    current.debug.apply(current, arguments);\n}\n/**\n * Collection of all Vega-Lite Error Messages\n */\nexport var message;\n(function (message) {\n    message.INVALID_SPEC = 'Invalid spec';\n    // FIT\n    message.FIT_NON_SINGLE = 'Autosize \"fit\" only works for single views and layered views.';\n    message.CANNOT_FIX_RANGE_STEP_WITH_FIT = 'Cannot use a fixed value of \"rangeStep\" when \"autosize\" is \"fit\".';\n    // SELECTION\n    function cannotProjectOnChannelWithoutField(channel) {\n        return `Cannot project a selection on encoding channel \"${channel}\", which has no field.`;\n    }\n    message.cannotProjectOnChannelWithoutField = cannotProjectOnChannelWithoutField;\n    function nearestNotSupportForContinuous(mark) {\n        return `The \"nearest\" transform is not supported for ${mark} marks.`;\n    }\n    message.nearestNotSupportForContinuous = nearestNotSupportForContinuous;\n    function selectionNotSupported(mark) {\n        return `Selection not supported for ${mark} yet`;\n    }\n    message.selectionNotSupported = selectionNotSupported;\n    function selectionNotFound(name) {\n        return `Cannot find a selection named \"${name}\"`;\n    }\n    message.selectionNotFound = selectionNotFound;\n    message.SCALE_BINDINGS_CONTINUOUS = 'Scale bindings are currently only supported for scales with unbinned, continuous domains.';\n    message.NO_INIT_SCALE_BINDINGS = 'Selections bound to scales cannot be separately initialized.';\n    // REPEAT\n    function noSuchRepeatedValue(field) {\n        return `Unknown repeated value \"${field}\".`;\n    }\n    message.noSuchRepeatedValue = noSuchRepeatedValue;\n    // CONCAT\n    message.CONCAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in concatenated views.';\n    // REPEAT\n    message.REPEAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in repeated views.';\n    // TITLE\n    function cannotSetTitleAnchor(type) {\n        return `Cannot set title \"anchor\" for a ${type} spec`;\n    }\n    message.cannotSetTitleAnchor = cannotSetTitleAnchor;\n    // DATA\n    function unrecognizedParse(p) {\n        return `Unrecognized parse \"${p}\".`;\n    }\n    message.unrecognizedParse = unrecognizedParse;\n    function differentParse(field, local, ancestor) {\n        return `An ancestor parsed field \"${field}\" as ${ancestor} but a child wants to parse the field as ${local}.`;\n    }\n    message.differentParse = differentParse;\n    // TRANSFORMS\n    function invalidTransformIgnored(transform) {\n        return `Ignoring an invalid transform: ${stringify(transform)}.`;\n    }\n    message.invalidTransformIgnored = invalidTransformIgnored;\n    message.NO_FIELDS_NEEDS_AS = 'If \"from.fields\" is not specified, \"as\" has to be a string that specifies the key to be used for the data from the secondary source.';\n    // ENCODING & FACET\n    function encodingOverridden(channels) {\n        return `Layer's shared ${channels.join(',')} channel ${channels.length === 1 ? 'is' : 'are'} overriden`;\n    }\n    message.encodingOverridden = encodingOverridden;\n    function projectionOverridden(opt) {\n        const { parentProjection, projection } = opt;\n        return `Layer's shared projection ${stringify(parentProjection)} is overridden by a child projection ${stringify(projection)}.`;\n    }\n    message.projectionOverridden = projectionOverridden;\n    function primitiveChannelDef(channel, type, value) {\n        return `Channel ${channel} is a ${type}. Converted to {value: ${stringify(value)}}.`;\n    }\n    message.primitiveChannelDef = primitiveChannelDef;\n    function invalidFieldType(type) {\n        return `Invalid field type \"${type}\"`;\n    }\n    message.invalidFieldType = invalidFieldType;\n    function nonZeroScaleUsedWithLengthMark(mark, channel, opt) {\n        const scaleText = opt.scaleType\n            ? `${opt.scaleType} scale`\n            : opt.zeroFalse\n                ? 'scale with zero=false'\n                : 'scale with custom domain that excludes zero';\n        return `A ${scaleText} is used to encode ${mark}'s ${channel}. This can be misleading as the ${channel === 'x' ? 'width' : 'height'} of the ${mark} can be arbitrary based on the scale domain. You may want to use point mark instead.`;\n    }\n    message.nonZeroScaleUsedWithLengthMark = nonZeroScaleUsedWithLengthMark;\n    function invalidFieldTypeForCountAggregate(type, aggregate) {\n        return `Invalid field type \"${type}\" for aggregate: \"${aggregate}\", using \"quantitative\" instead.`;\n    }\n    message.invalidFieldTypeForCountAggregate = invalidFieldTypeForCountAggregate;\n    function invalidAggregate(aggregate) {\n        return `Invalid aggregation operator \"${aggregate}\"`;\n    }\n    message.invalidAggregate = invalidAggregate;\n    function missingFieldType(channel, newType) {\n        return `Missing type for channel \"${channel}\", using \"${newType}\" instead.`;\n    }\n    message.missingFieldType = missingFieldType;\n    function droppingColor(type, opt) {\n        const { fill, stroke } = opt;\n        return (`Dropping color ${type} as the plot also has ` + (fill && stroke ? 'fill and stroke' : fill ? 'fill' : 'stroke'));\n    }\n    message.droppingColor = droppingColor;\n    function emptyFieldDef(fieldDef, channel) {\n        return `Dropping ${stringify(fieldDef)} from channel \"${channel}\" since it does not contain data field or value.`;\n    }\n    message.emptyFieldDef = emptyFieldDef;\n    function latLongDeprecated(channel, type, newChannel) {\n        return `${channel}-encoding with type ${type} is deprecated. Replacing with ${newChannel}-encoding.`;\n    }\n    message.latLongDeprecated = latLongDeprecated;\n    message.LINE_WITH_VARYING_SIZE = 'Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.';\n    function incompatibleChannel(channel, markOrFacet, when) {\n        return `${channel} dropped as it is incompatible with \"${markOrFacet}\"${when ? ` when ${when}` : ''}.`;\n    }\n    message.incompatibleChannel = incompatibleChannel;\n    function invalidEncodingChannel(channel) {\n        return `${channel}-encoding is dropped as ${channel} is not a valid encoding channel.`;\n    }\n    message.invalidEncodingChannel = invalidEncodingChannel;\n    function facetChannelShouldBeDiscrete(channel) {\n        return `${channel} encoding should be discrete (ordinal / nominal / binned).`;\n    }\n    message.facetChannelShouldBeDiscrete = facetChannelShouldBeDiscrete;\n    function discreteChannelCannotEncode(channel, type) {\n        return `Using discrete channel \"${channel}\" to encode \"${type}\" field can be misleading as it does not encode ${type === 'ordinal' ? 'order' : 'magnitude'}.`;\n    }\n    message.discreteChannelCannotEncode = discreteChannelCannotEncode;\n    // Mark\n    message.BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL = 'Bar mark should not be used with point scale when rangeStep is null. Please use band scale instead.';\n    function lineWithRange(hasX2, hasY2) {\n        const channels = hasX2 && hasY2 ? 'x2 and y2' : hasX2 ? 'x2' : 'y2';\n        return `Line mark is for continuous lines and thus cannot be used with ${channels}. We will use the rule mark (line segments) instead.`;\n    }\n    message.lineWithRange = lineWithRange;\n    function orientOverridden(original, actual) {\n        return `Specified orient \"${original}\" overridden with \"${actual}\"`;\n    }\n    message.orientOverridden = orientOverridden;\n    // SCALE\n    message.CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN = 'custom domain scale cannot be unioned with default field-based domain';\n    function cannotUseScalePropertyWithNonColor(prop) {\n        return `Cannot use the scale property \"${prop}\" with non-color channel.`;\n    }\n    message.cannotUseScalePropertyWithNonColor = cannotUseScalePropertyWithNonColor;\n    function unaggregateDomainHasNoEffectForRawField(fieldDef) {\n        return `Using unaggregated domain with raw field has no effect (${stringify(fieldDef)}).`;\n    }\n    message.unaggregateDomainHasNoEffectForRawField = unaggregateDomainHasNoEffectForRawField;\n    function unaggregateDomainWithNonSharedDomainOp(aggregate) {\n        return `Unaggregated domain not applicable for \"${aggregate}\" since it produces values outside the origin domain of the source data.`;\n    }\n    message.unaggregateDomainWithNonSharedDomainOp = unaggregateDomainWithNonSharedDomainOp;\n    function unaggregatedDomainWithLogScale(fieldDef) {\n        return `Unaggregated domain is currently unsupported for log scale (${stringify(fieldDef)}).`;\n    }\n    message.unaggregatedDomainWithLogScale = unaggregatedDomainWithLogScale;\n    function cannotApplySizeToNonOrientedMark(mark) {\n        return `Cannot apply size to non-oriented mark \"${mark}\".`;\n    }\n    message.cannotApplySizeToNonOrientedMark = cannotApplySizeToNonOrientedMark;\n    function rangeStepDropped(channel) {\n        return `rangeStep for \"${channel}\" is dropped as top-level ${channel === 'x' ? 'width' : 'height'} is provided.`;\n    }\n    message.rangeStepDropped = rangeStepDropped;\n    function scaleTypeNotWorkWithChannel(channel, scaleType, defaultScaleType) {\n        return `Channel \"${channel}\" does not work with \"${scaleType}\" scale. We are using \"${defaultScaleType}\" scale instead.`;\n    }\n    message.scaleTypeNotWorkWithChannel = scaleTypeNotWorkWithChannel;\n    function scaleTypeNotWorkWithFieldDef(scaleType, defaultScaleType) {\n        return `FieldDef does not work with \"${scaleType}\" scale. We are using \"${defaultScaleType}\" scale instead.`;\n    }\n    message.scaleTypeNotWorkWithFieldDef = scaleTypeNotWorkWithFieldDef;\n    function scalePropertyNotWorkWithScaleType(scaleType, propName, channel) {\n        return `${channel}-scale's \"${propName}\" is dropped as it does not work with ${scaleType} scale.`;\n    }\n    message.scalePropertyNotWorkWithScaleType = scalePropertyNotWorkWithScaleType;\n    function scaleTypeNotWorkWithMark(mark, scaleType) {\n        return `Scale type \"${scaleType}\" does not work with mark \"${mark}\".`;\n    }\n    message.scaleTypeNotWorkWithMark = scaleTypeNotWorkWithMark;\n    function mergeConflictingProperty(property, propertyOf, v1, v2) {\n        return `Conflicting ${propertyOf.toString()} property \"${property.toString()}\" (${stringify(v1)} and ${stringify(v2)}).  Using ${stringify(v1)}.`;\n    }\n    message.mergeConflictingProperty = mergeConflictingProperty;\n    function independentScaleMeansIndependentGuide(channel) {\n        return `Setting the scale to be independent for \"${channel}\" means we also have to set the guide (axis or legend) to be independent.`;\n    }\n    message.independentScaleMeansIndependentGuide = independentScaleMeansIndependentGuide;\n    function domainSortDropped(sort) {\n        return `Dropping sort property ${stringify(sort)} as unioned domains only support boolean or op 'count'.`;\n    }\n    message.domainSortDropped = domainSortDropped;\n    message.UNABLE_TO_MERGE_DOMAINS = 'Unable to merge domains';\n    message.MORE_THAN_ONE_SORT = 'Domains that should be unioned has conflicting sort properties. Sort will be set to true.';\n    // AXIS\n    message.INVALID_CHANNEL_FOR_AXIS = 'Invalid channel for axis.';\n    // STACK\n    function cannotStackRangedMark(channel) {\n        return `Cannot stack \"${channel}\" if there is already \"${channel}2\"`;\n    }\n    message.cannotStackRangedMark = cannotStackRangedMark;\n    function cannotStackNonLinearScale(scaleType) {\n        return `Cannot stack non-linear scale (${scaleType})`;\n    }\n    message.cannotStackNonLinearScale = cannotStackNonLinearScale;\n    function stackNonSummativeAggregate(aggregate) {\n        return `Stacking is applied even though the aggregate function is non-summative (\"${aggregate}\")`;\n    }\n    message.stackNonSummativeAggregate = stackNonSummativeAggregate;\n    // TIMEUNIT\n    function invalidTimeUnit(unitName, value) {\n        return `Invalid ${unitName}: ${stringify(value)}`;\n    }\n    message.invalidTimeUnit = invalidTimeUnit;\n    function dayReplacedWithDate(fullTimeUnit) {\n        return `Time unit \"${fullTimeUnit}\" is not supported. We are replacing it with ${fullTimeUnit.replace('day', 'date')}.`;\n    }\n    message.dayReplacedWithDate = dayReplacedWithDate;\n    function droppedDay(d) {\n        return `Dropping day from datetime ${stringify(d)} as day cannot be combined with other units.`;\n    }\n    message.droppedDay = droppedDay;\n    function errorBarCenterAndExtentAreNotNeeded(center, extent) {\n        return `${extent ? 'extent ' : ''}${extent && center ? 'and ' : ''}${center ? 'center ' : ''}${extent && center ? 'are ' : 'is '}not needed when data are aggregated.`;\n    }\n    message.errorBarCenterAndExtentAreNotNeeded = errorBarCenterAndExtentAreNotNeeded;\n    function errorBarCenterIsUsedWithWrongExtent(center, extent, mark) {\n        return `${center} is not usually used with ${extent} for ${mark}.`;\n    }\n    message.errorBarCenterIsUsedWithWrongExtent = errorBarCenterIsUsedWithWrongExtent;\n    function errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark) {\n        return `Continuous axis should not have customized aggregation function ${aggregate}; ${compositeMark} already agregates the axis.`;\n    }\n    message.errorBarContinuousAxisHasCustomizedAggregate = errorBarContinuousAxisHasCustomizedAggregate;\n    function errorBarCenterIsNotNeeded(extent, mark) {\n        return `Center is not needed to be specified in ${mark} when extent is ${extent}.`;\n    }\n    message.errorBarCenterIsNotNeeded = errorBarCenterIsNotNeeded;\n    function errorBand1DNotSupport(property) {\n        return `1D error band does not support ${property}`;\n    }\n    message.errorBand1DNotSupport = errorBand1DNotSupport;\n    // CHANNEL\n    function channelRequiredForBinned(channel) {\n        return `Channel ${channel} is required for \"binned\" bin`;\n    }\n    message.channelRequiredForBinned = channelRequiredForBinned;\n    function domainRequiredForThresholdScale(channel) {\n        return `Domain for ${channel} is required for threshold scale`;\n    }\n    message.domainRequiredForThresholdScale = domainRequiredForThresholdScale;\n})(message || (message = {}));\n//# sourceMappingURL=log.js.map","// DateTime definition object\nimport { isNumber } from 'vega-util';\nimport * as log from './log';\nimport { duplicate, keys } from './util';\n/*\n * A designated year that starts on Sunday.\n */\nconst SUNDAY_YEAR = 2006;\nexport function isDateTime(o) {\n    return (!!o &&\n        (!!o.year ||\n            !!o.quarter ||\n            !!o.month ||\n            !!o.date ||\n            !!o.day ||\n            !!o.hours ||\n            !!o.minutes ||\n            !!o.seconds ||\n            !!o.milliseconds));\n}\nexport const MONTHS = [\n    'january',\n    'february',\n    'march',\n    'april',\n    'may',\n    'june',\n    'july',\n    'august',\n    'september',\n    'october',\n    'november',\n    'december'\n];\nexport const SHORT_MONTHS = MONTHS.map(m => m.substr(0, 3));\nexport const DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\nexport const SHORT_DAYS = DAYS.map(d => d.substr(0, 3));\nfunction normalizeQuarter(q) {\n    if (isNumber(q)) {\n        if (q > 4) {\n            log.warn(log.message.invalidTimeUnit('quarter', q));\n        }\n        // We accept 1-based quarter, so need to readjust to 0-based quarter\n        return (q - 1).toString();\n    }\n    else {\n        // Invalid quarter\n        throw new Error(log.message.invalidTimeUnit('quarter', q));\n    }\n}\nfunction normalizeMonth(m) {\n    if (isNumber(m)) {\n        // We accept 1-based month, so need to readjust to 0-based month\n        return (m - 1).toString();\n    }\n    else {\n        const lowerM = m.toLowerCase();\n        const monthIndex = MONTHS.indexOf(lowerM);\n        if (monthIndex !== -1) {\n            return monthIndex + ''; // 0 for january, ...\n        }\n        const shortM = lowerM.substr(0, 3);\n        const shortMonthIndex = SHORT_MONTHS.indexOf(shortM);\n        if (shortMonthIndex !== -1) {\n            return shortMonthIndex + '';\n        }\n        // Invalid month\n        throw new Error(log.message.invalidTimeUnit('month', m));\n    }\n}\nfunction normalizeDay(d) {\n    if (isNumber(d)) {\n        // mod so that this can be both 0-based where 0 = sunday\n        // and 1-based where 7=sunday\n        return (d % 7) + '';\n    }\n    else {\n        const lowerD = d.toLowerCase();\n        const dayIndex = DAYS.indexOf(lowerD);\n        if (dayIndex !== -1) {\n            return dayIndex + ''; // 0 for january, ...\n        }\n        const shortD = lowerD.substr(0, 3);\n        const shortDayIndex = SHORT_DAYS.indexOf(shortD);\n        if (shortDayIndex !== -1) {\n            return shortDayIndex + '';\n        }\n        // Invalid day\n        throw new Error(log.message.invalidTimeUnit('day', d));\n    }\n}\n/**\n * Return Vega Expression for a particular date time.\n * @param d\n * @param normalize whether to normalize quarter, month, day.\n */\nexport function dateTimeExpr(d, normalize = false) {\n    const units = [];\n    if (normalize && d.day !== undefined) {\n        if (keys(d).length > 1) {\n            log.warn(log.message.droppedDay(d));\n            d = duplicate(d);\n            delete d.day;\n        }\n    }\n    if (d.year !== undefined) {\n        units.push(d.year);\n    }\n    else if (d.day !== undefined) {\n        // Set year to 2006 for working with day since January 1 2006 is a Sunday\n        units.push(SUNDAY_YEAR);\n    }\n    else {\n        units.push(0);\n    }\n    if (d.month !== undefined) {\n        const month = normalize ? normalizeMonth(d.month) : d.month;\n        units.push(month);\n    }\n    else if (d.quarter !== undefined) {\n        const quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;\n        units.push(quarter + '*3');\n    }\n    else {\n        units.push(0); // months start at zero in JS\n    }\n    if (d.date !== undefined) {\n        units.push(d.date);\n    }\n    else if (d.day !== undefined) {\n        // HACK: Day only works as a standalone unit\n        // This is only correct because we always set year to 2006 for day\n        const day = normalize ? normalizeDay(d.day) : d.day;\n        units.push(day + '+1');\n    }\n    else {\n        units.push(1); // Date starts at 1 in JS\n    }\n    // Note: can't use TimeUnit enum here as importing it will create\n    // circular dependency problem!\n    for (const timeUnit of ['hours', 'minutes', 'seconds', 'milliseconds']) {\n        if (d[timeUnit] !== undefined) {\n            units.push(d[timeUnit]);\n        }\n        else {\n            units.push(0);\n        }\n    }\n    if (d.utc) {\n        return `utc(${units.join(', ')})`;\n    }\n    else {\n        return `datetime(${units.join(', ')})`;\n    }\n}\n//# sourceMappingURL=datetime.js.map","export function isFacetFieldDef(channelDef) {\n    return !!channelDef && !!channelDef['header'];\n}\nexport function isFacetSpec(spec) {\n    return spec['facet'] !== undefined;\n}\n//# sourceMappingURL=facet.js.map","import { dateTimeExpr } from './datetime';\nimport * as log from './log';\nimport { accessPathWithDatum, flagKeys } from './util';\nexport var TimeUnit;\n(function (TimeUnit) {\n    TimeUnit.YEAR = 'year';\n    TimeUnit.MONTH = 'month';\n    TimeUnit.DAY = 'day';\n    TimeUnit.DATE = 'date';\n    TimeUnit.HOURS = 'hours';\n    TimeUnit.MINUTES = 'minutes';\n    TimeUnit.SECONDS = 'seconds';\n    TimeUnit.MILLISECONDS = 'milliseconds';\n    TimeUnit.YEARMONTH = 'yearmonth';\n    TimeUnit.YEARMONTHDATE = 'yearmonthdate';\n    TimeUnit.YEARMONTHDATEHOURS = 'yearmonthdatehours';\n    TimeUnit.YEARMONTHDATEHOURSMINUTES = 'yearmonthdatehoursminutes';\n    TimeUnit.YEARMONTHDATEHOURSMINUTESSECONDS = 'yearmonthdatehoursminutesseconds';\n    // MONTHDATE and MONTHDATEHOURS always include 29 February since we use year 0th (which is a leap year);\n    TimeUnit.MONTHDATE = 'monthdate';\n    TimeUnit.MONTHDATEHOURS = 'monthdatehours';\n    TimeUnit.HOURSMINUTES = 'hoursminutes';\n    TimeUnit.HOURSMINUTESSECONDS = 'hoursminutesseconds';\n    TimeUnit.MINUTESSECONDS = 'minutesseconds';\n    TimeUnit.SECONDSMILLISECONDS = 'secondsmilliseconds';\n    TimeUnit.QUARTER = 'quarter';\n    TimeUnit.YEARQUARTER = 'yearquarter';\n    TimeUnit.QUARTERMONTH = 'quartermonth';\n    TimeUnit.YEARQUARTERMONTH = 'yearquartermonth';\n    TimeUnit.UTCYEAR = 'utcyear';\n    TimeUnit.UTCMONTH = 'utcmonth';\n    TimeUnit.UTCDAY = 'utcday';\n    TimeUnit.UTCDATE = 'utcdate';\n    TimeUnit.UTCHOURS = 'utchours';\n    TimeUnit.UTCMINUTES = 'utcminutes';\n    TimeUnit.UTCSECONDS = 'utcseconds';\n    TimeUnit.UTCMILLISECONDS = 'utcmilliseconds';\n    TimeUnit.UTCYEARMONTH = 'utcyearmonth';\n    TimeUnit.UTCYEARMONTHDATE = 'utcyearmonthdate';\n    TimeUnit.UTCYEARMONTHDATEHOURS = 'utcyearmonthdatehours';\n    TimeUnit.UTCYEARMONTHDATEHOURSMINUTES = 'utcyearmonthdatehoursminutes';\n    TimeUnit.UTCYEARMONTHDATEHOURSMINUTESSECONDS = 'utcyearmonthdatehoursminutesseconds';\n    // UTCMONTHDATE and UTCMONTHDATEHOURS always include 29 February since we use year 0th (which is a leap year);\n    TimeUnit.UTCMONTHDATE = 'utcmonthdate';\n    TimeUnit.UTCMONTHDATEHOURS = 'utcmonthdatehours';\n    TimeUnit.UTCHOURSMINUTES = 'utchoursminutes';\n    TimeUnit.UTCHOURSMINUTESSECONDS = 'utchoursminutesseconds';\n    TimeUnit.UTCMINUTESSECONDS = 'utcminutesseconds';\n    TimeUnit.UTCSECONDSMILLISECONDS = 'utcsecondsmilliseconds';\n    TimeUnit.UTCQUARTER = 'utcquarter';\n    TimeUnit.UTCYEARQUARTER = 'utcyearquarter';\n    TimeUnit.UTCQUARTERMONTH = 'utcquartermonth';\n    TimeUnit.UTCYEARQUARTERMONTH = 'utcyearquartermonth';\n})(TimeUnit || (TimeUnit = {}));\n/** Time Unit that only corresponds to only one part of Date objects. */\nconst LOCAL_SINGLE_TIMEUNIT_INDEX = {\n    year: 1,\n    quarter: 1,\n    month: 1,\n    day: 1,\n    date: 1,\n    hours: 1,\n    minutes: 1,\n    seconds: 1,\n    milliseconds: 1\n};\nexport const TIMEUNIT_PARTS = flagKeys(LOCAL_SINGLE_TIMEUNIT_INDEX);\nexport function isLocalSingleTimeUnit(timeUnit) {\n    return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];\n}\nconst UTC_SINGLE_TIMEUNIT_INDEX = {\n    utcyear: 1,\n    utcquarter: 1,\n    utcmonth: 1,\n    utcday: 1,\n    utcdate: 1,\n    utchours: 1,\n    utcminutes: 1,\n    utcseconds: 1,\n    utcmilliseconds: 1\n};\nexport function isUtcSingleTimeUnit(timeUnit) {\n    return !!UTC_SINGLE_TIMEUNIT_INDEX[timeUnit];\n}\nconst LOCAL_MULTI_TIMEUNIT_INDEX = {\n    yearquarter: 1,\n    yearquartermonth: 1,\n    yearmonth: 1,\n    yearmonthdate: 1,\n    yearmonthdatehours: 1,\n    yearmonthdatehoursminutes: 1,\n    yearmonthdatehoursminutesseconds: 1,\n    quartermonth: 1,\n    monthdate: 1,\n    monthdatehours: 1,\n    hoursminutes: 1,\n    hoursminutesseconds: 1,\n    minutesseconds: 1,\n    secondsmilliseconds: 1\n};\nconst UTC_MULTI_TIMEUNIT_INDEX = {\n    utcyearquarter: 1,\n    utcyearquartermonth: 1,\n    utcyearmonth: 1,\n    utcyearmonthdate: 1,\n    utcyearmonthdatehours: 1,\n    utcyearmonthdatehoursminutes: 1,\n    utcyearmonthdatehoursminutesseconds: 1,\n    utcquartermonth: 1,\n    utcmonthdate: 1,\n    utcmonthdatehours: 1,\n    utchoursminutes: 1,\n    utchoursminutesseconds: 1,\n    utcminutesseconds: 1,\n    utcsecondsmilliseconds: 1\n};\nconst UTC_TIMEUNIT_INDEX = Object.assign({}, UTC_SINGLE_TIMEUNIT_INDEX, UTC_MULTI_TIMEUNIT_INDEX);\nexport function isUTCTimeUnit(t) {\n    return !!UTC_TIMEUNIT_INDEX[t];\n}\nexport function getLocalTimeUnit(t) {\n    return t.substr(3);\n}\nconst TIMEUNIT_INDEX = Object.assign({}, LOCAL_SINGLE_TIMEUNIT_INDEX, UTC_SINGLE_TIMEUNIT_INDEX, LOCAL_MULTI_TIMEUNIT_INDEX, UTC_MULTI_TIMEUNIT_INDEX);\nexport const TIMEUNITS = flagKeys(TIMEUNIT_INDEX);\nexport function isTimeUnit(t) {\n    return !!TIMEUNIT_INDEX[t];\n}\nconst SET_DATE_METHOD = {\n    year: 'setFullYear',\n    month: 'setMonth',\n    date: 'setDate',\n    hours: 'setHours',\n    minutes: 'setMinutes',\n    seconds: 'setSeconds',\n    milliseconds: 'setMilliseconds',\n    // Day and quarter have their own special cases\n    quarter: null,\n    day: null\n};\n/**\n * Converts a date to only have the measurements relevant to the specified unit\n * i.e. ('yearmonth', '2000-12-04 07:58:14') -> '2000-12-01 00:00:00'\n * Note: the base date is Jan 01 1900 00:00:00\n */\nexport function convert(unit, date) {\n    const isUTC = isUTCTimeUnit(unit);\n    const result = isUTC\n        ? // start with uniform date\n            new Date(Date.UTC(1972, 0, 1, 0, 0, 0, 0)) // 1972 is the first leap year after 1970, the start of unix time\n        : new Date(1972, 0, 1, 0, 0, 0, 0);\n    for (const timeUnitPart of TIMEUNIT_PARTS) {\n        if (containsTimeUnit(unit, timeUnitPart)) {\n            switch (timeUnitPart) {\n                case TimeUnit.DAY:\n                    throw new Error(\"Cannot convert to TimeUnits containing 'day'\");\n                case TimeUnit.QUARTER: {\n                    const { getDateMethod, setDateMethod } = dateMethods('month', isUTC);\n                    // indicate quarter by setting month to be the first of the quarter i.e. may (4) -> april (3)\n                    result[setDateMethod](Math.floor(date[getDateMethod]() / 3) * 3);\n                    break;\n                }\n                default:\n                    const { getDateMethod, setDateMethod } = dateMethods(timeUnitPart, isUTC);\n                    result[setDateMethod](date[getDateMethod]());\n            }\n        }\n    }\n    return result;\n}\nfunction dateMethods(singleUnit, isUtc) {\n    const rawSetDateMethod = SET_DATE_METHOD[singleUnit];\n    const setDateMethod = isUtc ? 'setUTC' + rawSetDateMethod.substr(3) : rawSetDateMethod;\n    const getDateMethod = 'get' + (isUtc ? 'UTC' : '') + rawSetDateMethod.substr(3);\n    return { setDateMethod, getDateMethod };\n}\nexport function getTimeUnitParts(timeUnit) {\n    return TIMEUNIT_PARTS.reduce((parts, part) => {\n        if (containsTimeUnit(timeUnit, part)) {\n            return [...parts, part];\n        }\n        return parts;\n    }, []);\n}\n/** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */\nexport function containsTimeUnit(fullTimeUnit, timeUnit) {\n    const index = fullTimeUnit.indexOf(timeUnit);\n    return (index > -1 && (timeUnit !== TimeUnit.SECONDS || index === 0 || fullTimeUnit.charAt(index - 1) !== 'i') // exclude milliseconds\n    );\n}\n/**\n * Returns Vega expresssion for a given timeUnit and fieldRef\n */\nexport function fieldExpr(fullTimeUnit, field) {\n    const fieldRef = accessPathWithDatum(field);\n    const utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';\n    function func(timeUnit) {\n        if (timeUnit === TimeUnit.QUARTER) {\n            // quarter starting at 0 (0,3,6,9).\n            return `(${utc}quarter(${fieldRef})-1)`;\n        }\n        else {\n            return `${utc}${timeUnit}(${fieldRef})`;\n        }\n    }\n    const d = TIMEUNIT_PARTS.reduce((dateExpr, tu) => {\n        if (containsTimeUnit(fullTimeUnit, tu)) {\n            dateExpr[tu] = func(tu);\n        }\n        return dateExpr;\n    }, {});\n    return dateTimeExpr(d);\n}\nexport function getDateTimeComponents(timeUnit, shortTimeLabels) {\n    if (!timeUnit) {\n        return undefined;\n    }\n    const dateComponents = [];\n    const hasYear = containsTimeUnit(timeUnit, TimeUnit.YEAR);\n    if (containsTimeUnit(timeUnit, TimeUnit.MONTH)) {\n        // By default use short month name\n        dateComponents.push(shortTimeLabels !== false ? '%b' : '%B');\n    }\n    if (containsTimeUnit(timeUnit, TimeUnit.DAY)) {\n        dateComponents.push(shortTimeLabels ? '%a' : '%A');\n    }\n    else if (containsTimeUnit(timeUnit, TimeUnit.DATE)) {\n        dateComponents.push('%d' + (hasYear ? ',' : '')); // add comma if there is year\n    }\n    if (hasYear) {\n        dateComponents.push(shortTimeLabels ? '%y' : '%Y');\n    }\n    const timeComponents = [];\n    if (containsTimeUnit(timeUnit, TimeUnit.HOURS)) {\n        timeComponents.push('%H');\n    }\n    if (containsTimeUnit(timeUnit, TimeUnit.MINUTES)) {\n        timeComponents.push('%M');\n    }\n    if (containsTimeUnit(timeUnit, TimeUnit.SECONDS)) {\n        timeComponents.push('%S');\n    }\n    if (containsTimeUnit(timeUnit, TimeUnit.MILLISECONDS)) {\n        timeComponents.push('%L');\n    }\n    const dateTimeComponents = [];\n    if (dateComponents.length > 0) {\n        dateTimeComponents.push(dateComponents.join(' '));\n    }\n    if (timeComponents.length > 0) {\n        dateTimeComponents.push(timeComponents.join(':'));\n    }\n    return dateTimeComponents;\n}\n/**\n * returns the signal expression used for axis labels for a time unit\n */\nexport function formatExpression(timeUnit, field, shortTimeLabels, isUTCScale) {\n    if (!timeUnit) {\n        return undefined;\n    }\n    const dateTimeComponents = getDateTimeComponents(timeUnit, shortTimeLabels);\n    let expression = '';\n    if (containsTimeUnit(timeUnit, TimeUnit.QUARTER)) {\n        // special expression for quarter as prefix\n        expression = `'Q' + quarter(${field})`;\n    }\n    if (dateTimeComponents.length > 0) {\n        if (expression) {\n            // Add space between quarter and main time format\n            expression += ` + ' ' + `;\n        }\n        // We only use utcFormat for utc scale\n        // For utc time units, the data is already converted as a part of timeUnit transform.\n        // Thus, utc time units should use timeFormat to avoid shifting the time twice.\n        if (isUTCScale) {\n            expression += `utcFormat(${field}, '${dateTimeComponents.join(' ')}')`;\n        }\n        else {\n            expression += `timeFormat(${field}, '${dateTimeComponents.join(' ')}')`;\n        }\n    }\n    // If expression is still an empty string, return undefined instead.\n    return expression || undefined;\n}\nexport function normalizeTimeUnit(timeUnit) {\n    if (timeUnit !== 'day' && timeUnit.indexOf('day') >= 0) {\n        log.warn(log.message.dayReplacedWithDate(timeUnit));\n        return timeUnit.replace('day', 'date');\n    }\n    return timeUnit;\n}\n//# sourceMappingURL=timeunit.js.map","/** Constants and utilities for data type */\n/** Data type based on level of measurement */\nexport var Type;\n(function (Type) {\n    Type.QUANTITATIVE = 'quantitative';\n    Type.ORDINAL = 'ordinal';\n    Type.TEMPORAL = 'temporal';\n    Type.NOMINAL = 'nominal';\n    Type.GEOJSON = 'geojson';\n})(Type || (Type = {}));\nexport const TYPE_INDEX = {\n    quantitative: 1,\n    ordinal: 1,\n    temporal: 1,\n    nominal: 1,\n    geojson: 1\n};\nexport function isType(t) {\n    return !!TYPE_INDEX[t];\n}\nexport const QUANTITATIVE = Type.QUANTITATIVE;\nexport const ORDINAL = Type.ORDINAL;\nexport const TEMPORAL = Type.TEMPORAL;\nexport const NOMINAL = Type.NOMINAL;\nexport const GEOJSON = Type.GEOJSON;\n/**\n * Get full, lowercase type name for a given type.\n * @param  type\n * @return Full type name.\n */\nexport function getFullName(type) {\n    if (type) {\n        type = type.toLowerCase();\n        switch (type) {\n            case 'q':\n            case QUANTITATIVE:\n                return 'quantitative';\n            case 't':\n            case TEMPORAL:\n                return 'temporal';\n            case 'o':\n            case ORDINAL:\n                return 'ordinal';\n            case 'n':\n            case NOMINAL:\n                return 'nominal';\n            case GEOJSON:\n                return 'geojson';\n        }\n    }\n    // If we get invalid input, return undefined type.\n    return undefined;\n}\n//# sourceMappingURL=type.js.map","import * as tslib_1 from \"tslib\";\nimport { isArray, isBoolean, isNumber, isString } from 'vega-util';\nimport { isAggregateOp, isCountingAggregateOp } from './aggregate';\nimport { autoMaxBins, binToString, isBinned, isBinning } from './bin';\nimport { isScaleChannel, isSecondaryRangeChannel, POSITION_SCALE_CHANNELS, rangeType } from './channel';\nimport { dateTimeExpr, isDateTime } from './datetime';\nimport * as log from './log';\nimport { isFacetFieldDef } from './spec/facet';\nimport { getLocalTimeUnit, getTimeUnitParts, isLocalSingleTimeUnit, isUtcSingleTimeUnit, normalizeTimeUnit } from './timeunit';\nimport { getFullName, QUANTITATIVE } from './type';\nimport { contains, flatAccessWithDatum, getFirstDefined, internalField, replacePathInField, titlecase } from './util';\nexport function isConditionalSelection(c) {\n    return c['selection'];\n}\nexport function isRepeatRef(field) {\n    return field && !isString(field) && 'repeat' in field;\n}\nexport function toFieldDefBase(fieldDef) {\n    const { field, timeUnit, bin, aggregate } = fieldDef;\n    return Object.assign({}, (timeUnit ? { timeUnit } : {}), (bin ? { bin } : {}), (aggregate ? { aggregate } : {}), { field });\n}\nexport function isSortableFieldDef(fieldDef) {\n    return isTypedFieldDef(fieldDef) && !!fieldDef['sort'];\n}\nexport function isConditionalDef(channelDef) {\n    return !!channelDef && !!channelDef.condition;\n}\n/**\n * Return if a channelDef is a ConditionalValueDef with ConditionFieldDef\n */\nexport function hasConditionalFieldDef(channelDef) {\n    return !!channelDef && !!channelDef.condition && !isArray(channelDef.condition) && isFieldDef(channelDef.condition);\n}\nexport function hasConditionalValueDef(channelDef) {\n    return !!channelDef && !!channelDef.condition && (isArray(channelDef.condition) || isValueDef(channelDef.condition));\n}\nexport function isFieldDef(channelDef) {\n    return !!channelDef && (!!channelDef['field'] || channelDef['aggregate'] === 'count');\n}\nexport function isTypedFieldDef(channelDef) {\n    return !!channelDef && ((!!channelDef['field'] && !!channelDef['type']) || channelDef['aggregate'] === 'count');\n}\nexport function isStringFieldDef(channelDef) {\n    return isFieldDef(channelDef) && isString(channelDef.field);\n}\nexport function isValueDef(channelDef) {\n    return channelDef && 'value' in channelDef && channelDef['value'] !== undefined;\n}\nexport function isScaleFieldDef(channelDef) {\n    return !!channelDef && (!!channelDef['scale'] || !!channelDef['sort']);\n}\nexport function isPositionFieldDef(channelDef) {\n    return !!channelDef && (!!channelDef['axis'] || !!channelDef['stack'] || !!channelDef['impute']);\n}\nexport function isMarkPropFieldDef(channelDef) {\n    return !!channelDef && !!channelDef['legend'];\n}\nexport function isTextFieldDef(channelDef) {\n    return !!channelDef && !!channelDef['format'];\n}\nfunction isOpFieldDef(fieldDef) {\n    return !!fieldDef['op'];\n}\n/**\n * Get a Vega field reference from a Vega-Lite field def.\n */\nexport function vgField(fieldDef, opt = {}) {\n    let field = fieldDef.field;\n    const prefix = opt.prefix;\n    let suffix = opt.suffix;\n    if (isCount(fieldDef)) {\n        field = internalField('count');\n    }\n    else {\n        let fn;\n        if (!opt.nofn) {\n            if (isOpFieldDef(fieldDef)) {\n                fn = fieldDef.op;\n            }\n            else if (isBinning(fieldDef.bin)) {\n                fn = binToString(fieldDef.bin);\n                suffix = (opt.binSuffix || '') + (opt.suffix || '');\n            }\n            else if (fieldDef.aggregate) {\n                fn = String(fieldDef.aggregate);\n            }\n            else if (fieldDef.timeUnit) {\n                fn = String(fieldDef.timeUnit);\n            }\n        }\n        if (fn) {\n            field = field ? `${fn}_${field}` : fn;\n        }\n    }\n    if (suffix) {\n        field = `${field}_${suffix}`;\n    }\n    if (prefix) {\n        field = `${prefix}_${field}`;\n    }\n    if (opt.forAs) {\n        return field;\n    }\n    else if (opt.expr) {\n        // Expression to access flattened field. No need to escape dots.\n        return flatAccessWithDatum(field, opt.expr);\n    }\n    else {\n        // We flattened all fields so paths should have become dot.\n        return replacePathInField(field);\n    }\n}\nexport function isDiscrete(fieldDef) {\n    switch (fieldDef.type) {\n        case 'nominal':\n        case 'ordinal':\n        case 'geojson':\n            return true;\n        case 'quantitative':\n            return !!fieldDef.bin;\n        case 'temporal':\n            return false;\n    }\n    throw new Error(log.message.invalidFieldType(fieldDef.type));\n}\nexport function isContinuous(fieldDef) {\n    return !isDiscrete(fieldDef);\n}\nexport function isCount(fieldDef) {\n    return fieldDef.aggregate === 'count';\n}\nexport function verbalTitleFormatter(fieldDef, config) {\n    const { field: field, bin, timeUnit, aggregate } = fieldDef;\n    if (aggregate === 'count') {\n        return config.countTitle;\n    }\n    else if (isBinning(bin)) {\n        return `${field} (binned)`;\n    }\n    else if (timeUnit) {\n        const units = getTimeUnitParts(timeUnit).join('-');\n        return `${field} (${units})`;\n    }\n    else if (aggregate) {\n        return `${titlecase(aggregate)} of ${field}`;\n    }\n    return field;\n}\nexport function functionalTitleFormatter(fieldDef, config) {\n    const fn = fieldDef.aggregate || fieldDef.timeUnit || (isBinning(fieldDef.bin) && 'bin');\n    if (fn) {\n        return fn.toUpperCase() + '(' + fieldDef.field + ')';\n    }\n    else {\n        return fieldDef.field;\n    }\n}\nexport const defaultTitleFormatter = (fieldDef, config) => {\n    switch (config.fieldTitle) {\n        case 'plain':\n            return fieldDef.field;\n        case 'functional':\n            return functionalTitleFormatter(fieldDef, config);\n        default:\n            return verbalTitleFormatter(fieldDef, config);\n    }\n};\nlet titleFormatter = defaultTitleFormatter;\nexport function setTitleFormatter(formatter) {\n    titleFormatter = formatter;\n}\nexport function resetTitleFormatter() {\n    setTitleFormatter(defaultTitleFormatter);\n}\nexport function title(fieldDef, config, { allowDisabling }) {\n    const guide = getGuide(fieldDef) || {};\n    const guideTitle = guide.title;\n    if (allowDisabling) {\n        return getFirstDefined(guideTitle, fieldDef.title, defaultTitle(fieldDef, config));\n    }\n    else {\n        return guideTitle || fieldDef.title || defaultTitle(fieldDef, config);\n    }\n}\nexport function getGuide(fieldDef) {\n    if (isPositionFieldDef(fieldDef) && fieldDef.axis) {\n        return fieldDef.axis;\n    }\n    else if (isMarkPropFieldDef(fieldDef) && fieldDef.legend) {\n        return fieldDef.legend;\n    }\n    else if (isFacetFieldDef(fieldDef) && fieldDef.header) {\n        return fieldDef.header;\n    }\n    return undefined;\n}\nexport function defaultTitle(fieldDef, config) {\n    return titleFormatter(fieldDef, config);\n}\nexport function format(fieldDef) {\n    if (isTextFieldDef(fieldDef) && fieldDef.format) {\n        return fieldDef.format;\n    }\n    else {\n        const guide = getGuide(fieldDef) || {};\n        return guide.format;\n    }\n}\nexport function defaultType(fieldDef, channel) {\n    if (fieldDef.timeUnit) {\n        return 'temporal';\n    }\n    if (isBinning(fieldDef.bin)) {\n        return 'quantitative';\n    }\n    switch (rangeType(channel)) {\n        case 'continuous':\n            return 'quantitative';\n        case 'discrete':\n            return 'nominal';\n        case 'flexible': // color\n            return 'nominal';\n        default:\n            return 'quantitative';\n    }\n}\n/**\n * Returns the fieldDef -- either from the outer channelDef or from the condition of channelDef.\n * @param channelDef\n */\nexport function getFieldDef(channelDef) {\n    if (isFieldDef(channelDef)) {\n        return channelDef;\n    }\n    else if (hasConditionalFieldDef(channelDef)) {\n        return channelDef.condition;\n    }\n    return undefined;\n}\nexport function getTypedFieldDef(channelDef) {\n    if (isFieldDef(channelDef)) {\n        return channelDef;\n    }\n    else if (hasConditionalFieldDef(channelDef)) {\n        return channelDef.condition;\n    }\n    return undefined;\n}\n/**\n * Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.\n */\nexport function normalize(channelDef, channel) {\n    if (isString(channelDef) || isNumber(channelDef) || isBoolean(channelDef)) {\n        const primitiveType = isString(channelDef) ? 'string' : isNumber(channelDef) ? 'number' : 'boolean';\n        log.warn(log.message.primitiveChannelDef(channel, primitiveType, channelDef));\n        return { value: channelDef };\n    }\n    // If a fieldDef contains a field, we need type.\n    if (isFieldDef(channelDef)) {\n        return normalizeFieldDef(channelDef, channel);\n    }\n    else if (hasConditionalFieldDef(channelDef)) {\n        return Object.assign({}, channelDef, { \n            // Need to cast as normalizeFieldDef normally return FieldDef, but here we know that it is definitely Condition<FieldDef>\n            condition: normalizeFieldDef(channelDef.condition, channel) });\n    }\n    return channelDef;\n}\nexport function normalizeFieldDef(fieldDef, channel) {\n    // Drop invalid aggregate\n    if (fieldDef.aggregate && !isAggregateOp(fieldDef.aggregate)) {\n        const { aggregate } = fieldDef, fieldDefWithoutAggregate = tslib_1.__rest(fieldDef, [\"aggregate\"]);\n        log.warn(log.message.invalidAggregate(fieldDef.aggregate));\n        fieldDef = fieldDefWithoutAggregate;\n    }\n    // Normalize Time Unit\n    if (fieldDef.timeUnit) {\n        fieldDef = Object.assign({}, fieldDef, { timeUnit: normalizeTimeUnit(fieldDef.timeUnit) });\n    }\n    // Normalize bin\n    if (isBinning(fieldDef.bin)) {\n        fieldDef = Object.assign({}, fieldDef, { bin: normalizeBin(fieldDef.bin, channel) });\n    }\n    if (isBinned(fieldDef.bin) && !contains(POSITION_SCALE_CHANNELS, channel)) {\n        log.warn(`Channel ${channel} should not be used with \"binned\" bin`);\n    }\n    // Normalize Type\n    if (isTypedFieldDef(fieldDef)) {\n        const fullType = getFullName(fieldDef.type);\n        if (fieldDef.type !== fullType) {\n            // convert short type to full type\n            fieldDef = Object.assign({}, fieldDef, { type: fullType });\n        }\n        if (fieldDef.type !== 'quantitative') {\n            if (isCountingAggregateOp(fieldDef.aggregate)) {\n                log.warn(log.message.invalidFieldTypeForCountAggregate(fieldDef.type, fieldDef.aggregate));\n                fieldDef = Object.assign({}, fieldDef, { type: 'quantitative' });\n            }\n        }\n    }\n    else if (!isSecondaryRangeChannel(channel)) {\n        // If type is empty / invalid, then augment with default type\n        const newType = defaultType(fieldDef, channel);\n        log.warn(log.message.missingFieldType(channel, newType));\n        fieldDef = Object.assign({}, fieldDef, { type: newType });\n    }\n    if (isTypedFieldDef(fieldDef)) {\n        const { compatible, warning } = channelCompatibility(fieldDef, channel);\n        if (!compatible) {\n            log.warn(warning);\n        }\n    }\n    return fieldDef;\n}\nexport function normalizeBin(bin, channel) {\n    if (isBoolean(bin)) {\n        return { maxbins: autoMaxBins(channel) };\n    }\n    else if (bin === 'binned') {\n        return {\n            binned: true\n        };\n    }\n    else if (!bin.maxbins && !bin.step) {\n        return Object.assign({}, bin, { maxbins: autoMaxBins(channel) });\n    }\n    else {\n        return bin;\n    }\n}\nconst COMPATIBLE = { compatible: true };\nexport function channelCompatibility(fieldDef, channel) {\n    const type = fieldDef.type;\n    if (type === 'geojson' && channel !== 'shape') {\n        return {\n            compatible: false,\n            warning: `Channel ${channel} should not be used with a geojson data.`\n        };\n    }\n    switch (channel) {\n        case 'row':\n        case 'column':\n            if (isContinuous(fieldDef)) {\n                return {\n                    compatible: false,\n                    warning: log.message.facetChannelShouldBeDiscrete(channel)\n                };\n            }\n            return COMPATIBLE;\n        case 'x':\n        case 'y':\n        case 'color':\n        case 'fill':\n        case 'stroke':\n        case 'text':\n        case 'detail':\n        case 'key':\n        case 'tooltip':\n        case 'href':\n            return COMPATIBLE;\n        case 'longitude':\n        case 'longitude2':\n        case 'latitude':\n        case 'latitude2':\n            if (type !== QUANTITATIVE) {\n                return {\n                    compatible: false,\n                    warning: `Channel ${channel} should be used with a quantitative field only, not ${fieldDef.type} field.`\n                };\n            }\n            return COMPATIBLE;\n        case 'opacity':\n        case 'fillOpacity':\n        case 'strokeOpacity':\n        case 'strokeWidth':\n        case 'size':\n        case 'x2':\n        case 'y2':\n            if (type === 'nominal' && !fieldDef['sort']) {\n                return {\n                    compatible: false,\n                    warning: `Channel ${channel} should not be used with an unsorted discrete field.`\n                };\n            }\n            return COMPATIBLE;\n        case 'shape':\n            if (!contains(['ordinal', 'nominal', 'geojson'], fieldDef.type)) {\n                return {\n                    compatible: false,\n                    warning: 'Shape channel should be used with only either discrete or geojson data.'\n                };\n            }\n            return COMPATIBLE;\n        case 'order':\n            if (fieldDef.type === 'nominal' && !('sort' in fieldDef)) {\n                return {\n                    compatible: false,\n                    warning: `Channel order is inappropriate for nominal field, which has no inherent order.`\n                };\n            }\n            return COMPATIBLE;\n    }\n    throw new Error('channelCompatability not implemented for channel ' + channel);\n}\nexport function isNumberFieldDef(fieldDef) {\n    return fieldDef.type === 'quantitative' || isBinning(fieldDef.bin);\n}\nexport function isTimeFieldDef(fieldDef) {\n    return fieldDef.type === 'temporal' || !!fieldDef.timeUnit;\n}\n/**\n * Getting a value associated with a fielddef.\n * Convert the value to Vega expression if applicable (for datetime object, or string if the field def is temporal or has timeUnit)\n */\nexport function valueExpr(v, { timeUnit, type, time, undefinedIfExprNotRequired }) {\n    let expr;\n    if (isDateTime(v)) {\n        expr = dateTimeExpr(v, true);\n    }\n    else if (isString(v) || isNumber(v)) {\n        if (timeUnit || type === 'temporal') {\n            if (isLocalSingleTimeUnit(timeUnit)) {\n                expr = dateTimeExpr({ [timeUnit]: v }, true);\n            }\n            else if (isUtcSingleTimeUnit(timeUnit)) {\n                // FIXME is this really correct?\n                expr = valueExpr(v, { timeUnit: getLocalTimeUnit(timeUnit) });\n            }\n            else {\n                // just pass the string to date function (which will call JS Date.parse())\n                expr = `datetime(${JSON.stringify(v)})`;\n            }\n        }\n    }\n    if (expr) {\n        return time ? `time(${expr})` : expr;\n    }\n    // number or boolean or normal string\n    return undefinedIfExprNotRequired ? undefined : JSON.stringify(v);\n}\n/**\n * Standardize value array -- convert each value to Vega expression if applicable\n */\nexport function valueArray(fieldDef, values) {\n    const { timeUnit, type } = fieldDef;\n    return values.map(v => {\n        const expr = valueExpr(v, { timeUnit, type, undefinedIfExprNotRequired: true });\n        // return signal for the expression if we need an expression\n        if (expr !== undefined) {\n            return { signal: expr };\n        }\n        // otherwise just return the original value\n        return v;\n    });\n}\n/**\n * Checks whether a fieldDef for a particular channel requires a computed bin range.\n */\nexport function binRequiresRange(fieldDef, channel) {\n    if (!isBinning(fieldDef.bin)) {\n        console.warn('Only use this method with binned field defs');\n        return false;\n    }\n    // We need the range only when the user explicitly forces a binned field to be use discrete scale. In this case, bin range is used in axis and legend labels.\n    // We could check whether the axis or legend exists (not disabled) but that seems overkill.\n    return isScaleChannel(channel) && contains(['ordinal', 'nominal'], fieldDef.type);\n}\n//# sourceMappingURL=fielddef.js.map","import { isBoolean, isObject } from 'vega-util';\nimport { COLOR, COLUMN, FILL, FILLOPACITY, OPACITY, ROW, SHAPE, SIZE, STROKE, STROKEOPACITY, STROKEWIDTH } from './channel';\nimport { normalizeBin } from './fielddef';\nimport { keys, varName } from './util';\n/**\n * Create a key for the bin configuration. Not for prebinned bin.\n */\nexport function binToString(bin) {\n    if (isBoolean(bin)) {\n        bin = normalizeBin(bin, undefined);\n    }\n    return ('bin' +\n        keys(bin)\n            .map(p => varName(`_${p}_${bin[p]}`))\n            .join(''));\n}\n/**\n * Vega-Lite should bin the data.\n */\nexport function isBinning(bin) {\n    return bin === true || (isBinParams(bin) && !bin.binned);\n}\n/**\n * The data is already binned and so Vega-Lite should not bin it again.\n */\nexport function isBinned(bin) {\n    return bin === 'binned' || (isBinParams(bin) && bin.binned);\n}\nexport function isBinParams(bin) {\n    return isObject(bin);\n}\nexport function autoMaxBins(channel) {\n    switch (channel) {\n        case ROW:\n        case COLUMN:\n        case SIZE:\n        case COLOR:\n        case FILL:\n        case STROKE:\n        case STROKEWIDTH:\n        case OPACITY:\n        case FILLOPACITY:\n        case STROKEOPACITY:\n        // Facets and Size shouldn't have too many bins\n        // We choose 6 like shape to simplify the rule\n        case SHAPE:\n            return 6; // Vega's \"shape\" has 6 distinct values\n        default:\n            return 10;\n    }\n}\n//# sourceMappingURL=bin.js.map","import { toSet } from 'vega-util';\nimport { contains, flagKeys } from './util';\nexport var Mark;\n(function (Mark) {\n    Mark.AREA = 'area';\n    Mark.BAR = 'bar';\n    Mark.LINE = 'line';\n    Mark.POINT = 'point';\n    Mark.RECT = 'rect';\n    Mark.RULE = 'rule';\n    Mark.TEXT = 'text';\n    Mark.TICK = 'tick';\n    Mark.TRAIL = 'trail';\n    Mark.CIRCLE = 'circle';\n    Mark.SQUARE = 'square';\n    Mark.GEOSHAPE = 'geoshape';\n})(Mark || (Mark = {}));\nexport const AREA = Mark.AREA;\nexport const BAR = Mark.BAR;\nexport const LINE = Mark.LINE;\nexport const POINT = Mark.POINT;\nexport const TEXT = Mark.TEXT;\nexport const TICK = Mark.TICK;\nexport const TRAIL = Mark.TRAIL;\nexport const RECT = Mark.RECT;\nexport const RULE = Mark.RULE;\nexport const GEOSHAPE = Mark.GEOSHAPE;\nexport const CIRCLE = Mark.CIRCLE;\nexport const SQUARE = Mark.SQUARE;\n// Using mapped type to declare index, ensuring we always have all marks when we add more.\nconst MARK_INDEX = {\n    area: 1,\n    bar: 1,\n    line: 1,\n    point: 1,\n    text: 1,\n    tick: 1,\n    trail: 1,\n    rect: 1,\n    geoshape: 1,\n    rule: 1,\n    circle: 1,\n    square: 1\n};\nexport function isMark(m) {\n    return !!MARK_INDEX[m];\n}\nexport function isPathMark(m) {\n    return contains(['line', 'area', 'trail'], m);\n}\nexport const PRIMITIVE_MARKS = flagKeys(MARK_INDEX);\nexport function isMarkDef(mark) {\n    return mark['type'];\n}\nconst PRIMITIVE_MARK_INDEX = toSet(PRIMITIVE_MARKS);\nexport function isPrimitiveMark(mark) {\n    const markType = isMarkDef(mark) ? mark.type : mark;\n    return markType in PRIMITIVE_MARK_INDEX;\n}\nexport const STROKE_CONFIG = [\n    'stroke',\n    'strokeWidth',\n    'strokeDash',\n    'strokeDashOffset',\n    'strokeOpacity',\n    'strokeJoin',\n    'strokeMiterLimit'\n];\nexport const FILL_CONFIG = ['fill', 'fillOpacity'];\nexport const FILL_STROKE_CONFIG = [].concat(STROKE_CONFIG, FILL_CONFIG);\nexport const VL_ONLY_MARK_CONFIG_PROPERTIES = ['filled', 'color', 'tooltip'];\nexport const VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {\n    area: ['line', 'point'],\n    bar: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],\n    line: ['point'],\n    text: ['shortTimeLabels'],\n    tick: ['bandSize', 'thickness']\n};\nexport const defaultMarkConfig = {\n    color: '#4c78a8',\n    tooltip: { content: 'encoding' }\n};\nexport const defaultBarConfig = {\n    binSpacing: 1,\n    continuousBandSize: 5\n};\nexport const defaultTickConfig = {\n    thickness: 1\n};\nexport function getMarkType(m) {\n    return isMarkDef(m) ? m.type : m;\n}\n//# sourceMappingURL=mark.js.map","export function isUnitSpec(spec) {\n    return !!spec['mark'];\n}\n//# sourceMappingURL=unit.js.map","import { getMarkType } from '../mark';\nimport { isUnitSpec } from '../spec/unit';\nexport class CompositeMarkNormalizer {\n    constructor(name, run) {\n        this.name = name;\n        this.run = run;\n    }\n    hasMatchingType(spec, config) {\n        if (isUnitSpec(spec)) {\n            return getMarkType(spec.mark) === this.name;\n        }\n        return false;\n    }\n}\n//# sourceMappingURL=base.js.map","import * as tslib_1 from \"tslib\";\nimport { isArray } from 'vega-util';\nimport { isAggregateOp } from './aggregate';\nimport { isBinning } from './bin';\nimport { Channel, CHANNELS, isChannel, isNonPositionScaleChannel, isSecondaryRangeChannel, supportMark } from './channel';\nimport { binRequiresRange, getFieldDef, getGuide, getTypedFieldDef, hasConditionalFieldDef, isConditionalDef, isFieldDef, isTypedFieldDef, isValueDef, normalize, normalizeFieldDef, title, vgField } from './fielddef';\nimport * as log from './log';\nimport { getDateTimeComponents } from './timeunit';\nimport { Type } from './type';\nimport { keys, some } from './util';\nexport function channelHasField(encoding, channel) {\n    const channelDef = encoding && encoding[channel];\n    if (channelDef) {\n        if (isArray(channelDef)) {\n            return some(channelDef, fieldDef => !!fieldDef.field);\n        }\n        else {\n            return isFieldDef(channelDef) || hasConditionalFieldDef(channelDef);\n        }\n    }\n    return false;\n}\nexport function isAggregate(encoding) {\n    return some(CHANNELS, channel => {\n        if (channelHasField(encoding, channel)) {\n            const channelDef = encoding[channel];\n            if (isArray(channelDef)) {\n                return some(channelDef, fieldDef => !!fieldDef.aggregate);\n            }\n            else {\n                const fieldDef = getFieldDef(channelDef);\n                return fieldDef && !!fieldDef.aggregate;\n            }\n        }\n        return false;\n    });\n}\nexport function extractTransformsFromEncoding(oldEncoding, config) {\n    const groupby = [];\n    const bins = [];\n    const timeUnits = [];\n    const aggregate = [];\n    const encoding = {};\n    forEach(oldEncoding, (channelDef, channel) => {\n        // Extract potential embedded transformations along with remaining properties\n        if (isFieldDef(channelDef)) {\n            const { field, aggregate: aggOp, timeUnit, bin } = channelDef, remaining = tslib_1.__rest(channelDef, [\"field\", \"aggregate\", \"timeUnit\", \"bin\"]);\n            if (aggOp || timeUnit || bin) {\n                const guide = getGuide(channelDef);\n                const isTitleDefined = guide && guide.title;\n                const newField = vgField(channelDef, { forAs: true });\n                const newChannelDef = Object.assign({}, (isTitleDefined ? [] : { title: title(channelDef, config, { allowDisabling: true }) }), remaining, { \n                    // Always overwrite field\n                    field: newField });\n                const isPositionChannel = channel === Channel.X || channel === Channel.Y;\n                if (aggOp && isAggregateOp(aggOp)) {\n                    const aggregateEntry = {\n                        op: aggOp,\n                        as: newField\n                    };\n                    if (field) {\n                        aggregateEntry.field = field;\n                    }\n                    aggregate.push(aggregateEntry);\n                }\n                else if (isTypedFieldDef(channelDef) && isBinning(bin)) {\n                    bins.push({ bin, field, as: newField });\n                    // Add additional groupbys for range and end of bins\n                    groupby.push(vgField(channelDef, { binSuffix: 'end' }));\n                    if (binRequiresRange(channelDef, channel)) {\n                        groupby.push(vgField(channelDef, { binSuffix: 'range' }));\n                    }\n                    // Create accompanying 'x2' or 'y2' field if channel is 'x' or 'y' respectively\n                    if (isPositionChannel) {\n                        const secondaryChannel = {\n                            field: newField + '_end'\n                        };\n                        encoding[channel + '2'] = secondaryChannel;\n                    }\n                    newChannelDef['bin'] = 'binned';\n                    if (!isSecondaryRangeChannel(channel)) {\n                        newChannelDef['type'] = Type.QUANTITATIVE;\n                    }\n                }\n                else if (timeUnit) {\n                    timeUnits.push({ timeUnit, field, as: newField });\n                    // Add formatting to appropriate property based on the type of channel we're processing\n                    const format = getDateTimeComponents(timeUnit, config.axis.shortTimeLabels).join(' ');\n                    if (isNonPositionScaleChannel(channel)) {\n                        newChannelDef['legend'] = Object.assign({ format }, newChannelDef['legend']);\n                    }\n                    else if (isPositionChannel) {\n                        newChannelDef['axis'] = Object.assign({ format }, newChannelDef['axis']);\n                    }\n                    else if (channel === 'text' || channel === 'tooltip') {\n                        newChannelDef['format'] = newChannelDef['format'] || format;\n                    }\n                }\n                if (!aggOp) {\n                    groupby.push(newField);\n                }\n                // now the field should refer to post-transformed field instead\n                encoding[channel] = newChannelDef;\n            }\n            else {\n                groupby.push(field);\n                encoding[channel] = oldEncoding[channel];\n            }\n        }\n        else {\n            // For value def, just copy\n            encoding[channel] = oldEncoding[channel];\n        }\n    });\n    return {\n        bins,\n        timeUnits,\n        aggregate,\n        groupby,\n        encoding\n    };\n}\nexport function markChannelCompatible(encoding, channel, mark) {\n    const markSupported = supportMark(channel, mark);\n    if (!markSupported) {\n        return false;\n    }\n    else if (markSupported === 'binned') {\n        const primaryFieldDef = encoding[channel === 'x2' ? 'x' : 'y'];\n        // circle, point, square and tick only support x2/y2 when their corresponding x/y fieldDef\n        // has \"binned\" data and thus need x2/y2 to specify the bin-end field.\n        if (isFieldDef(primaryFieldDef) && isFieldDef(encoding[channel]) && primaryFieldDef.bin === 'binned') {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nexport function normalizeEncoding(encoding, mark) {\n    return keys(encoding).reduce((normalizedEncoding, channel) => {\n        if (!isChannel(channel)) {\n            // Drop invalid channel\n            log.warn(log.message.invalidEncodingChannel(channel));\n            return normalizedEncoding;\n        }\n        if (!markChannelCompatible(encoding, channel, mark)) {\n            // Drop unsupported channel\n            log.warn(log.message.incompatibleChannel(channel, mark));\n            return normalizedEncoding;\n        }\n        // Drop line's size if the field is aggregated.\n        if (channel === 'size' && mark === 'line') {\n            const fieldDef = getTypedFieldDef(encoding[channel]);\n            if (fieldDef && fieldDef.aggregate) {\n                log.warn(log.message.LINE_WITH_VARYING_SIZE);\n                return normalizedEncoding;\n            }\n        }\n        // Drop color if either fill or stroke is specified\n        if (channel === 'color' && ('fill' in encoding || 'stroke' in encoding)) {\n            log.warn(log.message.droppingColor('encoding', { fill: 'fill' in encoding, stroke: 'stroke' in encoding }));\n            return normalizedEncoding;\n        }\n        const channelDef = encoding[channel];\n        if (channel === 'detail' ||\n            (channel === 'order' && !isArray(channelDef) && !isValueDef(channelDef)) ||\n            (channel === 'tooltip' && isArray(channelDef))) {\n            if (channelDef) {\n                // Array of fieldDefs for detail channel (or production rule)\n                normalizedEncoding[channel] = (isArray(channelDef) ? channelDef : [channelDef]).reduce((defs, fieldDef) => {\n                    if (!isFieldDef(fieldDef)) {\n                        log.warn(log.message.emptyFieldDef(fieldDef, channel));\n                    }\n                    else {\n                        defs.push(normalizeFieldDef(fieldDef, channel));\n                    }\n                    return defs;\n                }, []);\n            }\n        }\n        else {\n            if (channel === 'tooltip' && channelDef === null) {\n                // Preserve null so we can use it to disable tooltip\n                normalizedEncoding[channel] = null;\n            }\n            else if (!isFieldDef(channelDef) && !isValueDef(channelDef) && !isConditionalDef(channelDef)) {\n                log.warn(log.message.emptyFieldDef(channelDef, channel));\n                return normalizedEncoding;\n            }\n            normalizedEncoding[channel] = normalize(channelDef, channel);\n        }\n        return normalizedEncoding;\n    }, {});\n}\nexport function isRanged(encoding) {\n    return encoding && ((!!encoding.x && !!encoding.x2) || (!!encoding.y && !!encoding.y2));\n}\nexport function fieldDefs(encoding) {\n    const arr = [];\n    for (const channel of keys(encoding)) {\n        if (channelHasField(encoding, channel)) {\n            const channelDef = encoding[channel];\n            (isArray(channelDef) ? channelDef : [channelDef]).forEach(def => {\n                if (isFieldDef(def)) {\n                    arr.push(def);\n                }\n                else if (hasConditionalFieldDef(def)) {\n                    arr.push(def.condition);\n                }\n            });\n        }\n    }\n    return arr;\n}\nexport function forEach(mapping, f, thisArg) {\n    if (!mapping) {\n        return;\n    }\n    for (const channel of keys(mapping)) {\n        const el = mapping[channel];\n        if (isArray(el)) {\n            el.forEach((channelDef) => {\n                f.call(thisArg, channelDef, channel);\n            });\n        }\n        else {\n            f.call(thisArg, el, channel);\n        }\n    }\n}\nexport function reduce(mapping, f, init, thisArg) {\n    if (!mapping) {\n        return init;\n    }\n    return keys(mapping).reduce((r, channel) => {\n        const map = mapping[channel];\n        if (isArray(map)) {\n            return map.reduce((r1, channelDef) => {\n                return f.call(thisArg, r1, channelDef, channel);\n            }, r);\n        }\n        else {\n            return f.call(thisArg, r, map, channel);\n        }\n    }, init);\n}\n//# sourceMappingURL=encoding.js.map","import * as tslib_1 from \"tslib\";\nimport { isBoolean, isString } from 'vega-util';\nimport { fieldDefs } from '../encoding';\nimport { isContinuous, isFieldDef } from '../fielddef';\nimport * as log from '../log';\nimport { isMarkDef } from '../mark';\nexport function getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, withFieldName = true) {\n    const fiveSummaryTooltip = tooltipSummary.map(({ fieldPrefix, titlePrefix }) => ({\n        field: fieldPrefix + continuousAxisChannelDef.field,\n        type: continuousAxisChannelDef.type,\n        title: titlePrefix + (withFieldName ? ' of ' + continuousAxisChannelDef.field : '')\n    }));\n    return {\n        tooltip: [\n            ...fiveSummaryTooltip,\n            // need to cast because TextFieldDef support fewer types of bin\n            ...fieldDefs(encodingWithoutContinuousAxis)\n        ]\n    };\n}\nexport function makeCompositeAggregatePartFactory(compositeMarkDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, compositeMarkConfig) {\n    const { scale, axis } = continuousAxisChannelDef;\n    return ({ partName, mark, positionPrefix, endPositionPrefix = undefined, extraEncoding = {} }) => {\n        const title = axis && axis.title !== undefined\n            ? undefined\n            : continuousAxisChannelDef.title !== undefined\n                ? continuousAxisChannelDef.title\n                : continuousAxisChannelDef.field;\n        return partLayerMixins(compositeMarkDef, partName, compositeMarkConfig, {\n            mark,\n            encoding: Object.assign({ [continuousAxis]: Object.assign({ field: positionPrefix + '_' + continuousAxisChannelDef.field, type: continuousAxisChannelDef.type }, (title ? { title } : {}), (scale ? { scale } : {}), (axis ? { axis } : {})) }, (isString(endPositionPrefix)\n                ? {\n                    [continuousAxis + '2']: {\n                        field: endPositionPrefix + '_' + continuousAxisChannelDef.field,\n                        type: continuousAxisChannelDef.type\n                    }\n                }\n                : {}), sharedEncoding, extraEncoding)\n        });\n    };\n}\nexport function partLayerMixins(markDef, part, compositeMarkConfig, partBaseSpec) {\n    const { clip, color, opacity } = markDef;\n    const mark = markDef.type;\n    if (markDef[part] || (markDef[part] === undefined && compositeMarkConfig[part])) {\n        return [\n            Object.assign({}, partBaseSpec, { mark: Object.assign({}, compositeMarkConfig[part], (clip ? { clip } : {}), (color ? { color } : {}), (opacity ? { opacity } : {}), (isMarkDef(partBaseSpec.mark) ? partBaseSpec.mark : { type: partBaseSpec.mark }), { style: `${mark}-${part}` }, (isBoolean(markDef[part]) ? {} : markDef[part])) })\n        ];\n    }\n    return [];\n}\nexport function compositeMarkContinuousAxis(spec, orient, compositeMark) {\n    const { encoding } = spec;\n    const continuousAxis = orient === 'vertical' ? 'y' : 'x';\n    const continuousAxisChannelDef = encoding[continuousAxis]; // Safe to cast because if x is not continuous fielddef, the orient would not be horizontal.\n    const continuousAxisChannelDef2 = encoding[continuousAxis + '2'];\n    const continuousAxisChannelDefError = encoding[continuousAxis + 'Error'];\n    const continuousAxisChannelDefError2 = encoding[continuousAxis + 'Error2'];\n    return {\n        continuousAxisChannelDef: filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark),\n        continuousAxisChannelDef2: filterAggregateFromChannelDef(continuousAxisChannelDef2, compositeMark),\n        continuousAxisChannelDefError: filterAggregateFromChannelDef(continuousAxisChannelDefError, compositeMark),\n        continuousAxisChannelDefError2: filterAggregateFromChannelDef(continuousAxisChannelDefError2, compositeMark),\n        continuousAxis\n    };\n}\nfunction filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark) {\n    if (isFieldDef(continuousAxisChannelDef) && continuousAxisChannelDef && continuousAxisChannelDef.aggregate) {\n        const { aggregate } = continuousAxisChannelDef, continuousAxisWithoutAggregate = tslib_1.__rest(continuousAxisChannelDef, [\"aggregate\"]);\n        if (aggregate !== compositeMark) {\n            log.warn(log.message.errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark));\n        }\n        return continuousAxisWithoutAggregate;\n    }\n    else {\n        return continuousAxisChannelDef;\n    }\n}\nexport function compositeMarkOrient(spec, compositeMark) {\n    const { mark, encoding } = spec;\n    if (isFieldDef(encoding.x) && isContinuous(encoding.x)) {\n        // x is continuous\n        if (isFieldDef(encoding.y) && isContinuous(encoding.y)) {\n            // both x and y are continuous\n            if (encoding.x.aggregate === undefined && encoding.y.aggregate === compositeMark) {\n                return 'vertical';\n            }\n            else if (encoding.y.aggregate === undefined && encoding.x.aggregate === compositeMark) {\n                return 'horizontal';\n            }\n            else if (encoding.x.aggregate === compositeMark && encoding.y.aggregate === compositeMark) {\n                throw new Error('Both x and y cannot have aggregate');\n            }\n            else {\n                if (isMarkDef(mark) && mark.orient) {\n                    return mark.orient;\n                }\n                // default orientation = vertical\n                return 'vertical';\n            }\n        }\n        // x is continuous but y is not\n        return 'horizontal';\n    }\n    else if (isFieldDef(encoding.y) && isContinuous(encoding.y)) {\n        // y is continuous but x is not\n        return 'vertical';\n    }\n    else {\n        // Neither x nor y is continuous.\n        throw new Error('Need a valid continuous axis for ' + compositeMark + 's');\n    }\n}\n//# sourceMappingURL=common.js.map","import * as tslib_1 from \"tslib\";\nimport { isNumber, isObject } from 'vega-util';\nimport { extractTransformsFromEncoding } from '../encoding';\nimport * as log from '../log';\nimport { isMarkDef } from '../mark';\nimport { getFirstDefined, keys } from '../util';\nimport { CompositeMarkNormalizer } from './base';\nimport { compositeMarkContinuousAxis, compositeMarkOrient, getCompositeMarkTooltip, makeCompositeAggregatePartFactory, partLayerMixins } from './common';\nexport const BOXPLOT = 'boxplot';\nconst BOXPLOT_PART_INDEX = {\n    box: 1,\n    median: 1,\n    outliers: 1,\n    rule: 1,\n    ticks: 1\n};\nexport const BOXPLOT_PARTS = keys(BOXPLOT_PART_INDEX);\nexport const boxPlotNormalizer = new CompositeMarkNormalizer(BOXPLOT, normalizeBoxPlot);\nexport function getBoxPlotType(extent) {\n    if (isNumber(extent)) {\n        return 'tukey';\n    }\n    // Ham: If we ever want to, we could add another extent syntax `{kIQR: number}` for the original [Q1-k*IQR, Q3+k*IQR] whisker and call this boxPlotType = `kIQR`.  However, I'm not exposing this for now.\n    return extent;\n}\nexport function normalizeBoxPlot(spec, { config }) {\n    // TODO: use selection\n    const { mark, encoding: _encoding, selection, projection: _p } = spec, outerSpec = tslib_1.__rest(spec, [\"mark\", \"encoding\", \"selection\", \"projection\"]);\n    const markDef = isMarkDef(mark) ? mark : { type: mark };\n    // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support\n    if (selection) {\n        log.warn(log.message.selectionNotSupported('boxplot'));\n    }\n    const extent = markDef.extent || config.boxplot.extent;\n    const sizeValue = getFirstDefined(markDef.size, config.boxplot.size);\n    const boxPlotType = getBoxPlotType(extent);\n    const { transform, continuousAxisChannelDef, continuousAxis, groupby, encodingWithoutContinuousAxis, ticksOrient } = boxParams(spec, extent, config);\n    const { color, size } = encodingWithoutContinuousAxis, encodingWithoutSizeColorAndContinuousAxis = tslib_1.__rest(encodingWithoutContinuousAxis, [\"color\", \"size\"]);\n    const makeBoxPlotPart = (sharedEncoding) => {\n        return makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, config.boxplot);\n    };\n    const makeBoxPlotExtent = makeBoxPlotPart(encodingWithoutSizeColorAndContinuousAxis);\n    const makeBoxPlotBox = makeBoxPlotPart(encodingWithoutContinuousAxis);\n    const makeBoxPlotMidTick = makeBoxPlotPart(Object.assign({}, encodingWithoutSizeColorAndContinuousAxis, (size ? { size } : {})));\n    const fiveSummaryTooltipEncoding = getCompositeMarkTooltip([\n        { fieldPrefix: boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_', titlePrefix: 'Max' },\n        { fieldPrefix: 'upper_box_', titlePrefix: 'Q3' },\n        { fieldPrefix: 'mid_box_', titlePrefix: 'Median' },\n        { fieldPrefix: 'lower_box_', titlePrefix: 'Q1' },\n        { fieldPrefix: boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_', titlePrefix: 'Min' }\n    ], continuousAxisChannelDef, encodingWithoutContinuousAxis);\n    // ## Whisker Layers\n    const endTick = { type: 'tick', color: 'black', opacity: 1, orient: ticksOrient };\n    const whiskerTooltipEncoding = boxPlotType === 'min-max'\n        ? fiveSummaryTooltipEncoding // for min-max, show five-summary tooltip for whisker\n        : // for tukey / k-IQR, just show upper/lower-whisker\n            getCompositeMarkTooltip([\n                { fieldPrefix: 'upper_whisker_', titlePrefix: 'Upper Whisker' },\n                { fieldPrefix: 'lower_whisker_', titlePrefix: 'Lower Whisker' }\n            ], continuousAxisChannelDef, encodingWithoutContinuousAxis);\n    const whiskerLayers = [\n        ...makeBoxPlotExtent({\n            partName: 'rule',\n            mark: 'rule',\n            positionPrefix: 'lower_whisker',\n            endPositionPrefix: 'lower_box',\n            extraEncoding: whiskerTooltipEncoding\n        }),\n        ...makeBoxPlotExtent({\n            partName: 'rule',\n            mark: 'rule',\n            positionPrefix: 'upper_box',\n            endPositionPrefix: 'upper_whisker',\n            extraEncoding: whiskerTooltipEncoding\n        }),\n        ...makeBoxPlotExtent({\n            partName: 'ticks',\n            mark: endTick,\n            positionPrefix: 'lower_whisker',\n            extraEncoding: whiskerTooltipEncoding\n        }),\n        ...makeBoxPlotExtent({\n            partName: 'ticks',\n            mark: endTick,\n            positionPrefix: 'upper_whisker',\n            extraEncoding: whiskerTooltipEncoding\n        })\n    ];\n    // ## Box Layers\n    // TODO: support hiding certain mark parts\n    const boxLayers = [\n        ...(boxPlotType !== 'tukey' ? whiskerLayers : []),\n        ...makeBoxPlotBox({\n            partName: 'box',\n            mark: Object.assign({ type: 'bar' }, (sizeValue ? { size: sizeValue } : {})),\n            positionPrefix: 'lower_box',\n            endPositionPrefix: 'upper_box',\n            extraEncoding: fiveSummaryTooltipEncoding\n        }),\n        ...makeBoxPlotMidTick({\n            partName: 'median',\n            mark: Object.assign({ type: 'tick' }, (isObject(config.boxplot.median) && config.boxplot.median.color ? { color: config.boxplot.median.color } : {}), (sizeValue ? { size: sizeValue } : {}), { orient: ticksOrient }),\n            positionPrefix: 'mid_box',\n            extraEncoding: fiveSummaryTooltipEncoding\n        })\n    ];\n    // ## Filtered Layers\n    let filteredLayersMixins;\n    if (boxPlotType !== 'min-max') {\n        const lowerBoxExpr = 'datum.lower_box_' + continuousAxisChannelDef.field;\n        const upperBoxExpr = 'datum.upper_box_' + continuousAxisChannelDef.field;\n        const iqrExpr = `(${upperBoxExpr} - ${lowerBoxExpr})`;\n        const lowerWhiskerExpr = `${lowerBoxExpr} - ${extent} * ${iqrExpr}`;\n        const upperWhiskerExpr = `${upperBoxExpr} + ${extent} * ${iqrExpr}`;\n        const fieldExpr = `datum.${continuousAxisChannelDef.field}`;\n        const joinaggregateTransform = {\n            joinaggregate: boxParamsQuartiles(continuousAxisChannelDef.field),\n            groupby\n        };\n        let filteredWhiskerSpec = undefined;\n        if (boxPlotType === 'tukey') {\n            filteredWhiskerSpec = {\n                transform: [\n                    {\n                        filter: `(${lowerWhiskerExpr} <= ${fieldExpr}) && (${fieldExpr} <= ${upperWhiskerExpr})`\n                    },\n                    {\n                        aggregate: [\n                            {\n                                op: 'min',\n                                field: continuousAxisChannelDef.field,\n                                as: 'lower_whisker_' + continuousAxisChannelDef.field\n                            },\n                            {\n                                op: 'max',\n                                field: continuousAxisChannelDef.field,\n                                as: 'upper_whisker_' + continuousAxisChannelDef.field\n                            },\n                            // preserve lower_box / upper_box\n                            {\n                                op: 'min',\n                                field: 'lower_box_' + continuousAxisChannelDef.field,\n                                as: 'lower_box_' + continuousAxisChannelDef.field\n                            },\n                            {\n                                op: 'max',\n                                field: 'upper_box_' + continuousAxisChannelDef.field,\n                                as: 'upper_box_' + continuousAxisChannelDef.field\n                            }\n                        ],\n                        groupby\n                    }\n                ],\n                layer: whiskerLayers\n            };\n        }\n        const outlierLayersMixins = partLayerMixins(markDef, 'outliers', config.boxplot, {\n            transform: [{ filter: `(${fieldExpr} < ${lowerWhiskerExpr}) || (${fieldExpr} > ${upperWhiskerExpr})` }],\n            mark: 'point',\n            encoding: Object.assign({ [continuousAxis]: {\n                    field: continuousAxisChannelDef.field,\n                    type: continuousAxisChannelDef.type\n                } }, encodingWithoutSizeColorAndContinuousAxis)\n        })[0];\n        if (outlierLayersMixins && filteredWhiskerSpec) {\n            filteredLayersMixins = {\n                transform: [joinaggregateTransform],\n                layer: [outlierLayersMixins, filteredWhiskerSpec]\n            };\n        }\n        else if (outlierLayersMixins) {\n            filteredLayersMixins = outlierLayersMixins;\n            filteredLayersMixins.transform.unshift(joinaggregateTransform);\n        }\n        else if (filteredWhiskerSpec) {\n            filteredLayersMixins = filteredWhiskerSpec;\n            filteredLayersMixins.transform.unshift(joinaggregateTransform);\n        }\n    }\n    if (filteredLayersMixins) {\n        // tukey box plot with outliers included\n        return Object.assign({}, outerSpec, { layer: [\n                ...(filteredLayersMixins ? [filteredLayersMixins] : []),\n                {\n                    // boxplot\n                    transform,\n                    layer: boxLayers\n                }\n            ] });\n    }\n    return Object.assign({}, outerSpec, { transform: (outerSpec.transform || []).concat(transform), layer: boxLayers });\n}\nfunction boxParamsQuartiles(continousAxisField) {\n    return [\n        {\n            op: 'q1',\n            field: continousAxisField,\n            as: 'lower_box_' + continousAxisField\n        },\n        {\n            op: 'q3',\n            field: continousAxisField,\n            as: 'upper_box_' + continousAxisField\n        }\n    ];\n}\nfunction boxParams(spec, extent, config) {\n    const orient = compositeMarkOrient(spec, BOXPLOT);\n    const { continuousAxisChannelDef, continuousAxis } = compositeMarkContinuousAxis(spec, orient, BOXPLOT);\n    const continuousFieldName = continuousAxisChannelDef.field;\n    const boxPlotType = getBoxPlotType(extent);\n    const boxplotSpecificAggregate = [\n        ...boxParamsQuartiles(continuousFieldName),\n        {\n            op: 'median',\n            field: continuousFieldName,\n            as: 'mid_box_' + continuousFieldName\n        },\n        {\n            op: 'min',\n            field: continuousFieldName,\n            as: (boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_') + continuousFieldName\n        },\n        {\n            op: 'max',\n            field: continuousFieldName,\n            as: (boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_') + continuousFieldName\n        }\n    ];\n    const postAggregateCalculates = boxPlotType === 'min-max' || boxPlotType === 'tukey'\n        ? []\n        : [\n            // This is for the  original k-IQR, which we do not expose\n            {\n                calculate: `datum.upper_box_${continuousFieldName} - datum.lower_box_${continuousFieldName}`,\n                as: 'iqr_' + continuousFieldName\n            },\n            {\n                calculate: `min(datum.upper_box_${continuousFieldName} + datum.iqr_${continuousFieldName} * ${extent}, datum.max_${continuousFieldName})`,\n                as: 'upper_whisker_' + continuousFieldName\n            },\n            {\n                calculate: `max(datum.lower_box_${continuousFieldName} - datum.iqr_${continuousFieldName} * ${extent}, datum.min_${continuousFieldName})`,\n                as: 'lower_whisker_' + continuousFieldName\n            }\n        ];\n    const _a = spec.encoding, _b = continuousAxis, oldContinuousAxisChannelDef = _a[_b], oldEncodingWithoutContinuousAxis = tslib_1.__rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n    const { bins, timeUnits, aggregate, groupby, encoding: encodingWithoutContinuousAxis } = extractTransformsFromEncoding(oldEncodingWithoutContinuousAxis, config);\n    const ticksOrient = orient === 'vertical' ? 'horizontal' : 'vertical';\n    return {\n        transform: [\n            ...bins,\n            ...timeUnits,\n            {\n                aggregate: [...aggregate, ...boxplotSpecificAggregate],\n                groupby\n            },\n            ...postAggregateCalculates\n        ],\n        groupby,\n        continuousAxisChannelDef,\n        continuousAxis,\n        encodingWithoutContinuousAxis,\n        ticksOrient\n    };\n}\n//# sourceMappingURL=boxplot.js.map","import * as tslib_1 from \"tslib\";\nimport { extractTransformsFromEncoding } from '../encoding';\nimport { isContinuous, isFieldDef, title } from '../fielddef';\nimport * as log from '../log';\nimport { isMarkDef } from '../mark';\nimport { keys, titlecase } from '../util';\nimport { CompositeMarkNormalizer } from './base';\nimport { compositeMarkContinuousAxis, compositeMarkOrient, getCompositeMarkTooltip, makeCompositeAggregatePartFactory } from './common';\nexport const ERRORBAR = 'errorbar';\nconst ERRORBAR_PART_INDEX = {\n    ticks: 1,\n    rule: 1\n};\nexport const ERRORBAR_PARTS = keys(ERRORBAR_PART_INDEX);\nexport const errorBarNormalizer = new CompositeMarkNormalizer(ERRORBAR, normalizeErrorBar);\nexport function normalizeErrorBar(spec, { config }) {\n    const { transform, continuousAxisChannelDef, continuousAxis, encodingWithoutContinuousAxis, ticksOrient, markDef, outerSpec, tooltipEncoding } = errorBarParams(spec, ERRORBAR, config);\n    const makeErrorBarPart = makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorbar);\n    const tick = { type: 'tick', orient: ticksOrient };\n    return Object.assign({}, outerSpec, { transform, layer: [\n            ...makeErrorBarPart({\n                partName: 'ticks',\n                mark: tick,\n                positionPrefix: 'lower',\n                extraEncoding: tooltipEncoding\n            }),\n            ...makeErrorBarPart({\n                partName: 'ticks',\n                mark: tick,\n                positionPrefix: 'upper',\n                extraEncoding: tooltipEncoding\n            }),\n            ...makeErrorBarPart({\n                partName: 'rule',\n                mark: 'rule',\n                positionPrefix: 'lower',\n                endPositionPrefix: 'upper',\n                extraEncoding: tooltipEncoding\n            })\n        ] });\n}\nfunction errorBarOrientAndInputType(spec, compositeMark) {\n    const { encoding } = spec;\n    if (errorBarIsInputTypeRaw(encoding)) {\n        return {\n            orient: compositeMarkOrient(spec, compositeMark),\n            inputType: 'raw'\n        };\n    }\n    const isTypeAggregatedUpperLower = errorBarIsInputTypeAggregatedUpperLower(encoding);\n    const isTypeAggregatedError = errorBarIsInputTypeAggregatedError(encoding);\n    const x = encoding.x;\n    const y = encoding.y;\n    if (isTypeAggregatedUpperLower) {\n        // type is aggregated-upper-lower\n        if (isTypeAggregatedError) {\n            throw new Error(compositeMark + ' cannot be both type aggregated-upper-lower and aggregated-error');\n        }\n        const x2 = encoding.x2;\n        const y2 = encoding.y2;\n        if (isFieldDef(x2) && isFieldDef(y2)) {\n            // having both x, x2 and y, y2\n            throw new Error(compositeMark + ' cannot have both x2 and y2');\n        }\n        else if (isFieldDef(x2)) {\n            if (isFieldDef(x) && isContinuous(x)) {\n                // having x, x2 quantitative and field y, y2 are not specified\n                return { orient: 'horizontal', inputType: 'aggregated-upper-lower' };\n            }\n            else {\n                // having x, x2 that are not both quantitative\n                throw new Error('Both x and x2 have to be quantitative in ' + compositeMark);\n            }\n        }\n        else if (isFieldDef(y2)) {\n            // y2 is a FieldDef\n            if (isFieldDef(y) && isContinuous(y)) {\n                // having y, y2 quantitative and field x, x2 are not specified\n                return { orient: 'vertical', inputType: 'aggregated-upper-lower' };\n            }\n            else {\n                // having y, y2 that are not both quantitative\n                throw new Error('Both y and y2 have to be quantitative in ' + compositeMark);\n            }\n        }\n        throw new Error('No ranged axis');\n    }\n    else {\n        // type is aggregated-error\n        const xError = encoding.xError;\n        const xError2 = encoding.xError2;\n        const yError = encoding.yError;\n        const yError2 = encoding.yError2;\n        if (isFieldDef(xError2) && !isFieldDef(xError)) {\n            // having xError2 without xError\n            throw new Error(compositeMark + ' cannot have xError2 without xError');\n        }\n        if (isFieldDef(yError2) && !isFieldDef(yError)) {\n            // having yError2 without yError\n            throw new Error(compositeMark + ' cannot have yError2 without yError');\n        }\n        if (isFieldDef(xError) && isFieldDef(yError)) {\n            // having both xError and yError\n            throw new Error(compositeMark + ' cannot have both xError and yError with both are quantiative');\n        }\n        else if (isFieldDef(xError)) {\n            if (isFieldDef(x) && isContinuous(x)) {\n                // having x and xError that are all quantitative\n                return { orient: 'horizontal', inputType: 'aggregated-error' };\n            }\n            else {\n                // having x, xError, and xError2 that are not all quantitative\n                throw new Error('All x, xError, and xError2 (if exist) have to be quantitative');\n            }\n        }\n        else if (isFieldDef(yError)) {\n            if (isFieldDef(y) && isContinuous(y)) {\n                // having y and yError that are all quantitative\n                return { orient: 'vertical', inputType: 'aggregated-error' };\n            }\n            else {\n                // having y, yError, and yError2 that are not all quantitative\n                throw new Error('All y, yError, and yError2 (if exist) have to be quantitative');\n            }\n        }\n        throw new Error('No ranged axis');\n    }\n}\nfunction errorBarIsInputTypeRaw(encoding) {\n    return ((isFieldDef(encoding.x) || isFieldDef(encoding.y)) &&\n        !isFieldDef(encoding.x2) &&\n        !isFieldDef(encoding.y2) &&\n        !isFieldDef(encoding.xError) &&\n        !isFieldDef(encoding.xError2) &&\n        !isFieldDef(encoding.yError) &&\n        !isFieldDef(encoding.yError2));\n}\nfunction errorBarIsInputTypeAggregatedUpperLower(encoding) {\n    return isFieldDef(encoding.x2) || isFieldDef(encoding.y2);\n}\nfunction errorBarIsInputTypeAggregatedError(encoding) {\n    return (isFieldDef(encoding.xError) ||\n        isFieldDef(encoding.xError2) ||\n        isFieldDef(encoding.yError) ||\n        isFieldDef(encoding.yError2));\n}\nexport function errorBarParams(spec, compositeMark, config) {\n    // TODO: use selection\n    const { mark, encoding, selection, projection: _p } = spec, outerSpec = tslib_1.__rest(spec, [\"mark\", \"encoding\", \"selection\", \"projection\"]);\n    const markDef = isMarkDef(mark) ? mark : { type: mark };\n    // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support\n    if (selection) {\n        log.warn(log.message.selectionNotSupported(compositeMark));\n    }\n    const { orient, inputType } = errorBarOrientAndInputType(spec, compositeMark);\n    const { continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, continuousAxis } = compositeMarkContinuousAxis(spec, orient, compositeMark);\n    const { errorBarSpecificAggregate, postAggregateCalculates, tooltipSummary, tooltipTitleWithFieldName } = errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config);\n    const _a = continuousAxis, oldContinuousAxisChannelDef = encoding[_a], _b = continuousAxis === 'x' ? 'x2' : 'y2', oldContinuousAxisChannelDef2 = encoding[_b], _c = continuousAxis === 'x' ? 'xError' : 'yError', oldContinuousAxisChannelDefError = encoding[_c], _d = continuousAxis === 'x' ? 'xError2' : 'yError2', oldContinuousAxisChannelDefError2 = encoding[_d], oldEncodingWithoutContinuousAxis = tslib_1.__rest(encoding, [typeof _a === \"symbol\" ? _a : _a + \"\", typeof _b === \"symbol\" ? _b : _b + \"\", typeof _c === \"symbol\" ? _c : _c + \"\", typeof _d === \"symbol\" ? _d : _d + \"\"]);\n    const { bins, timeUnits, aggregate: oldAggregate, groupby: oldGroupBy, encoding: encodingWithoutContinuousAxis } = extractTransformsFromEncoding(oldEncodingWithoutContinuousAxis, config);\n    const aggregate = [...oldAggregate, ...errorBarSpecificAggregate];\n    const groupby = inputType !== 'raw' ? [] : oldGroupBy;\n    const tooltipEncoding = getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, tooltipTitleWithFieldName);\n    return {\n        transform: [\n            ...(outerSpec.transform || []),\n            ...bins,\n            ...timeUnits,\n            ...(!aggregate.length ? [] : [{ aggregate, groupby }]),\n            ...postAggregateCalculates\n        ],\n        groupby,\n        continuousAxisChannelDef,\n        continuousAxis,\n        encodingWithoutContinuousAxis,\n        ticksOrient: orient === 'vertical' ? 'horizontal' : 'vertical',\n        markDef,\n        outerSpec,\n        tooltipEncoding\n    };\n}\nfunction errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config) {\n    let errorBarSpecificAggregate = [];\n    let postAggregateCalculates = [];\n    const continuousFieldName = continuousAxisChannelDef.field;\n    let tooltipSummary;\n    let tooltipTitleWithFieldName = false;\n    if (inputType === 'raw') {\n        const center = markDef.center\n            ? markDef.center\n            : markDef.extent\n                ? markDef.extent === 'iqr'\n                    ? 'median'\n                    : 'mean'\n                : config.errorbar.center;\n        const extent = markDef.extent ? markDef.extent : center === 'mean' ? 'stderr' : 'iqr';\n        if ((center === 'median') !== (extent === 'iqr')) {\n            log.warn(log.message.errorBarCenterIsUsedWithWrongExtent(center, extent, compositeMark));\n        }\n        if (extent === 'stderr' || extent === 'stdev') {\n            errorBarSpecificAggregate = [\n                { op: extent, field: continuousFieldName, as: 'extent_' + continuousFieldName },\n                { op: center, field: continuousFieldName, as: 'center_' + continuousFieldName }\n            ];\n            postAggregateCalculates = [\n                {\n                    calculate: `datum.center_${continuousFieldName} + datum.extent_${continuousFieldName}`,\n                    as: 'upper_' + continuousFieldName\n                },\n                {\n                    calculate: `datum.center_${continuousFieldName} - datum.extent_${continuousFieldName}`,\n                    as: 'lower_' + continuousFieldName\n                }\n            ];\n            tooltipSummary = [\n                { fieldPrefix: 'center_', titlePrefix: titlecase(center) },\n                { fieldPrefix: 'upper_', titlePrefix: getTitlePrefix(center, extent, '+') },\n                { fieldPrefix: 'lower_', titlePrefix: getTitlePrefix(center, extent, '-') }\n            ];\n            tooltipTitleWithFieldName = true;\n        }\n        else {\n            if (markDef.center && markDef.extent) {\n                log.warn(log.message.errorBarCenterIsNotNeeded(markDef.extent, compositeMark));\n            }\n            let centerOp;\n            let lowerExtentOp;\n            let upperExtentOp;\n            if (extent === 'ci') {\n                centerOp = 'mean';\n                lowerExtentOp = 'ci0';\n                upperExtentOp = 'ci1';\n            }\n            else {\n                centerOp = 'median';\n                lowerExtentOp = 'q1';\n                upperExtentOp = 'q3';\n            }\n            errorBarSpecificAggregate = [\n                { op: lowerExtentOp, field: continuousFieldName, as: 'lower_' + continuousFieldName },\n                { op: upperExtentOp, field: continuousFieldName, as: 'upper_' + continuousFieldName },\n                { op: centerOp, field: continuousFieldName, as: 'center_' + continuousFieldName }\n            ];\n            tooltipSummary = [\n                {\n                    fieldPrefix: 'upper_',\n                    titlePrefix: title({ field: continuousFieldName, aggregate: upperExtentOp, type: 'quantitative' }, config, {\n                        allowDisabling: false\n                    })\n                },\n                {\n                    fieldPrefix: 'lower_',\n                    titlePrefix: title({ field: continuousFieldName, aggregate: lowerExtentOp, type: 'quantitative' }, config, {\n                        allowDisabling: false\n                    })\n                },\n                {\n                    fieldPrefix: 'center_',\n                    titlePrefix: title({ field: continuousFieldName, aggregate: centerOp, type: 'quantitative' }, config, {\n                        allowDisabling: false\n                    })\n                }\n            ];\n        }\n    }\n    else {\n        if (markDef.center || markDef.extent) {\n            log.warn(log.message.errorBarCenterAndExtentAreNotNeeded(markDef.center, markDef.extent));\n        }\n        if (inputType === 'aggregated-upper-lower') {\n            tooltipSummary = [];\n            postAggregateCalculates = [\n                { calculate: `datum.${continuousAxisChannelDef2.field}`, as: `upper_` + continuousFieldName },\n                { calculate: `datum.${continuousFieldName}`, as: `lower_` + continuousFieldName }\n            ];\n        }\n        else if (inputType === 'aggregated-error') {\n            tooltipSummary = [{ fieldPrefix: '', titlePrefix: continuousFieldName }];\n            postAggregateCalculates = [\n                {\n                    calculate: `datum.${continuousFieldName} + datum.${continuousAxisChannelDefError.field}`,\n                    as: `upper_` + continuousFieldName\n                }\n            ];\n            if (continuousAxisChannelDefError2) {\n                postAggregateCalculates.push({\n                    calculate: `datum.${continuousFieldName} + datum.${continuousAxisChannelDefError2.field}`,\n                    as: `lower_` + continuousFieldName\n                });\n            }\n            else {\n                postAggregateCalculates.push({\n                    calculate: `datum.${continuousFieldName} - datum.${continuousAxisChannelDefError.field}`,\n                    as: `lower_` + continuousFieldName\n                });\n            }\n        }\n        for (const postAggregateCalculate of postAggregateCalculates) {\n            tooltipSummary.push({\n                fieldPrefix: postAggregateCalculate.as.substring(0, 6),\n                titlePrefix: postAggregateCalculate.calculate.replace(new RegExp('datum.', 'g'), '')\n            });\n        }\n    }\n    return { postAggregateCalculates, errorBarSpecificAggregate, tooltipSummary, tooltipTitleWithFieldName };\n}\nfunction getTitlePrefix(center, extent, operation) {\n    return titlecase(center) + ' ' + operation + ' ' + extent;\n}\n//# sourceMappingURL=errorbar.js.map","import * as log from '../log';\nimport { keys } from '../util';\nimport { CompositeMarkNormalizer } from './base';\nimport { makeCompositeAggregatePartFactory } from './common';\nimport { errorBarParams } from './errorbar';\nexport const ERRORBAND = 'errorband';\nconst ERRORBAND_PART_INDEX = {\n    band: 1,\n    borders: 1\n};\nexport const ERRORBAND_PARTS = keys(ERRORBAND_PART_INDEX);\nexport const errorBandNormalizer = new CompositeMarkNormalizer(ERRORBAND, normalizeErrorBand);\nexport function normalizeErrorBand(spec, { config }) {\n    const { transform, continuousAxisChannelDef, continuousAxis, encodingWithoutContinuousAxis, markDef, outerSpec, tooltipEncoding } = errorBarParams(spec, ERRORBAND, config);\n    const makeErrorBandPart = makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorband);\n    const is2D = spec.encoding.x !== undefined && spec.encoding.y !== undefined;\n    let bandMark = { type: is2D ? 'area' : 'rect' };\n    let bordersMark = { type: is2D ? 'line' : 'rule' };\n    const interpolate = Object.assign({}, (markDef.interpolate ? { interpolate: markDef.interpolate } : {}), (markDef.tension && markDef.interpolate ? { interpolate: markDef.tension } : {}));\n    if (is2D) {\n        bandMark = Object.assign({}, bandMark, interpolate);\n        bordersMark = Object.assign({}, bordersMark, interpolate);\n    }\n    else if (markDef.interpolate) {\n        log.warn(log.message.errorBand1DNotSupport('interpolate'));\n    }\n    else if (markDef.tension) {\n        log.warn(log.message.errorBand1DNotSupport('tension'));\n    }\n    return Object.assign({}, outerSpec, { transform, layer: [\n            ...makeErrorBandPart({\n                partName: 'band',\n                mark: bandMark,\n                positionPrefix: 'lower',\n                endPositionPrefix: 'upper',\n                extraEncoding: tooltipEncoding\n            }),\n            ...makeErrorBandPart({\n                partName: 'borders',\n                mark: bordersMark,\n                positionPrefix: 'lower',\n                extraEncoding: tooltipEncoding\n            }),\n            ...makeErrorBandPart({\n                partName: 'borders',\n                mark: bordersMark,\n                positionPrefix: 'upper',\n                extraEncoding: tooltipEncoding\n            })\n        ] });\n}\n//# sourceMappingURL=errorband.js.map","import { keys } from '../util';\nimport { CompositeMarkNormalizer } from './base';\nimport { BOXPLOT, BOXPLOT_PARTS, normalizeBoxPlot } from './boxplot';\nimport { ERRORBAND, ERRORBAND_PARTS, normalizeErrorBand } from './errorband';\nimport { ERRORBAR, ERRORBAR_PARTS, normalizeErrorBar } from './errorbar';\n/**\n * Registry index for all composite mark's normalizer\n */\nconst compositeMarkRegistry = {};\nexport function add(mark, run, parts) {\n    const normalizer = new CompositeMarkNormalizer(mark, run);\n    compositeMarkRegistry[mark] = { normalizer, parts };\n}\nexport function remove(mark) {\n    delete compositeMarkRegistry[mark];\n}\nexport function getAllCompositeMarks() {\n    return keys(compositeMarkRegistry);\n}\nadd(BOXPLOT, normalizeBoxPlot, BOXPLOT_PARTS);\nadd(ERRORBAR, normalizeErrorBar, ERRORBAR_PARTS);\nadd(ERRORBAND, normalizeErrorBand, ERRORBAND_PARTS);\n//# sourceMappingURL=index.js.map","export const VL_ONLY_GUIDE_CONFIG = ['shortTimeLabels'];\nexport const VL_ONLY_LEGEND_CONFIG = [\n    'gradientHorizontalMaxLength',\n    'gradientHorizontalMinLength',\n    'gradientVerticalMaxLength',\n    'gradientVerticalMinLength'\n];\n//# sourceMappingURL=guide.js.map","import { flagKeys } from './util';\nexport const defaultLegendConfig = {\n    gradientHorizontalMaxLength: 200,\n    gradientHorizontalMinLength: 100,\n    gradientVerticalMaxLength: 200,\n    gradientVerticalMinLength: 64 // This is the Vega's minimum.\n};\nconst COMMON_LEGEND_PROPERTY_INDEX = {\n    clipHeight: 1,\n    columnPadding: 1,\n    columns: 1,\n    cornerRadius: 1,\n    direction: 1,\n    fillColor: 1,\n    format: 1,\n    gradientLength: 1,\n    gradientOpacity: 1,\n    gradientStrokeColor: 1,\n    gradientStrokeWidth: 1,\n    gradientThickness: 1,\n    gridAlign: 1,\n    labelAlign: 1,\n    labelBaseline: 1,\n    labelColor: 1,\n    labelFont: 1,\n    labelFontSize: 1,\n    labelFontStyle: 1,\n    labelFontWeight: 1,\n    labelLimit: 1,\n    labelOffset: 1,\n    labelOpacity: 1,\n    labelOverlap: 1,\n    labelPadding: 1,\n    labelSeparation: 1,\n    offset: 1,\n    orient: 1,\n    padding: 1,\n    rowPadding: 1,\n    strokeColor: 1,\n    symbolFillColor: 1,\n    symbolOffset: 1,\n    symbolOpacity: 1,\n    symbolSize: 1,\n    symbolStrokeColor: 1,\n    symbolStrokeWidth: 1,\n    symbolType: 1,\n    tickCount: 1,\n    tickMinStep: 1,\n    title: 1,\n    titleAlign: 1,\n    titleBaseline: 1,\n    titleColor: 1,\n    titleFont: 1,\n    titleFontSize: 1,\n    titleFontStyle: 1,\n    titleFontWeight: 1,\n    titleLimit: 1,\n    titleOpacity: 1,\n    titlePadding: 1,\n    type: 1,\n    values: 1,\n    zindex: 1\n};\nconst VG_LEGEND_PROPERTY_INDEX = Object.assign({}, COMMON_LEGEND_PROPERTY_INDEX, { \n    // channel scales\n    opacity: 1, shape: 1, stroke: 1, fill: 1, size: 1, strokeWidth: 1, \n    // encode\n    encode: 1 });\nexport const LEGEND_PROPERTIES = flagKeys(COMMON_LEGEND_PROPERTY_INDEX);\nexport const VG_LEGEND_PROPERTIES = flagKeys(VG_LEGEND_PROPERTY_INDEX);\n//# sourceMappingURL=legend.js.map","import * as tslib_1 from \"tslib\";\nimport { toSet } from 'vega-util';\nimport { Channel, CHANNELS, isColorChannel } from './channel';\nimport * as log from './log';\nimport { Type, TYPE_INDEX } from './type';\nimport { contains, flagKeys, keys } from './util';\nexport var ScaleType;\n(function (ScaleType) {\n    // Continuous - Quantitative\n    ScaleType.LINEAR = 'linear';\n    ScaleType.LOG = 'log';\n    ScaleType.POW = 'pow';\n    ScaleType.SQRT = 'sqrt';\n    ScaleType.SYMLOG = 'symlog';\n    // Continuous - Time\n    ScaleType.TIME = 'time';\n    ScaleType.UTC = 'utc';\n    // Discretizing scales\n    ScaleType.QUANTILE = 'quantile';\n    ScaleType.QUANTIZE = 'quantize';\n    ScaleType.THRESHOLD = 'threshold';\n    ScaleType.BIN_ORDINAL = 'bin-ordinal';\n    // Discrete scales\n    ScaleType.ORDINAL = 'ordinal';\n    ScaleType.POINT = 'point';\n    ScaleType.BAND = 'band';\n})(ScaleType || (ScaleType = {}));\n/**\n * Index for scale categories -- only scale of the same categories can be merged together.\n * Current implementation is trying to be conservative and avoid merging scale type that might not work together\n */\nconst SCALE_CATEGORY_INDEX = {\n    linear: 'numeric',\n    log: 'numeric',\n    pow: 'numeric',\n    sqrt: 'numeric',\n    symlog: 'numeric',\n    time: 'time',\n    utc: 'time',\n    ordinal: 'ordinal',\n    'bin-ordinal': 'bin-ordinal',\n    point: 'ordinal-position',\n    band: 'ordinal-position',\n    quantile: 'discretizing',\n    quantize: 'discretizing',\n    threshold: 'discretizing'\n};\nexport const SCALE_TYPES = keys(SCALE_CATEGORY_INDEX);\n/**\n * Whether the two given scale types can be merged together.\n */\nexport function scaleCompatible(scaleType1, scaleType2) {\n    const scaleCategory1 = SCALE_CATEGORY_INDEX[scaleType1];\n    const scaleCategory2 = SCALE_CATEGORY_INDEX[scaleType2];\n    return (scaleCategory1 === scaleCategory2 ||\n        (scaleCategory1 === 'ordinal-position' && scaleCategory2 === 'time') ||\n        (scaleCategory2 === 'ordinal-position' && scaleCategory1 === 'time'));\n}\n/**\n * Index for scale precedence -- high score = higher priority for merging.\n */\nconst SCALE_PRECEDENCE_INDEX = {\n    // numeric\n    linear: 0,\n    log: 1,\n    pow: 1,\n    sqrt: 1,\n    symlog: 1,\n    // time\n    time: 0,\n    utc: 0,\n    // ordinal-position -- these have higher precedence than continuous scales as they support more types of data\n    point: 10,\n    band: 11,\n    // non grouped types\n    ordinal: 0,\n    'bin-ordinal': 0,\n    quantile: 0,\n    quantize: 0,\n    threshold: 0\n};\n/**\n * Return scale categories -- only scale of the same categories can be merged together.\n */\nexport function scaleTypePrecedence(scaleType) {\n    return SCALE_PRECEDENCE_INDEX[scaleType];\n}\nexport const CONTINUOUS_TO_CONTINUOUS_SCALES = ['linear', 'log', 'pow', 'sqrt', 'symlog', 'time', 'utc'];\nconst CONTINUOUS_TO_CONTINUOUS_INDEX = toSet(CONTINUOUS_TO_CONTINUOUS_SCALES);\nexport const CONTINUOUS_TO_DISCRETE_SCALES = ['quantile', 'quantize', 'threshold'];\nconst CONTINUOUS_TO_DISCRETE_INDEX = toSet(CONTINUOUS_TO_DISCRETE_SCALES);\nexport const CONTINUOUS_DOMAIN_SCALES = CONTINUOUS_TO_CONTINUOUS_SCALES.concat([\n    'quantile',\n    'quantize',\n    'threshold'\n]);\nconst CONTINUOUS_DOMAIN_INDEX = toSet(CONTINUOUS_DOMAIN_SCALES);\nexport const DISCRETE_DOMAIN_SCALES = ['ordinal', 'bin-ordinal', 'point', 'band'];\nconst DISCRETE_DOMAIN_INDEX = toSet(DISCRETE_DOMAIN_SCALES);\nexport const TIME_SCALE_TYPES = ['time', 'utc'];\nexport function hasDiscreteDomain(type) {\n    return type in DISCRETE_DOMAIN_INDEX;\n}\nexport function hasContinuousDomain(type) {\n    return type in CONTINUOUS_DOMAIN_INDEX;\n}\nexport function isContinuousToContinuous(type) {\n    return type in CONTINUOUS_TO_CONTINUOUS_INDEX;\n}\nexport function isContinuousToDiscrete(type) {\n    return type in CONTINUOUS_TO_DISCRETE_INDEX;\n}\nexport const defaultScaleConfig = {\n    textXRangeStep: 90,\n    rangeStep: 20,\n    pointPadding: 0.5,\n    barBandPaddingInner: 0.1,\n    rectBandPaddingInner: 0,\n    minBandSize: 2,\n    minFontSize: 8,\n    maxFontSize: 40,\n    minOpacity: 0.3,\n    maxOpacity: 0.8,\n    // FIXME: revise if these *can* become ratios of rangeStep\n    minSize: 9,\n    minStrokeWidth: 1,\n    maxStrokeWidth: 4,\n    quantileCount: 4,\n    quantizeCount: 4\n};\nexport function isExtendedScheme(scheme) {\n    return scheme && !!scheme['name'];\n}\nexport function isSelectionDomain(domain) {\n    return domain && domain['selection'];\n}\nconst SCALE_PROPERTY_INDEX = {\n    type: 1,\n    domain: 1,\n    range: 1,\n    rangeStep: 1,\n    scheme: 1,\n    bins: 1,\n    // Other properties\n    reverse: 1,\n    round: 1,\n    // quantitative / time\n    clamp: 1,\n    nice: 1,\n    // quantitative\n    base: 1,\n    exponent: 1,\n    constant: 1,\n    interpolate: 1,\n    zero: 1,\n    // band/point\n    padding: 1,\n    paddingInner: 1,\n    paddingOuter: 1\n};\nexport const SCALE_PROPERTIES = flagKeys(SCALE_PROPERTY_INDEX);\nconst { type, domain, range, rangeStep, scheme } = SCALE_PROPERTY_INDEX, NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX = tslib_1.__rest(SCALE_PROPERTY_INDEX, [\"type\", \"domain\", \"range\", \"rangeStep\", \"scheme\"]);\nexport const NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES = flagKeys(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX);\nexport const SCALE_TYPE_INDEX = generateScaleTypeIndex();\nexport function scaleTypeSupportProperty(scaleType, propName) {\n    switch (propName) {\n        case 'type':\n        case 'domain':\n        case 'reverse':\n        case 'range':\n            return true;\n        case 'scheme':\n        case 'interpolate':\n            return !contains(['point', 'band', 'identity'], scaleType);\n        case 'bins':\n            return !contains(['point', 'band', 'identity', 'ordinal'], scaleType);\n        case 'round':\n            return isContinuousToContinuous(scaleType) || scaleType === 'band' || scaleType === 'point';\n        case 'padding':\n            return isContinuousToContinuous(scaleType) || contains(['point', 'band'], scaleType);\n        case 'paddingOuter':\n        case 'rangeStep':\n            return contains(['point', 'band'], scaleType);\n        case 'paddingInner':\n            return scaleType === 'band';\n        case 'clamp':\n            return isContinuousToContinuous(scaleType);\n        case 'nice':\n            return isContinuousToContinuous(scaleType) || scaleType === 'quantize' || scaleType === 'threshold';\n        case 'exponent':\n            return scaleType === 'pow';\n        case 'base':\n            return scaleType === 'log';\n        case 'constant':\n            return scaleType === 'symlog';\n        case 'zero':\n            return (hasContinuousDomain(scaleType) &&\n                !contains([\n                    'log',\n                    'time',\n                    'utc',\n                    'threshold',\n                    'quantile' // quantile depends on distribution so zero does not matter\n                ], scaleType));\n    }\n    /* istanbul ignore next: should never reach here*/\n    throw new Error(`Invalid scale property ${propName}.`);\n}\n/**\n * Returns undefined if the input channel supports the input scale property name\n */\nexport function channelScalePropertyIncompatability(channel, propName) {\n    switch (propName) {\n        case 'interpolate':\n        case 'scheme':\n            if (!isColorChannel(channel)) {\n                return log.message.cannotUseScalePropertyWithNonColor(channel);\n            }\n            return undefined;\n        case 'type':\n        case 'bins':\n        case 'domain':\n        case 'range':\n        case 'base':\n        case 'exponent':\n        case 'constant':\n        case 'nice':\n        case 'padding':\n        case 'paddingInner':\n        case 'paddingOuter':\n        case 'rangeStep':\n        case 'reverse':\n        case 'round':\n        case 'clamp':\n        case 'zero':\n            return undefined; // GOOD!\n    }\n    /* istanbul ignore next: it should never reach here */\n    throw new Error(`Invalid scale property \"${propName}\".`);\n}\nexport function scaleTypeSupportDataType(specifiedType, fieldDefType) {\n    if (contains([Type.ORDINAL, Type.NOMINAL], fieldDefType)) {\n        return specifiedType === undefined || hasDiscreteDomain(specifiedType);\n    }\n    else if (fieldDefType === Type.TEMPORAL) {\n        return contains([ScaleType.TIME, ScaleType.UTC, undefined], specifiedType);\n    }\n    else if (fieldDefType === Type.QUANTITATIVE) {\n        return contains([\n            ScaleType.LOG,\n            ScaleType.POW,\n            ScaleType.SQRT,\n            ScaleType.SYMLOG,\n            ScaleType.QUANTILE,\n            ScaleType.QUANTIZE,\n            ScaleType.THRESHOLD,\n            ScaleType.LINEAR,\n            undefined\n        ], specifiedType);\n    }\n    return true;\n}\nexport function channelSupportScaleType(channel, scaleType) {\n    switch (channel) {\n        case Channel.X:\n        case Channel.Y:\n            return isContinuousToContinuous(scaleType) || contains(['band', 'point'], scaleType);\n        case Channel.SIZE: // TODO: size and opacity can support ordinal with more modification\n        case Channel.STROKEWIDTH:\n        case Channel.OPACITY:\n        case Channel.FILLOPACITY:\n        case Channel.STROKEOPACITY:\n            // Although it generally doesn't make sense to use band with size and opacity,\n            // it can also work since we use band: 0.5 to get midpoint.\n            return (isContinuousToContinuous(scaleType) ||\n                isContinuousToDiscrete(scaleType) ||\n                contains(['band', 'point'], scaleType));\n        case Channel.COLOR:\n        case Channel.FILL:\n        case Channel.STROKE:\n            return scaleType !== 'band'; // band does not make sense with color\n        case Channel.SHAPE:\n            return scaleType === 'ordinal'; // shape = lookup only\n    }\n    /* istanbul ignore next: it should never reach here */\n    return false;\n}\nexport function getSupportedScaleType(channel, fieldDefType) {\n    return SCALE_TYPE_INDEX[generateScaleTypeIndexKey(channel, fieldDefType)];\n}\n// generates ScaleTypeIndex where keys are encoding channels and values are list of valid ScaleTypes\nfunction generateScaleTypeIndex() {\n    const index = {};\n    for (const channel of CHANNELS) {\n        for (const fieldDefType of keys(TYPE_INDEX)) {\n            for (const scaleType of SCALE_TYPES) {\n                const key = generateScaleTypeIndexKey(channel, fieldDefType);\n                if (channelSupportScaleType(channel, scaleType) && scaleTypeSupportDataType(scaleType, fieldDefType)) {\n                    index[key] = index[key] || [];\n                    index[key].push(scaleType);\n                }\n            }\n        }\n    }\n    return index;\n}\nfunction generateScaleTypeIndexKey(channel, fieldDefType) {\n    return channel + '_' + fieldDefType;\n}\n//# sourceMappingURL=scale.js.map","export const SELECTION_ID = '_vgsid_';\nexport function isIntervalSelection(s) {\n    return s.type === 'interval';\n}\nexport const defaultConfig = {\n    single: {\n        on: 'click',\n        fields: [SELECTION_ID],\n        resolve: 'global',\n        empty: 'all'\n    },\n    multi: {\n        on: 'click',\n        fields: [SELECTION_ID],\n        toggle: 'event.shiftKey',\n        resolve: 'global',\n        empty: 'all'\n    },\n    interval: {\n        on: '[mousedown, window:mouseup] > window:mousemove!',\n        encodings: ['x', 'y'],\n        translate: '[mousedown, window:mouseup] > window:mousemove!',\n        zoom: 'wheel!',\n        mark: { fill: '#333', fillOpacity: 0.125, stroke: 'white' },\n        resolve: 'global'\n    }\n};\n//# sourceMappingURL=selection.js.map","import * as tslib_1 from \"tslib\";\nexport function extractTitleConfig(titleConfig) {\n    const { \n    // These are non-mark title config that need to be hardcoded\n    anchor, frame, offset, orient, \n    // color needs to be redirect to fill\n    color } = titleConfig, \n    // The rest are mark config.\n    titleMarkConfig = tslib_1.__rest(titleConfig, [\"anchor\", \"frame\", \"offset\", \"orient\", \"color\"]);\n    const mark = Object.assign({}, titleMarkConfig, (color ? { fill: color } : {}));\n    const nonMark = Object.assign({}, (anchor ? { anchor } : {}), (frame ? { frame } : {}), (offset ? { offset } : {}), (orient ? { orient } : {}));\n    return { mark, nonMark };\n}\n//# sourceMappingURL=title.js.map","import { isObject } from 'vega-util';\nimport { getAllCompositeMarks } from './compositemark';\nimport { VL_ONLY_GUIDE_CONFIG, VL_ONLY_LEGEND_CONFIG } from './guide';\nimport { defaultLegendConfig } from './legend';\nimport * as mark from './mark';\nimport { PRIMITIVE_MARKS, VL_ONLY_MARK_CONFIG_PROPERTIES, VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX } from './mark';\nimport { defaultScaleConfig } from './scale';\nimport { defaultConfig as defaultSelectionConfig } from './selection';\nimport { extractTitleConfig } from './title';\nimport { duplicate, keys, mergeDeep } from './util';\nexport const defaultViewConfig = {\n    width: 200,\n    height: 200\n};\nexport function isVgScheme(rangeConfig) {\n    return rangeConfig && !!rangeConfig['scheme'];\n}\nexport const defaultConfig = {\n    padding: 5,\n    timeFormat: '%b %d, %Y',\n    countTitle: 'Count of Records',\n    invalidValues: 'filter',\n    view: defaultViewConfig,\n    mark: mark.defaultMarkConfig,\n    area: {},\n    bar: mark.defaultBarConfig,\n    circle: {},\n    geoshape: {},\n    line: {},\n    point: {},\n    rect: {},\n    rule: { color: 'black' },\n    square: {},\n    text: { color: 'black' },\n    tick: mark.defaultTickConfig,\n    trail: {},\n    boxplot: {\n        size: 14,\n        extent: 1.5,\n        box: {},\n        median: { color: 'white' },\n        outliers: {},\n        rule: {},\n        ticks: null\n    },\n    errorbar: {\n        center: 'mean',\n        rule: true,\n        ticks: false\n    },\n    errorband: {\n        band: {\n            opacity: 0.3\n        },\n        borders: false\n    },\n    scale: defaultScaleConfig,\n    projection: {},\n    axis: {},\n    axisX: {},\n    axisY: { minExtent: 30 },\n    axisLeft: {},\n    axisRight: {},\n    axisTop: {},\n    axisBottom: {},\n    axisBand: {},\n    legend: defaultLegendConfig,\n    selection: defaultSelectionConfig,\n    style: {},\n    title: {}\n};\nexport function initConfig(config) {\n    return mergeDeep(duplicate(defaultConfig), config);\n}\nconst MARK_STYLES = ['view', ...PRIMITIVE_MARKS];\nconst VL_ONLY_CONFIG_PROPERTIES = [\n    'padding',\n    'numberFormat',\n    'timeFormat',\n    'countTitle',\n    'stack',\n    'scale',\n    'selection',\n    'invalidValues',\n    'overlay' // FIXME: Redesign and unhide this\n];\nconst VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = Object.assign({ view: ['width', 'height'] }, VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX);\nexport function stripAndRedirectConfig(config) {\n    config = duplicate(config);\n    for (const prop of VL_ONLY_CONFIG_PROPERTIES) {\n        delete config[prop];\n    }\n    // Remove Vega-Lite only axis/legend config\n    if (config.axis) {\n        for (const prop of VL_ONLY_GUIDE_CONFIG) {\n            delete config.axis[prop];\n        }\n    }\n    if (config.legend) {\n        for (const prop of VL_ONLY_GUIDE_CONFIG) {\n            delete config.legend[prop];\n        }\n        for (const prop of VL_ONLY_LEGEND_CONFIG) {\n            delete config.legend[prop];\n        }\n    }\n    // Remove Vega-Lite only generic mark config\n    if (config.mark) {\n        for (const prop of VL_ONLY_MARK_CONFIG_PROPERTIES) {\n            delete config.mark[prop];\n        }\n    }\n    for (const markType of MARK_STYLES) {\n        // Remove Vega-Lite-only mark config\n        for (const prop of VL_ONLY_MARK_CONFIG_PROPERTIES) {\n            delete config[markType][prop];\n        }\n        // Remove Vega-Lite only mark-specific config\n        const vlOnlyMarkSpecificConfigs = VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX[markType];\n        if (vlOnlyMarkSpecificConfigs) {\n            for (const prop of vlOnlyMarkSpecificConfigs) {\n                delete config[markType][prop];\n            }\n        }\n        // Redirect mark config to config.style so that mark config only affect its own mark type\n        // without affecting other marks that share the same underlying Vega marks.\n        // For example, config.rect should not affect bar marks.\n        redirectConfig(config, markType);\n    }\n    for (const m of getAllCompositeMarks()) {\n        // Clean up the composite mark config as we don't need them in the output specs anymore\n        delete config[m];\n    }\n    // Redirect config.title -- so that title config do not\n    // affect header labels, which also uses `title` directive to implement.\n    redirectConfig(config, 'title', 'group-title');\n    // Remove empty config objects\n    for (const prop in config) {\n        if (isObject(config[prop]) && keys(config[prop]).length === 0) {\n            delete config[prop];\n        }\n    }\n    return keys(config).length > 0 ? config : undefined;\n}\nfunction redirectConfig(config, prop, // string = composite mark\ntoProp, compositeMarkPart) {\n    const propConfig = prop === 'title'\n        ? extractTitleConfig(config.title).mark\n        : compositeMarkPart\n            ? config[prop][compositeMarkPart]\n            : config[prop];\n    if (prop === 'view') {\n        toProp = 'cell'; // View's default style is \"cell\"\n    }\n    const style = Object.assign({}, propConfig, config.style[prop]);\n    // set config.style if it is not an empty object\n    if (keys(style).length > 0) {\n        config.style[toProp || prop] = style;\n    }\n    if (!compositeMarkPart) {\n        // For composite mark, so don't delete the whole config yet as we have to do multiple redirections.\n        delete config[prop];\n    }\n}\n//# sourceMappingURL=config.js.map","export function isUrlData(data) {\n    return !!data['url'];\n}\nexport function isInlineData(data) {\n    return !!data['values'];\n}\nexport function isNamedData(data) {\n    return !!data['name'] && !isUrlData(data) && !isInlineData(data);\n}\nexport const MAIN = 'main';\nexport const RAW = 'raw';\n//# sourceMappingURL=data.js.map","import { keys } from './util';\nexport const HEADER_TITLE_PROPERTIES_MAP = {\n    titleAnchor: 'anchor',\n    titleAngle: 'angle',\n    titleBaseline: 'baseline',\n    titleColor: 'color',\n    titleFont: 'font',\n    titleFontSize: 'fontSize',\n    titleFontWeight: 'fontWeight',\n    titleLimit: 'limit',\n    titlePadding: 'offset'\n};\nexport const HEADER_LABEL_PROPERTIES_MAP = {\n    labelAngle: 'angle',\n    labelColor: 'color',\n    labelFont: 'font',\n    labelFontSize: 'fontSize',\n    labelLimit: 'limit',\n    labelPadding: 'offset'\n};\nexport const HEADER_TITLE_PROPERTIES = keys(HEADER_TITLE_PROPERTIES_MAP);\nexport const HEADER_LABEL_PROPERTIES = keys(HEADER_LABEL_PROPERTIES_MAP);\n//# sourceMappingURL=header.js.map","export function isConcatSpec(spec) {\n    return isVConcatSpec(spec) || isHConcatSpec(spec);\n}\nexport function isVConcatSpec(spec) {\n    return spec['vconcat'] !== undefined;\n}\nexport function isHConcatSpec(spec) {\n    return spec['hconcat'] !== undefined;\n}\n//# sourceMappingURL=concat.js.map","export function isLayerSpec(spec) {\n    return spec['layer'] !== undefined;\n}\n//# sourceMappingURL=layer.js.map","export function isRepeatSpec(spec) {\n    return spec['repeat'] !== undefined;\n}\n//# sourceMappingURL=repeat.js.map","import * as log from '../log';\nimport { isHConcatSpec, isVConcatSpec } from './concat';\nimport { isFacetSpec } from './facet';\nimport { isLayerSpec } from './layer';\nimport { isRepeatSpec } from './repeat';\nimport { isUnitSpec } from './unit';\nexport class SpecMapper {\n    map(spec, params) {\n        if (isFacetSpec(spec)) {\n            return this.mapFacet(spec, params);\n        }\n        else if (isRepeatSpec(spec)) {\n            return this.mapRepeat(spec, params);\n        }\n        else if (isHConcatSpec(spec)) {\n            return this.mapHConcat(spec, params);\n        }\n        else if (isVConcatSpec(spec)) {\n            return this.mapVConcat(spec, params);\n        }\n        else {\n            return this.mapLayerOrUnit(spec, params);\n        }\n    }\n    mapLayerOrUnit(spec, params) {\n        if (isLayerSpec(spec)) {\n            return this.mapLayer(spec, params);\n        }\n        else if (isUnitSpec(spec)) {\n            return this.mapUnit(spec, params);\n        }\n        throw new Error(log.message.INVALID_SPEC);\n    }\n    mapLayer(spec, params) {\n        return Object.assign({}, spec, { layer: spec.layer.map(subspec => this.mapLayerOrUnit(subspec, params)) });\n    }\n    mapHConcat(spec, params) {\n        return Object.assign({}, spec, { hconcat: spec.hconcat.map(subspec => this.map(subspec, params)) });\n    }\n    mapVConcat(spec, params) {\n        return Object.assign({}, spec, { vconcat: spec.vconcat.map(subspec => this.map(subspec, params)) });\n    }\n    mapFacet(spec, params) {\n        return Object.assign({}, spec, { \n            // TODO: remove \"any\" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760\n            spec: this.map(spec.spec, params) });\n    }\n    mapRepeat(spec, params) {\n        return Object.assign({}, spec, { spec: this.map(spec.spec, params) });\n    }\n}\n//# sourceMappingURL=map.js.map","import { isArray } from 'vega-util';\nimport { SUM_OPS } from './aggregate';\nimport { NONPOSITION_CHANNELS, X, X2, Y2 } from './channel';\nimport { channelHasField } from './encoding';\nimport { getTypedFieldDef, isFieldDef, isStringFieldDef, vgField } from './fielddef';\nimport * as log from './log';\nimport { AREA, BAR, CIRCLE, isMarkDef, isPathMark, LINE, POINT, RULE, SQUARE, TEXT, TICK } from './mark';\nimport { ScaleType } from './scale';\nimport { contains, getFirstDefined } from './util';\nconst STACK_OFFSET_INDEX = {\n    zero: 1,\n    center: 1,\n    normalize: 1\n};\nexport function isStackOffset(s) {\n    return !!STACK_OFFSET_INDEX[s];\n}\nexport const STACKABLE_MARKS = [BAR, AREA, RULE, POINT, CIRCLE, SQUARE, LINE, TEXT, TICK];\nexport const STACK_BY_DEFAULT_MARKS = [BAR, AREA];\nfunction potentialStackedChannel(encoding) {\n    const xDef = encoding.x;\n    const yDef = encoding.y;\n    if (isFieldDef(xDef) && isFieldDef(yDef)) {\n        if (xDef.type === 'quantitative' && yDef.type === 'quantitative') {\n            if (xDef.stack) {\n                return 'x';\n            }\n            else if (yDef.stack) {\n                return 'y';\n            }\n            // if there is no explicit stacking, only apply stack if there is only one aggregate for x or y\n            if (!!xDef.aggregate !== !!yDef.aggregate) {\n                return xDef.aggregate ? 'x' : 'y';\n            }\n        }\n        else if (xDef.type === 'quantitative') {\n            return 'x';\n        }\n        else if (yDef.type === 'quantitative') {\n            return 'y';\n        }\n    }\n    else if (isFieldDef(xDef) && xDef.type === 'quantitative') {\n        return 'x';\n    }\n    else if (isFieldDef(yDef) && yDef.type === 'quantitative') {\n        return 'y';\n    }\n    return undefined;\n}\n// Note: CompassQL uses this method and only pass in required properties of each argument object.\n// If required properties change, make sure to update CompassQL.\nexport function stack(m, encoding, stackConfig) {\n    const mark = isMarkDef(m) ? m.type : m;\n    // Should have stackable mark\n    if (!contains(STACKABLE_MARKS, mark)) {\n        return null;\n    }\n    const fieldChannel = potentialStackedChannel(encoding);\n    if (!fieldChannel) {\n        return null;\n    }\n    const stackedFieldDef = encoding[fieldChannel];\n    const stackedField = isStringFieldDef(stackedFieldDef) ? vgField(stackedFieldDef, {}) : undefined;\n    const dimensionChannel = fieldChannel === 'x' ? 'y' : 'x';\n    const dimensionDef = encoding[dimensionChannel];\n    const dimensionField = isStringFieldDef(dimensionDef) ? vgField(dimensionDef, {}) : undefined;\n    // Should have grouping level of detail that is different from the dimension field\n    const stackBy = NONPOSITION_CHANNELS.reduce((sc, channel) => {\n        // Ignore tooltip in stackBy (https://github.com/vega/vega-lite/issues/4001)\n        if (channel !== 'tooltip' && channelHasField(encoding, channel)) {\n            const channelDef = encoding[channel];\n            (isArray(channelDef) ? channelDef : [channelDef]).forEach(cDef => {\n                const fieldDef = getTypedFieldDef(cDef);\n                if (fieldDef.aggregate) {\n                    return;\n                }\n                // Check whether the channel's field is identical to x/y's field or if the channel is a repeat\n                const f = isStringFieldDef(fieldDef) ? vgField(fieldDef, {}) : undefined;\n                if (\n                // if fielddef is a repeat, just include it in the stack by\n                !f ||\n                    // otherwise, the field must be different from x and y fields.\n                    (f !== dimensionField && f !== stackedField)) {\n                    sc.push({ channel, fieldDef });\n                }\n            });\n        }\n        return sc;\n    }, []);\n    if (stackBy.length === 0) {\n        return null;\n    }\n    // Automatically determine offset\n    let offset;\n    if (stackedFieldDef.stack !== undefined) {\n        offset = stackedFieldDef.stack;\n    }\n    else if (contains(STACK_BY_DEFAULT_MARKS, mark)) {\n        // Bar and Area with sum ops are automatically stacked by default\n        offset = getFirstDefined(stackConfig, 'zero');\n    }\n    else {\n        offset = stackConfig;\n    }\n    if (!offset || !isStackOffset(offset)) {\n        return null;\n    }\n    // warn when stacking non-linear\n    if (stackedFieldDef.scale && stackedFieldDef.scale.type && stackedFieldDef.scale.type !== ScaleType.LINEAR) {\n        log.warn(log.message.cannotStackNonLinearScale(stackedFieldDef.scale.type));\n    }\n    // Check if it is a ranged mark\n    if (channelHasField(encoding, fieldChannel === X ? X2 : Y2)) {\n        if (stackedFieldDef.stack !== undefined) {\n            log.warn(log.message.cannotStackRangedMark(fieldChannel));\n        }\n        return null;\n    }\n    // Warn if stacking summative aggregate\n    if (stackedFieldDef.aggregate && !contains(SUM_OPS, stackedFieldDef.aggregate)) {\n        log.warn(log.message.stackNonSummativeAggregate(stackedFieldDef.aggregate));\n    }\n    return {\n        groupbyChannel: dimensionDef ? dimensionChannel : undefined,\n        fieldChannel,\n        impute: isPathMark(mark),\n        stackBy,\n        offset\n    };\n}\n//# sourceMappingURL=stack.js.map","import * as tslib_1 from \"tslib\";\nimport { isObject } from 'vega-util';\nimport { isMarkDef } from '../mark';\nimport { isUnitSpec } from '../spec/unit';\nimport { stack } from '../stack';\nimport { keys, omit, pick } from '../util';\nfunction dropLineAndPoint(markDef) {\n    const { point: _point, line: _line } = markDef, mark = tslib_1.__rest(markDef, [\"point\", \"line\"]);\n    return keys(mark).length > 1 ? mark : mark.type;\n}\nfunction dropLineAndPointFromConfig(config) {\n    for (const mark of ['line', 'area', 'rule', 'trail']) {\n        if (config[mark]) {\n            config = Object.assign({}, config, { [mark]: omit(config[mark], ['point', 'line']) });\n        }\n    }\n    return config;\n}\nfunction getPointOverlay(markDef, markConfig = {}, encoding) {\n    if (markDef.point === 'transparent') {\n        return { opacity: 0 };\n    }\n    else if (markDef.point) {\n        // truthy : true or object\n        return isObject(markDef.point) ? markDef.point : {};\n    }\n    else if (markDef.point !== undefined) {\n        // false or null\n        return null;\n    }\n    else {\n        // undefined (not disabled)\n        if (markConfig.point || encoding.shape) {\n            // enable point overlay if config[mark].point is truthy or if encoding.shape is provided\n            return isObject(markConfig.point) ? markConfig.point : {};\n        }\n        // markDef.point is defined as falsy\n        return undefined;\n    }\n}\nfunction getLineOverlay(markDef, markConfig = {}) {\n    if (markDef.line) {\n        // true or object\n        return markDef.line === true ? {} : markDef.line;\n    }\n    else if (markDef.line !== undefined) {\n        // false or null\n        return null;\n    }\n    else {\n        // undefined (not disabled)\n        if (markConfig.line) {\n            // enable line overlay if config[mark].line is truthy\n            return markConfig.line === true ? {} : markConfig.line;\n        }\n        // markDef.point is defined as falsy\n        return undefined;\n    }\n}\nexport class PathOverlayNormalizer {\n    constructor() {\n        this.name = 'path-overlay';\n    }\n    hasMatchingType(spec, config) {\n        if (isUnitSpec(spec)) {\n            const { mark, encoding } = spec;\n            const markDef = isMarkDef(mark) ? mark : { type: mark };\n            switch (markDef.type) {\n                case 'line':\n                case 'rule':\n                case 'trail':\n                    return !!getPointOverlay(markDef, config[markDef.type], encoding);\n                case 'area':\n                    return (\n                    // false / null are also included as we want to remove the properties\n                    !!getPointOverlay(markDef, config[markDef.type], encoding) ||\n                        !!getLineOverlay(markDef, config[markDef.type]));\n            }\n        }\n        return false;\n    }\n    run(spec, params, normalize) {\n        const { config } = params;\n        const { selection, projection, encoding, mark } = spec, outerSpec = tslib_1.__rest(spec, [\"selection\", \"projection\", \"encoding\", \"mark\"]);\n        const markDef = isMarkDef(mark) ? mark : { type: mark };\n        const pointOverlay = getPointOverlay(markDef, config[markDef.type], encoding);\n        const lineOverlay = markDef.type === 'area' && getLineOverlay(markDef, config[markDef.type]);\n        const layer = [\n            Object.assign({}, (selection ? { selection } : {}), { \n                // Do not include point / line overlay in the normalize spec\n                mark: dropLineAndPoint(Object.assign({}, markDef, (markDef.type === 'area' ? { opacity: 0.7 } : {}))), \n                // drop shape from encoding as this might be used to trigger point overlay\n                encoding: omit(encoding, ['shape']) })\n        ];\n        // FIXME: determine rules for applying selections.\n        // Need to copy stack config to overlayed layer\n        const stackProps = stack(markDef, encoding, config ? config.stack : undefined);\n        let overlayEncoding = encoding;\n        if (stackProps) {\n            const { fieldChannel: stackFieldChannel, offset } = stackProps;\n            overlayEncoding = Object.assign({}, encoding, { [stackFieldChannel]: Object.assign({}, encoding[stackFieldChannel], (offset ? { stack: offset } : {})) });\n        }\n        if (lineOverlay) {\n            layer.push(Object.assign({}, (projection ? { projection } : {}), { mark: Object.assign({ type: 'line' }, pick(markDef, ['clip', 'interpolate', 'tension']), lineOverlay), encoding: overlayEncoding }));\n        }\n        if (pointOverlay) {\n            layer.push(Object.assign({}, (projection ? { projection } : {}), { mark: Object.assign({ type: 'point', opacity: 1, filled: true }, pick(markDef, ['clip']), pointOverlay), encoding: overlayEncoding }));\n        }\n        return normalize(Object.assign({}, outerSpec, { layer }), Object.assign({}, params, { config: dropLineAndPointFromConfig(config) }));\n    }\n}\n//# sourceMappingURL=pathoverlay.js.map","import * as log from '../log';\nimport { isUnitSpec } from '../spec/unit';\nexport class RuleForRangedLineNormalizer {\n    constructor() {\n        this.name = 'RuleForRangedLine';\n    }\n    hasMatchingType(spec) {\n        if (isUnitSpec(spec)) {\n            const { encoding, mark } = spec;\n            return mark === 'line' && (!!encoding['x2'] || !!encoding['y2']);\n        }\n        return false;\n    }\n    run(spec, params, normalize) {\n        const { encoding } = spec;\n        log.warn(log.message.lineWithRange(!!encoding.x2, !!encoding.y2));\n        return normalize(Object.assign({}, spec, { mark: 'rule' }), params);\n    }\n}\n//# sourceMappingURL=ruleforrangedline.js.map","import * as tslib_1 from \"tslib\";\nimport { COLUMN, ROW } from '../channel';\nimport { boxPlotNormalizer } from '../compositemark/boxplot';\nimport { errorBandNormalizer } from '../compositemark/errorband';\nimport { errorBarNormalizer } from '../compositemark/errorbar';\nimport { channelHasField } from '../encoding';\nimport * as log from '../log';\nimport { SpecMapper } from '../spec/map';\nimport { isUnitSpec } from '../spec/unit';\nimport { keys } from '../util';\nimport { PathOverlayNormalizer } from './pathoverlay';\nimport { RuleForRangedLineNormalizer } from './ruleforrangedline';\nexport class CoreNormalizer extends SpecMapper {\n    constructor() {\n        super(...arguments);\n        this.nonFacetUnitNormalizers = [\n            boxPlotNormalizer,\n            errorBarNormalizer,\n            errorBandNormalizer,\n            new PathOverlayNormalizer(),\n            new RuleForRangedLineNormalizer()\n        ];\n    }\n    map(spec, params) {\n        // Special handling for a faceted unit spec as it can return a facet spec, not just a layer or unit spec like a normal unit spec.\n        if (isUnitSpec(spec)) {\n            const hasRow = channelHasField(spec.encoding, ROW);\n            const hasColumn = channelHasField(spec.encoding, COLUMN);\n            if (hasRow || hasColumn) {\n                return this.mapFacetedUnit(spec, params);\n            }\n        }\n        return super.map(spec, params);\n    }\n    // This is for normalizing non-facet unit\n    mapUnit(spec, params) {\n        const { parentEncoding, parentProjection } = params;\n        if (parentEncoding || parentProjection) {\n            return this.mapUnitWithParentEncodingOrProjection(spec, params);\n        }\n        const normalizeLayerOrUnit = this.mapLayerOrUnit.bind(this);\n        for (const unitNormalizer of this.nonFacetUnitNormalizers) {\n            if (unitNormalizer.hasMatchingType(spec, params.config)) {\n                return unitNormalizer.run(spec, params, normalizeLayerOrUnit);\n            }\n        }\n        return spec;\n    }\n    mapUnitWithParentEncodingOrProjection(spec, params) {\n        const { encoding, projection } = spec;\n        const { parentEncoding, parentProjection, config } = params;\n        const mergedProjection = mergeProjection({ parentProjection, projection });\n        const mergedEncoding = mergeEncoding({ parentEncoding, encoding });\n        return this.mapUnit(Object.assign({}, spec, (mergedProjection ? { projection: mergedProjection } : {}), (mergedEncoding ? { encoding: mergedEncoding } : {})), { config });\n    }\n    mapFacetedUnit(spec, params) {\n        // New encoding in the inside spec should not contain row / column\n        // as row/column should be moved to facet\n        const _a = spec.encoding, { row, column } = _a, encoding = tslib_1.__rest(_a, [\"row\", \"column\"]);\n        // Mark and encoding should be moved into the inner spec\n        const { mark, width, projection, height, selection, encoding: _ } = spec, outerSpec = tslib_1.__rest(spec, [\"mark\", \"width\", \"projection\", \"height\", \"selection\", \"encoding\"]);\n        return Object.assign({}, outerSpec, { facet: Object.assign({}, (row ? { row } : {}), (column ? { column } : {})), spec: this.mapUnit(Object.assign({}, (projection ? { projection } : {}), { mark }, (width ? { width } : {}), (height ? { height } : {}), { encoding }, (selection ? { selection } : {})), params) });\n    }\n    mapLayer(spec, _a) {\n        // Special handling for extended layer spec\n        var { parentEncoding, parentProjection } = _a, otherParams = tslib_1.__rest(_a, [\"parentEncoding\", \"parentProjection\"]);\n        const { encoding, projection } = spec, rest = tslib_1.__rest(spec, [\"encoding\", \"projection\"]);\n        const params = Object.assign({}, otherParams, { parentEncoding: mergeEncoding({ parentEncoding, encoding }), parentProjection: mergeProjection({ parentProjection, projection }) });\n        return super.mapLayer(rest, params);\n    }\n}\nfunction mergeEncoding(opt) {\n    const { parentEncoding, encoding } = opt;\n    if (parentEncoding && encoding) {\n        const overriden = keys(parentEncoding).reduce((o, key) => {\n            if (encoding[key]) {\n                o.push(key);\n            }\n            return o;\n        }, []);\n        if (overriden.length > 0) {\n            log.warn(log.message.encodingOverridden(overriden));\n        }\n    }\n    const merged = Object.assign({}, (parentEncoding || {}), (encoding || {}));\n    return keys(merged).length > 0 ? merged : undefined;\n}\nfunction mergeProjection(opt) {\n    const { parentProjection, projection } = opt;\n    if (parentProjection && projection) {\n        log.warn(log.message.projectionOverridden({ parentProjection, projection }));\n    }\n    return projection || parentProjection;\n}\n//# sourceMappingURL=core.js.map","import { initConfig } from '../config';\nimport { CoreNormalizer } from './core';\nexport function normalize(spec, config) {\n    if (config === undefined) {\n        config = initConfig(spec.config);\n    }\n    return normalizeGenericSpec(spec, config);\n}\nconst normalizer = new CoreNormalizer();\n/**\n * Decompose extended unit specs into composition of pure unit specs.\n */\nfunction normalizeGenericSpec(spec, config = {}) {\n    return normalizer.map(spec, { config });\n}\n//# sourceMappingURL=index.js.map","import { isArray } from 'vega-util';\nexport const DEFAULT_SORT_OP = 'mean';\nexport function isSortByEncoding(sort) {\n    return !!sort && !!sort['encoding'];\n}\nexport function isSortField(sort) {\n    return !!sort && (sort['op'] === 'count' || !!sort['field']);\n}\nexport function isSortArray(sort) {\n    return !!sort && isArray(sort);\n}\n//# sourceMappingURL=sort.js.map","import { isArray } from 'vega-util';\nimport { valueExpr, vgField } from './fielddef';\nimport { fieldExpr as timeUnitFieldExpr, normalizeTimeUnit } from './timeunit';\nexport function isSelectionPredicate(predicate) {\n    return predicate && predicate['selection'];\n}\nexport function isFieldEqualPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.equal !== undefined;\n}\nexport function isFieldLTPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.lt !== undefined;\n}\nexport function isFieldLTEPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.lte !== undefined;\n}\nexport function isFieldGTPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.gt !== undefined;\n}\nexport function isFieldGTEPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.gte !== undefined;\n}\nexport function isFieldRangePredicate(predicate) {\n    if (predicate && predicate.field) {\n        if (isArray(predicate.range) && predicate.range.length === 2) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function isFieldOneOfPredicate(predicate) {\n    return (predicate && !!predicate.field && (isArray(predicate.oneOf) || isArray(predicate.in)) // backward compatibility\n    );\n}\nexport function isFieldValidPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.valid !== undefined;\n}\nexport function isFieldPredicate(predicate) {\n    return (isFieldOneOfPredicate(predicate) ||\n        isFieldEqualPredicate(predicate) ||\n        isFieldRangePredicate(predicate) ||\n        isFieldLTPredicate(predicate) ||\n        isFieldGTPredicate(predicate) ||\n        isFieldLTEPredicate(predicate) ||\n        isFieldGTEPredicate(predicate));\n}\nfunction predicateValueExpr(v, timeUnit) {\n    return valueExpr(v, { timeUnit, time: true });\n}\nfunction predicateValuesExpr(vals, timeUnit) {\n    return vals.map(v => predicateValueExpr(v, timeUnit));\n}\n// This method is used by Voyager.  Do not change its behavior without changing Voyager.\nexport function fieldFilterExpression(predicate, useInRange = true) {\n    const { field, timeUnit } = predicate;\n    const fieldExpr = timeUnit\n        ? // For timeUnit, cast into integer with time() so we can use ===, inrange, indexOf to compare values directly.\n            // TODO: We calculate timeUnit on the fly here. Consider if we would like to consolidate this with timeUnit pipeline\n            // TODO: support utc\n            'time(' + timeUnitFieldExpr(timeUnit, field) + ')'\n        : vgField(predicate, { expr: 'datum' });\n    if (isFieldEqualPredicate(predicate)) {\n        return fieldExpr + '===' + predicateValueExpr(predicate.equal, timeUnit);\n    }\n    else if (isFieldLTPredicate(predicate)) {\n        const upper = predicate.lt;\n        return `${fieldExpr}<${predicateValueExpr(upper, timeUnit)}`;\n    }\n    else if (isFieldGTPredicate(predicate)) {\n        const lower = predicate.gt;\n        return `${fieldExpr}>${predicateValueExpr(lower, timeUnit)}`;\n    }\n    else if (isFieldLTEPredicate(predicate)) {\n        const upper = predicate.lte;\n        return `${fieldExpr}<=${predicateValueExpr(upper, timeUnit)}`;\n    }\n    else if (isFieldGTEPredicate(predicate)) {\n        const lower = predicate.gte;\n        return `${fieldExpr}>=${predicateValueExpr(lower, timeUnit)}`;\n    }\n    else if (isFieldOneOfPredicate(predicate)) {\n        return `indexof([${predicateValuesExpr(predicate.oneOf, timeUnit).join(',')}], ${fieldExpr}) !== -1`;\n    }\n    else if (isFieldValidPredicate(predicate)) {\n        return predicate.valid ? `${fieldExpr}!==null&&!isNaN(${fieldExpr})` : `${fieldExpr}===null||isNaN(${fieldExpr})`;\n    }\n    else if (isFieldRangePredicate(predicate)) {\n        const lower = predicate.range[0];\n        const upper = predicate.range[1];\n        if (lower !== null && upper !== null && useInRange) {\n            return ('inrange(' +\n                fieldExpr +\n                ', [' +\n                predicateValueExpr(lower, timeUnit) +\n                ', ' +\n                predicateValueExpr(upper, timeUnit) +\n                '])');\n        }\n        const exprs = [];\n        if (lower !== null) {\n            exprs.push(`${fieldExpr} >= ${predicateValueExpr(lower, timeUnit)}`);\n        }\n        if (upper !== null) {\n            exprs.push(`${fieldExpr} <= ${predicateValueExpr(upper, timeUnit)}`);\n        }\n        return exprs.length > 0 ? exprs.join(' && ') : 'true';\n    }\n    /* istanbul ignore next: it should never reach here */\n    throw new Error(`Invalid field predicate: ${JSON.stringify(predicate)}`);\n}\nexport function normalizePredicate(f) {\n    if (isFieldPredicate(f) && f.timeUnit) {\n        return Object.assign({}, f, { timeUnit: normalizeTimeUnit(f.timeUnit) });\n    }\n    return f;\n}\n//# sourceMappingURL=predicate.js.map","import { normalizeLogicalOperand } from './logical';\nimport { normalizePredicate } from './predicate';\nexport function isFilter(t) {\n    return t['filter'] !== undefined;\n}\nexport function isImputeSequence(t) {\n    return t && t['start'] !== undefined && t['stop'] !== undefined;\n}\nexport function isLookup(t) {\n    return t['lookup'] !== undefined;\n}\nexport function isSample(t) {\n    return t['sample'] !== undefined;\n}\nexport function isWindow(t) {\n    return t['window'] !== undefined;\n}\nexport function isJoinAggregate(t) {\n    return t['joinaggregate'] !== undefined;\n}\nexport function isFlatten(t) {\n    return t['flatten'] !== undefined;\n}\nexport function isCalculate(t) {\n    return t['calculate'] !== undefined;\n}\nexport function isBin(t) {\n    return !!t['bin'];\n}\nexport function isImpute(t) {\n    return t['impute'] !== undefined;\n}\nexport function isTimeUnit(t) {\n    return t['timeUnit'] !== undefined;\n}\nexport function isAggregate(t) {\n    return t['aggregate'] !== undefined;\n}\nexport function isStack(t) {\n    return t['stack'] !== undefined;\n}\nexport function isFold(t) {\n    return t['fold'] !== undefined;\n}\nexport function normalizeTransform(transform) {\n    return transform.map(t => {\n        if (isFilter(t)) {\n            return {\n                filter: normalizeLogicalOperand(t.filter, normalizePredicate)\n            };\n        }\n        return t;\n    });\n}\n//# sourceMappingURL=transform.js.map","import { toSet } from 'vega-util';\nimport { BAR, isMarkDef } from './mark';\n/**\n * Required Encoding Channels for each mark type\n */\nexport const DEFAULT_REQUIRED_CHANNEL_MAP = {\n    text: ['text'],\n    line: ['x', 'y'],\n    trail: ['x', 'y'],\n    area: ['x', 'y']\n};\n/**\n * Supported Encoding Channel for each mark type\n */\nexport const DEFAULT_SUPPORTED_CHANNEL_TYPE = {\n    bar: toSet(['row', 'column', 'x', 'y', 'size', 'color', 'fill', 'stroke', 'detail']),\n    line: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'color', 'detail']),\n    trail: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'color', 'detail', 'size']),\n    area: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'detail']),\n    tick: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'detail']),\n    circle: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'size', 'detail']),\n    square: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'size', 'detail']),\n    point: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'size', 'detail', 'shape']),\n    geoshape: toSet(['row', 'column', 'color', 'fill', 'stroke', 'detail', 'shape']),\n    text: toSet(['row', 'column', 'size', 'color', 'fill', 'stroke', 'text']) // TODO(#724) revise\n};\n// TODO: consider if we should add validate method and\n// requires ZSchema in the main vega-lite repo\n/**\n * Further check if encoding mapping of a spec is invalid and\n * return error if it is invalid.\n *\n * This checks if\n * (1) all the required encoding channels for the mark type are specified\n * (2) all the specified encoding channels are supported by the mark type\n * @param  {[type]} spec [description]\n * @param  {RequiredChannelMap = DefaultRequiredChannelMap}  requiredChannelMap\n * @param  {SupportedChannelMap = DefaultSupportedChannelMap} supportedChannelMap\n * @return {String} Return one reason why the encoding is invalid,\n *                  or null if the encoding is valid.\n */\nexport function getEncodingMappingError(spec, requiredChannelMap = DEFAULT_REQUIRED_CHANNEL_MAP, supportedChannelMap = DEFAULT_SUPPORTED_CHANNEL_TYPE) {\n    const mark = isMarkDef(spec.mark) ? spec.mark.type : spec.mark;\n    const encoding = spec.encoding;\n    const requiredChannels = requiredChannelMap[mark];\n    const supportedChannels = supportedChannelMap[mark];\n    for (const i in requiredChannels) {\n        // all required channels are in encoding`\n        if (!(requiredChannels[i] in encoding)) {\n            return 'Missing encoding channel \"' + requiredChannels[i] + '\" for mark \"' + mark + '\"';\n        }\n    }\n    for (const channel in encoding) {\n        // all channels in encoding are supported\n        if (!supportedChannels[channel]) {\n            return 'Encoding channel \"' + channel + '\" is not supported by mark type \"' + mark + '\"';\n        }\n    }\n    if (mark === BAR && !encoding.x && !encoding.y) {\n        return 'Missing both x and y for bar';\n    }\n    return null;\n}\n//# sourceMappingURL=validate.js.map","import { isString } from 'vega-util';\nimport * as log from '../log';\nfunction _normalizeAutoSize(autosize) {\n    return isString(autosize) ? { type: autosize } : autosize || {};\n}\nexport function normalizeAutoSize(topLevelAutosize, configAutosize, isUnitOrLayer = true) {\n    const autosize = Object.assign({ type: 'pad' }, _normalizeAutoSize(configAutosize), _normalizeAutoSize(topLevelAutosize));\n    if (autosize.type === 'fit') {\n        if (!isUnitOrLayer) {\n            log.warn(log.message.FIT_NON_SINGLE);\n            autosize.type = 'pad';\n        }\n    }\n    return autosize;\n}\nconst TOP_LEVEL_PROPERTIES = [\n    'background',\n    'padding'\n    // We do not include \"autosize\" here as it is supported by only unit and layer specs and thus need to be normalized\n];\nexport function extractTopLevelProperties(t) {\n    return TOP_LEVEL_PROPERTIES.reduce((o, p) => {\n        if (t && t[p] !== undefined) {\n            o[p] = t[p];\n        }\n        return o;\n    }, {});\n}\n//# sourceMappingURL=toplevel.js.map","export const DEFAULT_SPACING = 20;\nexport function extractCompositionLayout(layout) {\n    const { align = undefined, center = undefined, bounds = undefined, spacing = undefined } = layout || {};\n    return { align, bounds, center, spacing };\n}\n//# sourceMappingURL=base.js.map","import { isArray } from 'vega-util';\nimport { flagKeys } from './util';\nexport function isSignalRef(o) {\n    return !!o['signal'];\n}\nexport function isVgRangeStep(range) {\n    return !!range['step'];\n}\nexport function isDataRefUnionedDomain(domain) {\n    if (!isArray(domain)) {\n        return 'fields' in domain && !('data' in domain);\n    }\n    return false;\n}\nexport function isFieldRefUnionDomain(domain) {\n    if (!isArray(domain)) {\n        return 'fields' in domain && 'data' in domain;\n    }\n    return false;\n}\nexport function isDataRefDomain(domain) {\n    if (!isArray(domain)) {\n        return 'field' in domain && 'data' in domain;\n    }\n    return false;\n}\nconst VG_MARK_CONFIG_INDEX = {\n    opacity: 1,\n    fill: 1,\n    fillOpacity: 1,\n    stroke: 1,\n    strokeCap: 1,\n    strokeWidth: 1,\n    strokeOpacity: 1,\n    strokeDash: 1,\n    strokeDashOffset: 1,\n    strokeJoin: 1,\n    strokeMiterLimit: 1,\n    size: 1,\n    shape: 1,\n    interpolate: 1,\n    tension: 1,\n    orient: 1,\n    align: 1,\n    baseline: 1,\n    text: 1,\n    dir: 1,\n    dx: 1,\n    dy: 1,\n    ellipsis: 1,\n    limit: 1,\n    radius: 1,\n    theta: 1,\n    angle: 1,\n    font: 1,\n    fontSize: 1,\n    fontWeight: 1,\n    fontStyle: 1,\n    cursor: 1,\n    href: 1,\n    tooltip: 1,\n    cornerRadius: 1\n    // commented below are vg channel that do not have mark config.\n    // 'x'|'x2'|'xc'|'width'|'y'|'y2'|'yc'|'height'\n    // clip: 1,\n    // endAngle: 1,\n    // innerRadius: 1,\n    // outerRadius: 1,\n    // path: 1,\n    // startAngle: 1,\n    // url: 1,\n};\nexport const VG_MARK_CONFIGS = flagKeys(VG_MARK_CONFIG_INDEX);\n//# sourceMappingURL=vega.schema.js.map","import * as tslib_1 from \"tslib\";\nimport { isArray } from 'vega-util';\nimport { AXIS_PARTS, AXIS_PROPERTY_TYPE } from '../../axis';\nimport { defaultTitle } from '../../fielddef';\nimport { getFirstDefined, keys } from '../../util';\nfunction assembleTitle(title, config) {\n    if (isArray(title)) {\n        return title.map(fieldDef => defaultTitle(fieldDef, config)).join(', ');\n    }\n    return title;\n}\nexport function assembleAxis(axisCmpt, kind, config, opt = { header: false }) {\n    const _a = axisCmpt.combine(), { orient, scale, title, zindex } = _a, axis = tslib_1.__rest(_a, [\"orient\", \"scale\", \"title\", \"zindex\"]);\n    // Remove properties that are not valid for this kind of axis\n    keys(axis).forEach(key => {\n        const propType = AXIS_PROPERTY_TYPE[key];\n        if (propType && propType !== kind && propType !== 'both') {\n            delete axis[key];\n        }\n    });\n    if (kind === 'grid') {\n        if (!axis.grid) {\n            return undefined;\n        }\n        // Remove unnecessary encode block\n        if (axis.encode) {\n            // Only need to keep encode block for grid\n            const { grid } = axis.encode;\n            axis.encode = Object.assign({}, (grid ? { grid } : {}));\n            if (keys(axis.encode).length === 0) {\n                delete axis.encode;\n            }\n        }\n        return Object.assign({ scale,\n            orient }, axis, { domain: false, labels: false, \n            // Always set min/maxExtent to 0 to ensure that `config.axis*.minExtent` and `config.axis*.maxExtent`\n            // would not affect gridAxis\n            maxExtent: 0, minExtent: 0, ticks: false, zindex: getFirstDefined(zindex, 0) // put grid behind marks by default\n         });\n    }\n    else {\n        // kind === 'main'\n        if (!opt.header && axisCmpt.mainExtracted) {\n            // if mainExtracted has been extracted to a separate facet\n            return undefined;\n        }\n        // Remove unnecessary encode block\n        if (axis.encode) {\n            for (const part of AXIS_PARTS) {\n                if (!axisCmpt.hasAxisPart(part)) {\n                    delete axis.encode[part];\n                }\n            }\n            if (keys(axis.encode).length === 0) {\n                delete axis.encode;\n            }\n        }\n        const titleString = assembleTitle(title, config);\n        return Object.assign({ scale,\n            orient, grid: false }, (titleString ? { title: titleString } : {}), axis, { zindex: getFirstDefined(zindex, 1) // put axis line above marks by default\n         });\n    }\n}\nexport function assembleAxes(axisComponents, config) {\n    const { x = [], y = [] } = axisComponents;\n    return [\n        ...x.map(a => assembleAxis(a, 'main', config)),\n        ...x.map(a => assembleAxis(a, 'grid', config)),\n        ...y.map(a => assembleAxis(a, 'main', config)),\n        ...y.map(a => assembleAxis(a, 'grid', config))\n    ].filter(a => a); // filter undefined\n}\n//# sourceMappingURL=assemble.js.map","import { isArray } from 'vega-util';\nimport { isBinning } from '../bin';\nimport { isScaleFieldDef, isTimeFieldDef, vgField } from '../fielddef';\nimport { ScaleType } from '../scale';\nimport { formatExpression } from '../timeunit';\nimport { QUANTITATIVE } from '../type';\nimport { getFirstDefined, stringify } from '../util';\nexport function applyMarkConfig(e, model, propsList) {\n    for (const property of propsList) {\n        const value = getMarkConfig(property, model.markDef, model.config);\n        if (value !== undefined) {\n            e[property] = { value: value };\n        }\n    }\n    return e;\n}\nexport function getStyles(mark) {\n    return [].concat(mark.type, mark.style || []);\n}\n/**\n * Return property value from style or mark specific config property if exists.\n * Otherwise, return general mark specific config.\n */\nexport function getMarkConfig(prop, mark, config, { skipGeneralMarkConfig = false } = {}) {\n    return getFirstDefined(\n    // style config has highest precedence\n    getStyleConfig(prop, mark, config.style), \n    // then mark-specific config\n    config[mark.type][prop], \n    // then general mark config (if not skipped)\n    skipGeneralMarkConfig ? undefined : config.mark[prop]);\n}\nexport function getStyleConfig(prop, mark, styleConfigIndex) {\n    const styles = getStyles(mark);\n    let value;\n    for (const style of styles) {\n        const styleConfig = styleConfigIndex[style];\n        // MarkConfig extends VgMarkConfig so a prop may not be a valid property for style\n        // However here we also check if it is defined, so it is okay to cast here\n        const p = prop;\n        if (styleConfig && styleConfig[p] !== undefined) {\n            value = styleConfig[p];\n        }\n    }\n    return value;\n}\nexport function formatSignalRef(fieldDef, specifiedFormat, expr, config) {\n    const format = numberFormat(fieldDef, specifiedFormat, config);\n    if (isBinning(fieldDef.bin)) {\n        const startField = vgField(fieldDef, { expr });\n        const endField = vgField(fieldDef, { expr, binSuffix: 'end' });\n        return {\n            signal: binFormatExpression(startField, endField, format, config)\n        };\n    }\n    else if (fieldDef.type === 'quantitative') {\n        return {\n            signal: `${formatExpr(vgField(fieldDef, { expr, binSuffix: 'range' }), format)}`\n        };\n    }\n    else if (isTimeFieldDef(fieldDef)) {\n        const isUTCScale = isScaleFieldDef(fieldDef) && fieldDef['scale'] && fieldDef['scale'].type === ScaleType.UTC;\n        return {\n            signal: timeFormatExpression(vgField(fieldDef, { expr }), fieldDef.timeUnit, specifiedFormat, config.text.shortTimeLabels, config.timeFormat, isUTCScale, true)\n        };\n    }\n    else {\n        return {\n            signal: `''+${vgField(fieldDef, { expr })}`\n        };\n    }\n}\n/**\n * Returns number format for a fieldDef\n */\nexport function numberFormat(fieldDef, specifiedFormat, config) {\n    if (isTimeFieldDef(fieldDef)) {\n        return undefined;\n    }\n    // Specified format in axis/legend has higher precedence than fieldDef.format\n    if (specifiedFormat) {\n        return specifiedFormat;\n    }\n    if (fieldDef.type === QUANTITATIVE) {\n        // we only apply the default if the field is quantitative\n        return config.numberFormat;\n    }\n    return undefined;\n}\nfunction formatExpr(field, format) {\n    return `format(${field}, \"${format || ''}\")`;\n}\nexport function numberFormatExpr(field, specifiedFormat, config) {\n    return formatExpr(field, specifiedFormat || config.numberFormat);\n}\nexport function binFormatExpression(startField, endField, format, config) {\n    return `${startField} === null || isNaN(${startField}) ? \"null\" : ${numberFormatExpr(startField, format, config)} + \" - \" + ${numberFormatExpr(endField, format, config)}`;\n}\n/**\n * Returns the time expression used for axis/legend labels or text mark for a temporal field\n */\nexport function timeFormatExpression(field, timeUnit, format, shortTimeLabels, rawTimeFormat, // should be provided only for actual text and headers, not axis/legend labels\nisUTCScale, alwaysReturn = false) {\n    if (!timeUnit || format) {\n        // If there is not time unit, or if user explicitly specify format for axis/legend/text.\n        format = format || rawTimeFormat; // only use provided timeFormat if there is no timeUnit.\n        if (format || alwaysReturn) {\n            return `${isUTCScale ? 'utc' : 'time'}Format(${field}, '${format}')`;\n        }\n        else {\n            return undefined;\n        }\n    }\n    else {\n        return formatExpression(timeUnit, field, shortTimeLabels, isUTCScale);\n    }\n}\n/**\n * Return Vega sort parameters (tuple of field and order).\n */\nexport function sortParams(orderDef, fieldRefOption) {\n    return (isArray(orderDef) ? orderDef : [orderDef]).reduce((s, orderChannelDef) => {\n        s.field.push(vgField(orderChannelDef, fieldRefOption));\n        s.order.push(orderChannelDef.sort || 'ascending');\n        return s;\n    }, { field: [], order: [] });\n}\nexport function mergeTitleFieldDefs(f1, f2) {\n    const merged = [...f1];\n    f2.forEach(fdToMerge => {\n        for (const fieldDef1 of merged) {\n            // If already exists, no need to append to merged array\n            if (stringify(fieldDef1) === stringify(fdToMerge)) {\n                return;\n            }\n        }\n        merged.push(fdToMerge);\n    });\n    return merged;\n}\nexport function mergeTitle(title1, title2) {\n    if (title1 === title2 || !title2) {\n        // if titles are the same or title2 is falsy\n        return title1;\n    }\n    else if (!title1) {\n        // if title1 is falsy\n        return title2;\n    }\n    else {\n        // join title with comma if they are different\n        return title1 + ', ' + title2;\n    }\n}\nexport function mergeTitleComponent(v1, v2) {\n    if (isArray(v1.value) && isArray(v2.value)) {\n        return {\n            explicit: v1.explicit,\n            value: mergeTitleFieldDefs(v1.value, v2.value)\n        };\n    }\n    else if (!isArray(v1.value) && !isArray(v2.value)) {\n        return {\n            explicit: v1.explicit,\n            value: mergeTitle(v1.value, v2.value)\n        };\n    }\n    /* istanbul ignore next: Condition should not happen -- only for warning in development. */\n    throw new Error('It should never reach here');\n}\n//# sourceMappingURL=common.js.map","import { uniqueId } from '../../util';\n/**\n * A node in the dataflow tree.\n */\nexport class DataFlowNode {\n    constructor(parent, debugName) {\n        this.debugName = debugName;\n        this._children = [];\n        this._parent = null;\n        if (parent) {\n            this.parent = parent;\n        }\n    }\n    /**\n     * Clone this node with a deep copy but don't clone links to children or parents.\n     */\n    clone() {\n        throw new Error('Cannot clone node');\n    }\n    /**\n     * Return a hash of the node.\n     */\n    hash() {\n        if (this._hash === undefined) {\n            this._hash = uniqueId();\n        }\n        return this._hash;\n    }\n    /**\n     * Set of fields that are being created by this node.\n     */\n    producedFields() {\n        return new Set();\n    }\n    dependentFields() {\n        return new Set();\n    }\n    get parent() {\n        return this._parent;\n    }\n    /**\n     * Set the parent of the node and also add this not to the parent's children.\n     */\n    set parent(parent) {\n        this._parent = parent;\n        parent.addChild(this);\n    }\n    get children() {\n        return this._children;\n    }\n    numChildren() {\n        return this._children.length;\n    }\n    addChild(child, loc) {\n        // do not add the same child twice\n        if (this._children.indexOf(child) > -1) {\n            console.warn('Attempt to add the same child twice.');\n            return;\n        }\n        if (loc !== undefined) {\n            this._children.splice(loc, 0, child);\n        }\n        else {\n            this._children.push(child);\n        }\n    }\n    removeChild(oldChild) {\n        const loc = this._children.indexOf(oldChild);\n        this._children.splice(loc, 1);\n        return loc;\n    }\n    /**\n     * Remove node from the dataflow.\n     */\n    remove() {\n        let loc = this._parent.removeChild(this);\n        for (const child of this._children) {\n            // do not use the set method because we want to insert at a particular location\n            child._parent = this._parent;\n            this._parent.addChild(child, loc++);\n        }\n    }\n    /**\n     * Insert another node as a parent of this node.\n     */\n    insertAsParentOf(other) {\n        const parent = other.parent;\n        parent.removeChild(this);\n        this.parent = parent;\n        other.parent = this;\n    }\n    swapWithParent() {\n        const parent = this._parent;\n        const newParent = parent.parent;\n        // reconnect the children\n        for (const child of this._children) {\n            child.parent = parent;\n        }\n        // remove old links\n        this._children = []; // equivalent to removing every child link one by one\n        parent.removeChild(this);\n        parent.parent.removeChild(parent);\n        // swap two nodes\n        this.parent = newParent;\n        parent.parent = this;\n    }\n}\nexport class OutputNode extends DataFlowNode {\n    /**\n     * @param source The name of the source. Will change in assemble.\n     * @param type The type of the output node.\n     * @param refCounts A global ref counter map.\n     */\n    constructor(parent, source, type, refCounts) {\n        super(parent, source);\n        this.type = type;\n        this.refCounts = refCounts;\n        this._source = this._name = source;\n        if (this.refCounts && !(this._name in this.refCounts)) {\n            this.refCounts[this._name] = 0;\n        }\n    }\n    clone() {\n        const cloneObj = new this.constructor();\n        cloneObj.debugName = 'clone_' + this.debugName;\n        cloneObj._source = this._source;\n        cloneObj._name = 'clone_' + this._name;\n        cloneObj.type = this.type;\n        cloneObj.refCounts = this.refCounts;\n        cloneObj.refCounts[cloneObj._name] = 0;\n        return cloneObj;\n    }\n    /**\n     * Request the datasource name and increase the ref counter.\n     *\n     * During the parsing phase, this will return the simple name such as 'main' or 'raw'.\n     * It is crucial to request the name from an output node to mark it as a required node.\n     * If nobody ever requests the name, this datasource will not be instantiated in the assemble phase.\n     *\n     * In the assemble phase, this will return the correct name.\n     */\n    getSource() {\n        this.refCounts[this._name]++;\n        return this._source;\n    }\n    isRequired() {\n        return !!this.refCounts[this._name];\n    }\n    setSource(source) {\n        this._source = source;\n    }\n}\n//# sourceMappingURL=dataflow.js.map","import { parse } from 'vega-expression';\nfunction getName(node) {\n    const name = [];\n    if (node.type === 'Identifier') {\n        return [node.name];\n    }\n    if (node.type === 'Literal') {\n        return [node.value];\n    }\n    if (node.type === 'MemberExpression') {\n        name.push(...getName(node.object));\n        name.push(...getName(node.property));\n    }\n    return name;\n}\nfunction startsWithDatum(node) {\n    if (node.object.type === 'MemberExpression') {\n        return startsWithDatum(node.object);\n    }\n    return node.object.name === 'datum';\n}\nexport function getDependentFields(expression) {\n    const ast = parse(expression);\n    const dependents = new Set();\n    ast.visit((node) => {\n        if (node.type === 'MemberExpression' && startsWithDatum(node)) {\n            dependents.add(getName(node)\n                .slice(1)\n                .join('.'));\n        }\n    });\n    return dependents;\n}\n//# sourceMappingURL=expressions.js.map","import { isScaleFieldDef, vgField } from '../../fielddef';\nimport { fieldFilterExpression } from '../../predicate';\nimport { isSortArray } from '../../sort';\nimport { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\nimport { getDependentFields } from './expressions';\n/**\n * We don't know what a calculate node depends on so we should never move it beyond anything that produces fields.\n */\nexport class CalculateNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n        this._dependentFields = getDependentFields(this.transform.calculate);\n    }\n    clone() {\n        return new CalculateNode(null, duplicate(this.transform));\n    }\n    static parseAllForSortIndex(parent, model) {\n        // get all the encoding with sort fields from model\n        model.forEachFieldDef((fieldDef, channel) => {\n            if (!isScaleFieldDef(fieldDef)) {\n                return;\n            }\n            if (isSortArray(fieldDef.sort)) {\n                const { field, timeUnit } = fieldDef;\n                const sort = fieldDef.sort;\n                // generate `datum[\"a\"] === val0 ? 0 : datum[\"a\"] === val1 ? 1 : ... : n` via FieldEqualPredicate\n                const calculate = sort\n                    .map((sortValue, i) => {\n                    return `${fieldFilterExpression({ field, timeUnit, equal: sortValue })} ? ${i} : `;\n                })\n                    .join('') + sort.length;\n                parent = new CalculateNode(parent, {\n                    calculate,\n                    as: sortArrayIndexField(fieldDef, channel, { forAs: true })\n                });\n            }\n        });\n        return parent;\n    }\n    producedFields() {\n        return new Set([this.transform.as]);\n    }\n    dependentFields() {\n        return this._dependentFields;\n    }\n    assemble() {\n        return {\n            type: 'formula',\n            expr: this.transform.calculate,\n            as: this.transform.as\n        };\n    }\n    hash() {\n        return `Calculate ${hash(this.transform)}`;\n    }\n}\nexport function sortArrayIndexField(fieldDef, channel, opt) {\n    return vgField(fieldDef, Object.assign({ prefix: channel, suffix: 'sort_index' }, (opt || {})));\n}\n//# sourceMappingURL=calculate.js.map","import { isArray } from 'vega-util';\nimport { vgField } from '../../fielddef';\nimport { HEADER_LABEL_PROPERTIES, HEADER_LABEL_PROPERTIES_MAP, HEADER_TITLE_PROPERTIES, HEADER_TITLE_PROPERTIES_MAP } from '../../header';\nimport { isSortField } from '../../sort';\nimport { keys } from '../../util';\nimport { formatSignalRef } from '../common';\nimport { sortArrayIndexField } from '../data/calculate';\nexport const HEADER_CHANNELS = ['row', 'column'];\nexport const HEADER_TYPES = ['header', 'footer'];\nexport function getHeaderType(orient) {\n    if (orient === 'top' || orient === 'left') {\n        return 'header';\n    }\n    return 'footer';\n}\nexport function assembleTitleGroup(model, channel) {\n    const title = model.component.layoutHeaders[channel].title;\n    const config = model.config ? model.config : undefined;\n    const facetFieldDef = model.component.layoutHeaders[channel].facetFieldDef\n        ? model.component.layoutHeaders[channel].facetFieldDef\n        : undefined;\n    return {\n        name: `${channel}-title`,\n        type: 'group',\n        role: `${channel}-title`,\n        title: Object.assign({ text: title, offset: 10 }, (channel === 'row' ? { orient: 'left' } : {}), { style: 'guide-title' }, getHeaderProperties(config, facetFieldDef, HEADER_TITLE_PROPERTIES, HEADER_TITLE_PROPERTIES_MAP))\n    };\n}\nexport function assembleHeaderGroups(model, channel) {\n    const layoutHeader = model.component.layoutHeaders[channel];\n    const groups = [];\n    for (const headerType of HEADER_TYPES) {\n        if (layoutHeader[headerType]) {\n            for (const headerCmpt of layoutHeader[headerType]) {\n                groups.push(assembleHeaderGroup(model, channel, headerType, layoutHeader, headerCmpt));\n            }\n        }\n    }\n    return groups;\n}\n// 0, (0,90), 90, (90, 180), 180, (180, 270), 270, (270, 0)\nexport function labelAlign(angle) {\n    // to keep angle in [0, 360)\n    angle = ((angle % 360) + 360) % 360;\n    if ((angle + 90) % 180 === 0) {\n        // for 90 and 270\n        return {}; // default center\n    }\n    else if (angle < 90 || 270 < angle) {\n        return { align: { value: 'right' } };\n    }\n    else if (135 <= angle && angle < 225) {\n        return { align: { value: 'left' } };\n    }\n    return {};\n}\nexport function labelBaseline(angle) {\n    // to keep angle in [0, 360)\n    angle = ((angle % 360) + 360) % 360;\n    if (45 <= angle && angle <= 135) {\n        return { baseline: 'top' };\n    }\n    return { baseline: 'middle' };\n}\nfunction getSort(facetFieldDef, channel) {\n    const { sort } = facetFieldDef;\n    if (isSortField(sort)) {\n        return {\n            field: vgField(sort, { expr: 'datum' }),\n            order: sort.order || 'ascending'\n        };\n    }\n    else if (isArray(sort)) {\n        return {\n            field: sortArrayIndexField(facetFieldDef, channel, { expr: 'datum' }),\n            order: 'ascending'\n        };\n    }\n    else {\n        return {\n            field: vgField(facetFieldDef, { expr: 'datum' }),\n            order: sort || 'ascending'\n        };\n    }\n}\nexport function assembleHeaderGroup(model, channel, headerType, layoutHeader, headerCmpt) {\n    if (headerCmpt) {\n        let title = null;\n        const { facetFieldDef } = layoutHeader;\n        if (facetFieldDef && headerCmpt.labels) {\n            const { header = {} } = facetFieldDef;\n            const { format, labelAngle } = header;\n            const config = model.config ? model.config : undefined;\n            const update = Object.assign({}, labelAlign(labelAngle));\n            title = Object.assign({ text: formatSignalRef(facetFieldDef, format, 'parent', model.config), offset: 10 }, (channel === 'row' ? { orient: 'left' } : {}), { style: 'guide-label' }, (labelAngle !== undefined ? { angle: labelAngle } : {}), labelBaseline(labelAngle), getHeaderProperties(config, facetFieldDef, HEADER_LABEL_PROPERTIES, HEADER_LABEL_PROPERTIES_MAP), (keys(update).length > 0 ? { encode: { update } } : {}));\n        }\n        const axes = headerCmpt.axes;\n        const hasAxes = axes && axes.length > 0;\n        if (title || hasAxes) {\n            const sizeChannel = channel === 'row' ? 'height' : 'width';\n            return Object.assign({ name: model.getName(`${channel}_${headerType}`), type: 'group', role: `${channel}-${headerType}` }, (layoutHeader.facetFieldDef\n                ? {\n                    from: { data: model.getName(channel + '_domain') },\n                    sort: getSort(facetFieldDef, channel)\n                }\n                : {}), (title ? { title } : {}), (headerCmpt.sizeSignal\n                ? {\n                    encode: {\n                        update: {\n                            [sizeChannel]: headerCmpt.sizeSignal\n                        }\n                    }\n                }\n                : {}), (hasAxes ? { axes } : {}));\n        }\n    }\n    return null;\n}\nexport function getHeaderProperties(config, facetFieldDef, properties, propertiesMap) {\n    const props = {};\n    for (const prop of properties) {\n        if (config && config.header) {\n            if (config.header[prop]) {\n                props[propertiesMap[prop]] = config.header[prop];\n            }\n        }\n        if (facetFieldDef && facetFieldDef.header) {\n            if (facetFieldDef.header[prop]) {\n                props[propertiesMap[prop]] = facetFieldDef.header[prop];\n            }\n        }\n    }\n    return props;\n}\n//# sourceMappingURL=index.js.map","import { hasDiscreteDomain } from '../../scale';\nimport { getFirstDefined } from '../../util';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { isFacetModel } from '../model';\nexport function assembleLayoutSignals(model) {\n    return [...sizeSignals(model, 'width'), ...sizeSignals(model, 'height')];\n}\nexport function sizeSignals(model, sizeType) {\n    const channel = sizeType === 'width' ? 'x' : 'y';\n    const size = model.component.layoutSize.get(sizeType);\n    if (!size || size === 'merged') {\n        return [];\n    }\n    // Read size signal name from name map, just in case it is the top-level size signal that got renamed.\n    const name = model.getSizeSignalRef(sizeType).signal;\n    if (size === 'range-step') {\n        const scaleComponent = model.getScaleComponent(channel);\n        if (scaleComponent) {\n            const type = scaleComponent.get('type');\n            const range = scaleComponent.get('range');\n            if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n                const scaleName = model.scaleName(channel);\n                if (isFacetModel(model.parent)) {\n                    // If parent is facet and this is an independent scale, return only signal signal\n                    // as the width/height will be calculated using the cardinality from\n                    // facet's aggregate rather than reading from scale domain\n                    const parentResolve = model.parent.component.resolve;\n                    if (parentResolve.scale[channel] === 'independent') {\n                        return [stepSignal(scaleName, range)];\n                    }\n                }\n                return [\n                    stepSignal(scaleName, range),\n                    {\n                        name,\n                        update: sizeExpr(scaleName, scaleComponent, `domain('${scaleName}').length`)\n                    }\n                ];\n            }\n        }\n        /* istanbul ignore next: Condition should not happen -- only for warning in development. */\n        throw new Error('layout size is range step although there is no rangeStep.');\n    }\n    else {\n        return [\n            {\n                name,\n                value: size\n            }\n        ];\n    }\n}\nfunction stepSignal(scaleName, range) {\n    return {\n        name: scaleName + '_step',\n        value: range.step\n    };\n}\nexport function sizeExpr(scaleName, scaleComponent, cardinality) {\n    const type = scaleComponent.get('type');\n    const padding = scaleComponent.get('padding');\n    const paddingOuter = getFirstDefined(scaleComponent.get('paddingOuter'), padding);\n    let paddingInner = scaleComponent.get('paddingInner');\n    paddingInner =\n        type === 'band'\n            ? // only band has real paddingInner\n                paddingInner !== undefined\n                    ? paddingInner\n                    : padding\n            : // For point, as calculated in https://github.com/vega/vega-scale/blob/master/src/band.js#L128,\n                // it's equivalent to have paddingInner = 1 since there is only n-1 steps between n points.\n                1;\n    return `bandspace(${cardinality}, ${paddingInner}, ${paddingOuter}) * ${scaleName}_step`;\n}\n//# sourceMappingURL=assemble.js.map","import { vgField } from '../../fielddef';\nimport { fieldExpr } from '../../timeunit';\nimport { duplicate, hash, keys, vals } from '../../util';\nimport { DataFlowNode } from './dataflow';\nexport class TimeUnitNode extends DataFlowNode {\n    constructor(parent, formula) {\n        super(parent);\n        this.formula = formula;\n    }\n    clone() {\n        return new TimeUnitNode(null, duplicate(this.formula));\n    }\n    static makeFromEncoding(parent, model) {\n        const formula = model.reduceFieldDef((timeUnitComponent, fieldDef) => {\n            if (fieldDef.timeUnit) {\n                const f = vgField(fieldDef, { forAs: true });\n                timeUnitComponent[f] = {\n                    as: f,\n                    timeUnit: fieldDef.timeUnit,\n                    field: fieldDef.field\n                };\n            }\n            return timeUnitComponent;\n        }, {});\n        if (keys(formula).length === 0) {\n            return null;\n        }\n        return new TimeUnitNode(parent, formula);\n    }\n    static makeFromTransform(parent, t) {\n        return new TimeUnitNode(parent, {\n            [t.field]: {\n                as: t.as,\n                timeUnit: t.timeUnit,\n                field: t.field\n            }\n        });\n    }\n    merge(other) {\n        this.formula = Object.assign({}, this.formula, other.formula);\n        other.remove();\n    }\n    producedFields() {\n        return new Set(vals(this.formula).map(f => f.as));\n    }\n    dependentFields() {\n        return new Set(vals(this.formula).map(f => f.field));\n    }\n    hash() {\n        return `TimeUnit ${hash(this.formula)}`;\n    }\n    assemble() {\n        return vals(this.formula).map(c => {\n            return {\n                type: 'formula',\n                as: c.as,\n                expr: fieldExpr(c.timeUnit, c.field)\n            };\n        });\n    }\n}\n//# sourceMappingURL=timeunit.js.map","import { stringValue } from 'vega-util';\nimport { isScaleChannel, X, Y } from '../../../channel';\nimport * as log from '../../../log';\nimport { hasContinuousDomain } from '../../../scale';\nimport { accessPathWithDatum, varName } from '../../../util';\nimport { channelSignalName, VL_SELECTION_RESOLVE } from '../selection';\nconst scaleBindings = {\n    has: selCmpt => {\n        return selCmpt.type === 'interval' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind === 'scales';\n    },\n    parse: (model, selDef, selCmpt) => {\n        const name = varName(selCmpt.name);\n        const bound = (selCmpt.scales = []);\n        for (const p of selCmpt.project) {\n            const channel = p.channel;\n            if (!isScaleChannel(channel)) {\n                continue;\n            }\n            const scale = model.getScaleComponent(channel);\n            const scaleType = scale ? scale.get('type') : undefined;\n            if (!scale || !hasContinuousDomain(scaleType)) {\n                log.warn(log.message.SCALE_BINDINGS_CONTINUOUS);\n                continue;\n            }\n            scale.set('domainRaw', { signal: accessPathWithDatum(p.field, name) }, true);\n            bound.push(channel);\n            // Bind both x/y for diag plot of repeated views.\n            if (model.repeater && model.repeater.row === model.repeater.column) {\n                const scale2 = model.getScaleComponent(channel === X ? Y : X);\n                scale2.set('domainRaw', { signal: accessPathWithDatum(p.field, name) }, true);\n            }\n        }\n    },\n    topLevelSignals: (model, selCmpt, signals) => {\n        const channelSignals = selCmpt.scales\n            .filter(channel => {\n            return !signals.filter(s => s.name === channelSignalName(selCmpt, channel, 'data')).length;\n        })\n            .map(channel => {\n            return { channel, signal: channelSignalName(selCmpt, channel, 'data') };\n        });\n        // Top-level signals are only needed for multiview displays and if this\n        // view's top-level signals haven't already been generated.\n        if (!model.parent || !channelSignals.length) {\n            return signals;\n        }\n        // vlSelectionResolve does not account for the behavior of bound scales in\n        // multiview displays. Each unit view adds a tuple to the store, but the\n        // state of the selection is the unit selection most recently updated. This\n        // state is captured by the top-level signals that we insert and \"push\n        // outer\" to from within the units. We need to reassemble this state into\n        // the top-level named signal, except no single selCmpt has a global view.\n        const namedSg = signals.filter(s => s.name === selCmpt.name)[0];\n        const update = namedSg.update;\n        if (update.indexOf(VL_SELECTION_RESOLVE) >= 0) {\n            namedSg.update =\n                '{' + channelSignals.map(cs => `${stringValue(selCmpt.fields[cs.channel])}: ${cs.signal}`).join(', ') + '}';\n        }\n        else {\n            for (const cs of channelSignals) {\n                const mapping = `, ${stringValue(selCmpt.fields[cs.channel])}: ${cs.signal}`;\n                if (update.indexOf(mapping) < 0) {\n                    namedSg.update = update.substring(0, update.length - 1) + mapping + '}';\n                }\n            }\n        }\n        return signals.concat(channelSignals.map(cs => ({ name: cs.signal })));\n    },\n    signals: (model, selCmpt, signals) => {\n        // Nested signals need only push to top-level signals with multiview displays.\n        if (model.parent) {\n            for (const channel of selCmpt.scales) {\n                const signal = signals.filter(s => s.name === channelSignalName(selCmpt, channel, 'data'))[0];\n                // convert to PushSignal\n                signal.push = 'outer';\n                delete signal.value;\n                delete signal.update;\n            }\n        }\n        return signals;\n    }\n};\nexport default scaleBindings;\nexport function domain(model, channel) {\n    const scale = stringValue(model.scaleName(channel));\n    return `domain(${scale})`;\n}\n//# sourceMappingURL=scales.js.map","import { isArray } from 'vega-util';\nimport * as log from '../../../log';\nimport { hasContinuousDomain } from '../../../scale';\nimport { isIntervalSelection } from '../../../selection';\nimport { keys } from '../../../util';\nimport { TimeUnitNode } from '../../data/timeunit';\nimport { TUPLE } from '../selection';\nimport scales from './scales';\nexport const TUPLE_FIELDS = '_fields';\nconst project = {\n    has: (selDef) => {\n        const def = selDef;\n        return def.fields !== undefined || def.encodings !== undefined;\n    },\n    parse: (model, selDef, selCmpt) => {\n        const timeUnits = {};\n        const f = {};\n        // Selection component may already have a projection from the config. (Interval selection will have `encodings: ['x', 'y'].)\n        const proj = selCmpt.project || (selCmpt.project = []);\n        selCmpt.fields = {};\n        // TODO: find a possible channel mapping for these fields.\n        if (selDef.fields) {\n            proj.push(...selDef.fields.map(field => ({ field, type: 'E' })));\n        }\n        for (const channel of selDef.encodings || []) {\n            const fieldDef = model.fieldDef(channel);\n            if (fieldDef) {\n                let field = fieldDef.field;\n                if (fieldDef.timeUnit) {\n                    field = model.vgField(channel);\n                    // Construct TimeUnitComponents which will be combined into a\n                    // TimeUnitNode. This node may need to be inserted into the\n                    // dataflow if the selection is used across views that do not\n                    // have these time units defined.\n                    timeUnits[field] = {\n                        as: field,\n                        field: fieldDef.field,\n                        timeUnit: fieldDef.timeUnit\n                    };\n                }\n                // Prevent duplicate projections on the same field.\n                // TODO: what if the same field is bound to multiple channels (e.g., SPLOM diag).\n                if (!f[field]) {\n                    // Determine whether the tuple will store enumerated or ranged values.\n                    // Interval selections store ranges for continuous scales, and enumerations otherwise.\n                    // Single/multi selections store ranges for binned fields, and enumerations otherwise.\n                    let type = 'E';\n                    if (selCmpt.type === 'interval') {\n                        const scaleType = model.getScaleComponent(channel).get('type');\n                        if (hasContinuousDomain(scaleType)) {\n                            type = 'R';\n                        }\n                    }\n                    else if (fieldDef.bin) {\n                        type = 'R-RE';\n                    }\n                    proj.push((f[field] = { field, channel, type }));\n                }\n                selCmpt.fields[channel] = field;\n            }\n            else {\n                log.warn(log.message.cannotProjectOnChannelWithoutField(channel));\n            }\n        }\n        if (selDef.init) {\n            if (scales.has(selCmpt)) {\n                log.warn(log.message.NO_INIT_SCALE_BINDINGS);\n            }\n            else {\n                function parseInit(i) {\n                    return proj.map(p => (i[p.channel] !== undefined ? i[p.channel] : i[p.field]));\n                }\n                if (isIntervalSelection(selDef)) {\n                    selCmpt.init = parseInit(selDef.init);\n                }\n                else {\n                    const init = isArray(selDef.init) ? selDef.init : [selDef.init];\n                    selCmpt.init = init.map(parseInit);\n                }\n            }\n        }\n        if (keys(timeUnits).length) {\n            selCmpt.timeUnit = new TimeUnitNode(null, timeUnits);\n        }\n    },\n    signals: (model, selCmpt, signals) => {\n        const name = selCmpt.name + TUPLE + TUPLE_FIELDS;\n        const hasSignal = signals.filter(s => s.name === name);\n        return hasSignal.length\n            ? signals\n            : signals.concat({\n                name,\n                value: selCmpt.project\n            });\n    }\n};\nexport default project;\n//# sourceMappingURL=project.js.map","import * as tslib_1 from \"tslib\";\nimport { stringValue } from 'vega-util';\nimport { X, Y } from '../../channel';\nimport { warn } from '../../log';\nimport { hasContinuousDomain } from '../../scale';\nimport { keys } from '../../util';\nimport { assembleInit, channelSignalName, positionalProjections, STORE, TUPLE, unitName } from './selection';\nimport { TUPLE_FIELDS } from './transforms/project';\nimport scales from './transforms/scales';\nexport const BRUSH = '_brush';\nexport const SCALE_TRIGGER = '_scale_trigger';\nconst interval = {\n    signals: (model, selCmpt) => {\n        const name = selCmpt.name;\n        const fieldsSg = name + TUPLE + TUPLE_FIELDS;\n        const hasScales = scales.has(selCmpt);\n        const signals = [];\n        const dataSignals = [];\n        const scaleTriggers = [];\n        if (selCmpt.translate && !hasScales) {\n            const filterExpr = `!event.item || event.item.mark.name !== ${stringValue(name + BRUSH)}`;\n            events(selCmpt, (_, evt) => {\n                const filters = evt.between[0].filter || (evt.between[0].filter = []);\n                if (filters.indexOf(filterExpr) < 0) {\n                    filters.push(filterExpr);\n                }\n            });\n        }\n        selCmpt.project.forEach((p, i) => {\n            const channel = p.channel;\n            if (channel !== X && channel !== Y) {\n                warn('Interval selections only support x and y encoding channels.');\n                return;\n            }\n            const cs = channelSignals(model, selCmpt, channel, i);\n            const dname = channelSignalName(selCmpt, channel, 'data');\n            const vname = channelSignalName(selCmpt, channel, 'visual');\n            const scaleStr = stringValue(model.scaleName(channel));\n            const scaleType = model.getScaleComponent(channel).get('type');\n            const toNum = hasContinuousDomain(scaleType) ? '+' : '';\n            signals.push(...cs);\n            dataSignals.push(dname);\n            scaleTriggers.push({\n                scaleName: model.scaleName(channel),\n                expr: `(!isArray(${dname}) || ` +\n                    `(${toNum}invert(${scaleStr}, ${vname})[0] === ${toNum}${dname}[0] && ` +\n                    `${toNum}invert(${scaleStr}, ${vname})[1] === ${toNum}${dname}[1]))`\n            });\n        });\n        // Proxy scale reactions to ensure that an infinite loop doesn't occur\n        // when an interval selection filter touches the scale.\n        if (!hasScales) {\n            signals.push({\n                name: name + SCALE_TRIGGER,\n                update: scaleTriggers.map(t => t.expr).join(' && ') + ` ? ${name + SCALE_TRIGGER} : {}`\n            });\n        }\n        // Only add an interval to the store if it has valid data extents. Data extents\n        // are set to null if pixel extents are equal to account for intervals over\n        // ordinal/nominal domains which, when inverted, will still produce a valid datum.\n        const init = selCmpt.init;\n        const update = `unit: ${unitName(model)}, fields: ${fieldsSg}, values`;\n        return signals.concat(Object.assign({ name: name + TUPLE }, (init ? { init: `{${update}: ${assembleInit(init)}}` } : {}), { on: [\n                {\n                    events: dataSignals.map(t => ({ signal: t })),\n                    update: dataSignals.join(' && ') + ` ? {${update}: [${dataSignals}]} : null`\n                }\n            ] }));\n    },\n    modifyExpr: (model, selCmpt) => {\n        const tpl = selCmpt.name + TUPLE;\n        return tpl + ', ' + (selCmpt.resolve === 'global' ? 'true' : `{unit: ${unitName(model)}}`);\n    },\n    marks: (model, selCmpt, marks) => {\n        const name = selCmpt.name;\n        const { xi, yi } = positionalProjections(selCmpt);\n        const store = `data(${stringValue(selCmpt.name + STORE)})`;\n        // Do not add a brush if we're binding to scales.\n        if (scales.has(selCmpt)) {\n            return marks;\n        }\n        const update = {\n            x: xi !== null ? { signal: `${name}_x[0]` } : { value: 0 },\n            y: yi !== null ? { signal: `${name}_y[0]` } : { value: 0 },\n            x2: xi !== null ? { signal: `${name}_x[1]` } : { field: { group: 'width' } },\n            y2: yi !== null ? { signal: `${name}_y[1]` } : { field: { group: 'height' } }\n        };\n        // If the selection is resolved to global, only a single interval is in\n        // the store. Wrap brush mark's encodings with a production rule to test\n        // this based on the `unit` property. Hide the brush mark if it corresponds\n        // to a unit different from the one in the store.\n        if (selCmpt.resolve === 'global') {\n            for (const key of keys(update)) {\n                update[key] = [\n                    Object.assign({ test: `${store}.length && ${store}[0].unit === ${unitName(model)}` }, update[key]),\n                    { value: 0 }\n                ];\n            }\n        }\n        // Two brush marks ensure that fill colors and other aesthetic choices do\n        // not interefere with the core marks, but that the brushed region can still\n        // be interacted with (e.g., dragging it around).\n        const _a = selCmpt.mark, { fill, fillOpacity } = _a, stroke = tslib_1.__rest(_a, [\"fill\", \"fillOpacity\"]);\n        const vgStroke = keys(stroke).reduce((def, k) => {\n            def[k] = [\n                {\n                    test: [xi !== null && `${name}_x[0] !== ${name}_x[1]`, yi != null && `${name}_y[0] !== ${name}_y[1]`]\n                        .filter(x => x)\n                        .join(' && '),\n                    value: stroke[k]\n                },\n                { value: null }\n            ];\n            return def;\n        }, {});\n        return [\n            {\n                name: name + BRUSH + '_bg',\n                type: 'rect',\n                clip: true,\n                encode: {\n                    enter: {\n                        fill: { value: fill },\n                        fillOpacity: { value: fillOpacity }\n                    },\n                    update: update\n                }\n            },\n            ...marks,\n            {\n                name: name + BRUSH,\n                type: 'rect',\n                clip: true,\n                encode: {\n                    enter: {\n                        fill: { value: 'transparent' }\n                    },\n                    update: Object.assign({}, update, vgStroke)\n                }\n            }\n        ];\n    }\n};\nexport default interval;\n/**\n * Returns the visual and data signals for an interval selection.\n */\nfunction channelSignals(model, selCmpt, channel, idx) {\n    const vname = channelSignalName(selCmpt, channel, 'visual');\n    const dname = channelSignalName(selCmpt, channel, 'data');\n    const init = selCmpt.init && selCmpt.init[idx];\n    const hasScales = scales.has(selCmpt);\n    const scaleName = stringValue(model.scaleName(channel));\n    const scale = model.getScaleComponent(channel);\n    const scaleType = scale ? scale.get('type') : undefined;\n    const scaled = (str) => `scale(${scaleName}, ${str})`;\n    const size = model.getSizeSignalRef(channel === X ? 'width' : 'height').signal;\n    const coord = `${channel}(unit)`;\n    const on = events(selCmpt, (def, evt) => {\n        return [\n            ...def,\n            { events: evt.between[0], update: `[${coord}, ${coord}]` },\n            { events: evt, update: `[${vname}[0], clamp(${coord}, 0, ${size})]` } // Brush End\n        ];\n    });\n    // React to pan/zooms of continuous scales. Non-continuous scales\n    // (band, point) cannot be pan/zoomed and any other changes\n    // to their domains (e.g., filtering) should clear the brushes.\n    on.push({\n        events: { signal: selCmpt.name + SCALE_TRIGGER },\n        update: hasContinuousDomain(scaleType) ? `[${scaled(`${dname}[0]`)}, ${scaled(`${dname}[1]`)}]` : `[0, 0]`\n    });\n    return hasScales\n        ? [{ name: dname, on: [] }]\n        : [\n            Object.assign({ name: vname }, (init ? { init: assembleInit(init, scaled) } : { value: [] }), { on: on }),\n            Object.assign({ name: dname }, (init ? { init: assembleInit(init) } : {}), { on: [\n                    {\n                        events: { signal: vname },\n                        update: `${vname}[0] === ${vname}[1] ? null : invert(${scaleName}, ${vname})`\n                    }\n                ] })\n        ];\n}\nfunction events(selCmpt, cb) {\n    return selCmpt.events.reduce((on, evt) => {\n        if (!evt.between) {\n            warn(`${evt} is not an ordered event stream for interval selections`);\n            return on;\n        }\n        return cb(on, evt);\n    }, []);\n}\n//# sourceMappingURL=interval.js.map","import { stringValue } from 'vega-util';\nimport { accessPathWithDatum } from '../../util';\nimport { assembleInit, STORE, TUPLE, unitName } from './selection';\nimport { TUPLE_FIELDS } from './transforms/project';\nexport function singleOrMultiSignals(model, selCmpt) {\n    const name = selCmpt.name;\n    const fieldsSg = name + TUPLE + TUPLE_FIELDS;\n    const proj = selCmpt.project;\n    const datum = '(item().isVoronoi ? datum.datum : datum)';\n    const values = proj\n        .map(p => {\n        const fieldDef = model.fieldDef(p.channel);\n        // Binned fields should capture extents, for a range test against the raw field.\n        return fieldDef && fieldDef.bin\n            ? `[${accessPathWithDatum(model.vgField(p.channel, {}), datum)}, ` +\n                `${accessPathWithDatum(model.vgField(p.channel, { binSuffix: 'end' }), datum)}]`\n            : `${accessPathWithDatum(p.field, datum)}`;\n    })\n        .join(', ');\n    // Only add a discrete selection to the store if a datum is present _and_\n    // the interaction isn't occurring on a group mark. This guards against\n    // polluting interactive state with invalid values in faceted displays\n    // as the group marks are also data-driven. We force the update to account\n    // for constant null states but varying toggles (e.g., shift-click in\n    // whitespace followed by a click in whitespace; the store should only\n    // be cleared on the second click).\n    const update = `unit: ${unitName(model)}, fields: ${fieldsSg}, values`;\n    const signals = [\n        {\n            name: name + TUPLE,\n            on: [\n                {\n                    events: selCmpt.events,\n                    update: `datum && item().mark.marktype !== 'group' ? {${update}: [${values}]} : null`,\n                    force: true\n                }\n            ]\n        }\n    ];\n    if (selCmpt.init) {\n        const insert = selCmpt.init.map((i) => {\n            const str = assembleInit(i);\n            return `{${update}: ${str}}`;\n        });\n        signals.push({\n            name: `${name}_init`,\n            init: `modify(${stringValue(selCmpt.name + STORE)}, [${insert}])`\n        });\n    }\n    return signals;\n}\nconst multi = {\n    signals: singleOrMultiSignals,\n    modifyExpr: (model, selCmpt) => {\n        const tpl = selCmpt.name + TUPLE;\n        return tpl + ', ' + (selCmpt.resolve === 'global' ? 'null' : `{unit: ${unitName(model)}}`);\n    }\n};\nexport default multi;\n//# sourceMappingURL=multi.js.map","import { singleOrMultiSignals } from './multi';\nimport { TUPLE, unitName } from './selection';\nconst single = {\n    signals: singleOrMultiSignals,\n    modifyExpr: (model, selCmpt) => {\n        const tpl = selCmpt.name + TUPLE;\n        return tpl + ', ' + (selCmpt.resolve === 'global' ? 'true' : `{unit: ${unitName(model)}}`);\n    }\n};\nexport default single;\n//# sourceMappingURL=single.js.map","import * as log from '../../../log';\nimport { isPathMark } from '../../../mark';\nimport { positionalProjections } from '../selection';\nconst VORONOI = 'voronoi';\nconst nearest = {\n    has: selCmpt => {\n        return selCmpt.type !== 'interval' && selCmpt.nearest;\n    },\n    marks: (model, selCmpt, marks) => {\n        const { x, y } = positionalProjections(selCmpt);\n        const markType = model.mark;\n        if (isPathMark(markType)) {\n            log.warn(log.message.nearestNotSupportForContinuous(markType));\n            return marks;\n        }\n        const cellDef = {\n            name: model.getName(VORONOI),\n            type: 'path',\n            from: { data: model.getName('marks') },\n            encode: {\n                enter: {\n                    fill: { value: 'transparent' },\n                    strokeWidth: { value: 0.35 },\n                    stroke: { value: 'transparent' },\n                    isVoronoi: { value: true }\n                }\n            },\n            transform: [\n                {\n                    type: 'voronoi',\n                    x: { expr: x || (!x && !y) ? 'datum.datum.x || 0' : '0' },\n                    y: { expr: y || (!x && !y) ? 'datum.datum.y || 0' : '0' },\n                    size: [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')]\n                }\n            ]\n        };\n        let index = 0;\n        let exists = false;\n        marks.forEach((mark, i) => {\n            const name = mark.name || '';\n            if (name === model.component.mark[0].name) {\n                index = i;\n            }\n            else if (name.indexOf(VORONOI) >= 0) {\n                exists = true;\n            }\n        });\n        if (!exists) {\n            marks.splice(index + 1, 0, cellDef);\n        }\n        return marks;\n    }\n};\nexport default nearest;\n//# sourceMappingURL=nearest.js.map","import { selector as parseSelector } from 'vega-event-selector';\nimport { X, Y } from '../../../channel';\nimport { BRUSH as INTERVAL_BRUSH } from '../interval';\nimport { channelSignalName, positionalProjections } from '../selection';\nimport scalesCompiler, { domain } from './scales';\nconst ANCHOR = '_translate_anchor';\nconst DELTA = '_translate_delta';\nconst translate = {\n    has: selCmpt => {\n        return selCmpt.type === 'interval' && selCmpt.translate;\n    },\n    signals: (model, selCmpt, signals) => {\n        const name = selCmpt.name;\n        const hasScales = scalesCompiler.has(selCmpt);\n        const anchor = name + ANCHOR;\n        const { x, y } = positionalProjections(selCmpt);\n        let events = parseSelector(selCmpt.translate, 'scope');\n        if (!hasScales) {\n            events = events.map(e => ((e.between[0].markname = name + INTERVAL_BRUSH), e));\n        }\n        signals.push({\n            name: anchor,\n            value: {},\n            on: [\n                {\n                    events: events.map(e => e.between[0]),\n                    update: '{x: x(unit), y: y(unit)' +\n                        (x !== null\n                            ? ', extent_x: ' +\n                                (hasScales ? domain(model, X) : `slice(${channelSignalName(selCmpt, 'x', 'visual')})`)\n                            : '') +\n                        (y !== null\n                            ? ', extent_y: ' +\n                                (hasScales ? domain(model, Y) : `slice(${channelSignalName(selCmpt, 'y', 'visual')})`)\n                            : '') +\n                        '}'\n                }\n            ]\n        }, {\n            name: name + DELTA,\n            value: {},\n            on: [\n                {\n                    events: events,\n                    update: `{x: ${anchor}.x - x(unit), y: ${anchor}.y - y(unit)}`\n                }\n            ]\n        });\n        if (x !== null) {\n            onDelta(model, selCmpt, X, 'width', signals);\n        }\n        if (y !== null) {\n            onDelta(model, selCmpt, Y, 'height', signals);\n        }\n        return signals;\n    }\n};\nexport default translate;\nfunction onDelta(model, selCmpt, channel, size, signals) {\n    const name = selCmpt.name;\n    const hasScales = scalesCompiler.has(selCmpt);\n    const signal = signals.filter(s => {\n        return s.name === channelSignalName(selCmpt, channel, hasScales ? 'data' : 'visual');\n    })[0];\n    const anchor = name + ANCHOR;\n    const delta = name + DELTA;\n    const sizeSg = model.getSizeSignalRef(size).signal;\n    const scaleCmpt = model.getScaleComponent(channel);\n    const scaleType = scaleCmpt.get('type');\n    const sign = hasScales && channel === X ? '-' : ''; // Invert delta when panning x-scales.\n    const extent = `${anchor}.extent_${channel}`;\n    const offset = `${sign}${delta}.${channel} / ` + (hasScales ? `${sizeSg}` : `span(${extent})`);\n    const panFn = !hasScales\n        ? 'panLinear'\n        : scaleType === 'log'\n            ? 'panLog'\n            : scaleType === 'pow'\n                ? 'panPow'\n                : 'panLinear';\n    const update = `${panFn}(${extent}, ${offset}` +\n        (hasScales && scaleType === 'pow' ? `, ${scaleCmpt.get('exponent') || 1}` : '') +\n        ')';\n    signal.on.push({\n        events: { signal: delta },\n        update: hasScales ? update : `clampRange(${update}, 0, ${sizeSg})`\n    });\n}\n//# sourceMappingURL=translate.js.map","import { selector as parseSelector } from 'vega-event-selector';\nimport { stringValue } from 'vega-util';\nimport { X, Y } from '../../../channel';\nimport { BRUSH as INTERVAL_BRUSH } from '../interval';\nimport { channelSignalName, positionalProjections } from '../selection';\nimport { default as scalesCompiler, domain } from './scales';\nconst ANCHOR = '_zoom_anchor';\nconst DELTA = '_zoom_delta';\nconst zoom = {\n    has: selCmpt => {\n        return selCmpt.type === 'interval' && selCmpt.zoom;\n    },\n    signals: (model, selCmpt, signals) => {\n        const name = selCmpt.name;\n        const hasScales = scalesCompiler.has(selCmpt);\n        const delta = name + DELTA;\n        const { x, y } = positionalProjections(selCmpt);\n        const sx = stringValue(model.scaleName(X));\n        const sy = stringValue(model.scaleName(Y));\n        let events = parseSelector(selCmpt.zoom, 'scope');\n        if (!hasScales) {\n            events = events.map(e => ((e.markname = name + INTERVAL_BRUSH), e));\n        }\n        signals.push({\n            name: name + ANCHOR,\n            on: [\n                {\n                    events: events,\n                    update: !hasScales\n                        ? `{x: x(unit), y: y(unit)}`\n                        : '{' +\n                            [sx ? `x: invert(${sx}, x(unit))` : '', sy ? `y: invert(${sy}, y(unit))` : '']\n                                .filter(expr => !!expr)\n                                .join(', ') +\n                            '}'\n                }\n            ]\n        }, {\n            name: delta,\n            on: [\n                {\n                    events: events,\n                    force: true,\n                    update: 'pow(1.001, event.deltaY * pow(16, event.deltaMode))'\n                }\n            ]\n        });\n        if (x !== null) {\n            onDelta(model, selCmpt, 'x', 'width', signals);\n        }\n        if (y !== null) {\n            onDelta(model, selCmpt, 'y', 'height', signals);\n        }\n        return signals;\n    }\n};\nexport default zoom;\nfunction onDelta(model, selCmpt, channel, size, signals) {\n    const name = selCmpt.name;\n    const hasScales = scalesCompiler.has(selCmpt);\n    const signal = signals.filter(s => {\n        return s.name === channelSignalName(selCmpt, channel, hasScales ? 'data' : 'visual');\n    })[0];\n    const sizeSg = model.getSizeSignalRef(size).signal;\n    const scaleCmpt = model.getScaleComponent(channel);\n    const scaleType = scaleCmpt.get('type');\n    const base = hasScales ? domain(model, channel) : signal.name;\n    const delta = name + DELTA;\n    const anchor = `${name}${ANCHOR}.${channel}`;\n    const zoomFn = !hasScales\n        ? 'zoomLinear'\n        : scaleType === 'log'\n            ? 'zoomLog'\n            : scaleType === 'pow'\n                ? 'zoomPow'\n                : 'zoomLinear';\n    const update = `${zoomFn}(${base}, ${anchor}, ${delta}` +\n        (hasScales && scaleType === 'pow' ? `, ${scaleCmpt.get('exponent') || 1}` : '') +\n        ')';\n    signal.on.push({\n        events: { signal: delta },\n        update: hasScales ? update : `clampRange(${update}, 0, ${sizeSg})`\n    });\n}\n//# sourceMappingURL=zoom.js.map","import inputs from './inputs';\nimport nearest from './nearest';\nimport project from './project';\nimport scales from './scales';\nimport toggle from './toggle';\nimport translate from './translate';\nimport zoom from './zoom';\nconst compilers = {\n    project,\n    toggle,\n    scales,\n    translate,\n    zoom,\n    inputs,\n    nearest\n};\nexport function forEachTransform(selCmpt, cb) {\n    for (const t in compilers) {\n        if (compilers[t].has(selCmpt)) {\n            cb(compilers[t]);\n        }\n    }\n}\n//# sourceMappingURL=transforms.js.map","import { TUPLE, unitName } from '../selection';\nconst TOGGLE = '_toggle';\nconst toggle = {\n    has: selCmpt => {\n        return selCmpt.type === 'multi' && selCmpt.toggle;\n    },\n    signals: (model, selCmpt, signals) => {\n        return signals.concat({\n            name: selCmpt.name + TOGGLE,\n            value: false,\n            on: [{ events: selCmpt.events, update: selCmpt.toggle }]\n        });\n    },\n    modifyExpr: (model, selCmpt, expr) => {\n        const tpl = selCmpt.name + TUPLE;\n        const signal = selCmpt.name + TOGGLE;\n        return (`${signal} ? null : ${tpl}, ` +\n            (selCmpt.resolve === 'global' ? `${signal} ? null : true, ` : `${signal} ? null : {unit: ${unitName(model)}}, `) +\n            `${signal} ? ${tpl} : null`);\n    }\n};\nexport default toggle;\n//# sourceMappingURL=toggle.js.map","import { accessPathWithDatum, varName } from '../../../util';\nimport { assembleInit, TUPLE } from '../selection';\nimport nearest from './nearest';\nimport { TUPLE_FIELDS } from './project';\nconst inputBindings = {\n    has: selCmpt => {\n        return selCmpt.type === 'single' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind !== 'scales';\n    },\n    topLevelSignals: (model, selCmpt, signals) => {\n        const name = selCmpt.name;\n        const proj = selCmpt.project;\n        const bind = selCmpt.bind;\n        const init = selCmpt.init && selCmpt.init[0]; // Can only exist on single selections (one initial value).\n        const datum = nearest.has(selCmpt) ? '(item().isVoronoi ? datum.datum : datum)' : 'datum';\n        proj.forEach((p, i) => {\n            const sgname = varName(`${name}_${p.field}`);\n            const hasSignal = signals.filter(s => s.name === sgname);\n            if (!hasSignal.length) {\n                signals.unshift(Object.assign({ name: sgname }, (init ? { init: assembleInit(init[i]) } : { value: null }), { on: [\n                        {\n                            events: selCmpt.events,\n                            update: `datum && item().mark.marktype !== 'group' ? ${accessPathWithDatum(p.field, datum)} : null`\n                        }\n                    ], bind: bind[p.field] || bind[p.channel] || bind }));\n            }\n        });\n        return signals;\n    },\n    signals: (model, selCmpt, signals) => {\n        const name = selCmpt.name;\n        const proj = selCmpt.project;\n        const signal = signals.filter(s => s.name === name + TUPLE)[0];\n        const fields = name + TUPLE + TUPLE_FIELDS;\n        const values = proj.map(p => varName(`${name}_${p.field}`));\n        const valid = values.map(v => `${v} !== null`).join(' && ');\n        if (values.length) {\n            signal.update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;\n        }\n        delete signal.value;\n        delete signal.on;\n        return signals;\n    }\n};\nexport default inputBindings;\n//# sourceMappingURL=inputs.js.map","import { selector as parseSelector } from 'vega-event-selector';\nimport { identity, isArray, isString, stringValue } from 'vega-util';\nimport { FACET_CHANNELS, X, Y } from '../../channel';\nimport { dateTimeExpr, isDateTime } from '../../datetime';\nimport { warn } from '../../log';\nimport { SELECTION_ID } from '../../selection';\nimport { accessPathWithDatum, duplicate, keys, logicalExpr, varName } from '../../util';\nimport { isFacetModel, isUnitModel } from '../model';\nimport intervalCompiler from './interval';\nimport multiCompiler from './multi';\nimport singleCompiler from './single';\nimport { forEachTransform } from './transforms/transforms';\nexport const STORE = '_store';\nexport const TUPLE = '_tuple';\nexport const MODIFY = '_modify';\nexport const SELECTION_DOMAIN = '_selection_domain_';\nexport const VL_SELECTION_RESOLVE = 'vlSelectionResolve';\nexport function parseUnitSelection(model, selDefs) {\n    const selCmpts = {};\n    const selectionConfig = model.config.selection;\n    if (selDefs) {\n        selDefs = duplicate(selDefs); // duplicate to avoid side effects to original spec\n    }\n    for (let name in selDefs) {\n        if (!selDefs.hasOwnProperty(name)) {\n            continue;\n        }\n        const selDef = selDefs[name];\n        const cfg = selectionConfig[selDef.type];\n        // Set default values from config if a property hasn't been specified,\n        // or if it is true. E.g., \"translate\": true should use the default\n        // event handlers for translate. However, true may be a valid value for\n        // a property (e.g., \"nearest\": true).\n        for (const key in cfg) {\n            // A selection should contain either `encodings` or `fields`, only use\n            // default values for these two values if neither of them is specified.\n            if ((key === 'encodings' && selDef.fields) || (key === 'fields' && selDef.encodings)) {\n                continue;\n            }\n            if (key === 'mark') {\n                selDef[key] = Object.assign({}, cfg[key], selDef[key]);\n            }\n            if (selDef[key] === undefined || selDef[key] === true) {\n                selDef[key] = cfg[key] || selDef[key];\n            }\n        }\n        name = varName(name);\n        const selCmpt = (selCmpts[name] = Object.assign({}, selDef, { name: name, events: isString(selDef.on) ? parseSelector(selDef.on, 'scope') : selDef.on }));\n        forEachTransform(selCmpt, txCompiler => {\n            if (txCompiler.parse) {\n                txCompiler.parse(model, selDef, selCmpt);\n            }\n        });\n    }\n    return selCmpts;\n}\nexport function assembleUnitSelectionSignals(model, signals) {\n    forEachSelection(model, (selCmpt, selCompiler) => {\n        const name = selCmpt.name;\n        let modifyExpr = selCompiler.modifyExpr(model, selCmpt);\n        signals.push(...selCompiler.signals(model, selCmpt));\n        forEachTransform(selCmpt, txCompiler => {\n            if (txCompiler.signals) {\n                signals = txCompiler.signals(model, selCmpt, signals);\n            }\n            if (txCompiler.modifyExpr) {\n                modifyExpr = txCompiler.modifyExpr(model, selCmpt, modifyExpr);\n            }\n        });\n        signals.push({\n            name: name + MODIFY,\n            update: `modify(${stringValue(selCmpt.name + STORE)}, ${modifyExpr})`\n        });\n    });\n    return signals;\n}\nexport function assembleFacetSignals(model, signals) {\n    if (model.component.selection && keys(model.component.selection).length) {\n        const name = stringValue(model.getName('cell'));\n        signals.unshift({\n            name: 'facet',\n            value: {},\n            on: [\n                {\n                    events: parseSelector('mousemove', 'scope'),\n                    update: `isTuple(facet) ? facet : group(${name}).datum`\n                }\n            ]\n        });\n    }\n    return signals;\n}\nexport function assembleTopLevelSignals(model, signals) {\n    let hasSelections = false;\n    forEachSelection(model, (selCmpt, selCompiler) => {\n        const name = selCmpt.name;\n        const store = stringValue(name + STORE);\n        const hasSg = signals.filter(s => s.name === name);\n        if (!hasSg.length) {\n            signals.push({\n                name: selCmpt.name,\n                update: `${VL_SELECTION_RESOLVE}(${store}` +\n                    (selCmpt.resolve === 'global' ? ')' : `, ${stringValue(selCmpt.resolve)})`)\n            });\n        }\n        hasSelections = true;\n        if (selCompiler.topLevelSignals) {\n            signals = selCompiler.topLevelSignals(model, selCmpt, signals);\n        }\n        forEachTransform(selCmpt, txCompiler => {\n            if (txCompiler.topLevelSignals) {\n                signals = txCompiler.topLevelSignals(model, selCmpt, signals);\n            }\n        });\n    });\n    if (hasSelections) {\n        const hasUnit = signals.filter(s => s.name === 'unit');\n        if (!hasUnit.length) {\n            signals.unshift({\n                name: 'unit',\n                value: {},\n                on: [{ events: 'mousemove', update: 'isTuple(group()) ? group() : unit' }]\n            });\n        }\n    }\n    return signals;\n}\nexport function assembleUnitSelectionData(model, data) {\n    forEachSelection(model, selCmpt => {\n        const contains = data.filter(d => d.name === selCmpt.name + STORE);\n        if (!contains.length) {\n            data.push({ name: selCmpt.name + STORE });\n        }\n    });\n    return data;\n}\nexport function assembleUnitSelectionMarks(model, marks) {\n    forEachSelection(model, (selCmpt, selCompiler) => {\n        marks = selCompiler.marks ? selCompiler.marks(model, selCmpt, marks) : marks;\n        forEachTransform(selCmpt, txCompiler => {\n            if (txCompiler.marks) {\n                marks = txCompiler.marks(model, selCmpt, marks);\n            }\n        });\n    });\n    return marks;\n}\nexport function assembleLayerSelectionMarks(model, marks) {\n    for (const child of model.children) {\n        if (isUnitModel(child)) {\n            marks = assembleUnitSelectionMarks(child, marks);\n        }\n    }\n    return marks;\n}\nexport function selectionPredicate(model, selections, dfnode) {\n    const stores = [];\n    function expr(name) {\n        const vname = varName(name);\n        const selCmpt = model.getSelectionComponent(vname, name);\n        const store = stringValue(vname + STORE);\n        if (selCmpt.timeUnit) {\n            const child = dfnode || model.component.data.raw;\n            const tunode = selCmpt.timeUnit.clone();\n            if (child.parent) {\n                tunode.insertAsParentOf(child);\n            }\n            else {\n                child.parent = tunode;\n            }\n        }\n        if (selCmpt.empty !== 'none') {\n            stores.push(store);\n        }\n        return (`vlSelectionTest(${store}, datum` + (selCmpt.resolve === 'global' ? ')' : `, ${stringValue(selCmpt.resolve)})`));\n    }\n    const predicateStr = logicalExpr(selections, expr);\n    return ((stores.length ? '!(' + stores.map(s => `length(data(${s}))`).join(' || ') + ') || ' : '') + `(${predicateStr})`);\n}\n// Selections are parsed _after_ scales. If a scale domain is set to\n// use a selection, the SELECTION_DOMAIN constant is used as the\n// domainRaw.signal during scale.parse and then replaced with the necessary\n// selection expression function during scale.assemble. To not pollute the\n// type signatures to account for this setup, the selection domain definition\n// is coerced to a string and appended to SELECTION_DOMAIN.\nexport function isRawSelectionDomain(domainRaw) {\n    return domainRaw.signal.indexOf(SELECTION_DOMAIN) >= 0;\n}\nexport function selectionScaleDomain(model, domainRaw) {\n    const selDomain = JSON.parse(domainRaw.signal.replace(SELECTION_DOMAIN, ''));\n    const name = varName(selDomain.selection);\n    const encoding = selDomain.encoding;\n    let field = selDomain.field;\n    let selCmpt = model.component.selection && model.component.selection[name];\n    if (selCmpt) {\n        warn('Use \"bind\": \"scales\" to setup a binding for scales and selections within the same view.');\n    }\n    else {\n        selCmpt = model.getSelectionComponent(name, selDomain.selection);\n        if (!encoding && !field) {\n            field = selCmpt.project[0].field;\n            if (selCmpt.project.length > 1) {\n                warn('A \"field\" or \"encoding\" must be specified when using a selection as a scale domain. ' +\n                    `Using \"field\": ${stringValue(field)}.`);\n            }\n        }\n        else if (encoding && !field) {\n            const encodings = selCmpt.project.filter(p => p.channel === encoding);\n            if (!encodings.length || encodings.length > 1) {\n                field = selCmpt.project[0].field;\n                warn((!encodings.length ? 'No ' : 'Multiple ') +\n                    `matching ${stringValue(encoding)} encoding found for selection ${stringValue(selDomain.selection)}. ` +\n                    `Using \"field\": ${stringValue(field)}.`);\n            }\n            else {\n                field = encodings[0].field;\n            }\n        }\n        return { signal: accessPathWithDatum(field, name) };\n    }\n    return { signal: 'null' };\n}\n// Utility functions\nfunction forEachSelection(model, cb) {\n    const selections = model.component.selection;\n    for (const name in selections) {\n        if (selections.hasOwnProperty(name)) {\n            const sel = selections[name];\n            cb(sel, compiler(sel.type));\n        }\n    }\n}\nfunction compiler(type) {\n    switch (type) {\n        case 'single':\n            return singleCompiler;\n        case 'multi':\n            return multiCompiler;\n        case 'interval':\n            return intervalCompiler;\n    }\n    return null;\n}\nfunction getFacetModel(model) {\n    let parent = model.parent;\n    while (parent) {\n        if (isFacetModel(parent)) {\n            break;\n        }\n        parent = parent.parent;\n    }\n    return parent;\n}\nexport function unitName(model) {\n    let name = stringValue(model.name);\n    const facetModel = getFacetModel(model);\n    if (facetModel) {\n        const { facet } = facetModel;\n        for (const channel of FACET_CHANNELS) {\n            if (facet[channel]) {\n                name += ` + '__facet_${channel}_' + (${accessPathWithDatum(facetModel.vgField(channel), 'facet')})`;\n            }\n        }\n    }\n    return name;\n}\nexport function requiresSelectionId(model) {\n    let identifier = false;\n    forEachSelection(model, selCmpt => {\n        identifier = identifier || selCmpt.project.some(proj => proj.field === SELECTION_ID);\n    });\n    return identifier;\n}\nexport function channelSignalName(selCmpt, channel, range) {\n    const sgNames = selCmpt._signalNames || (selCmpt._signalNames = {});\n    if (sgNames[channel] && sgNames[channel][range]) {\n        return sgNames[channel][range];\n    }\n    sgNames[channel] = sgNames[channel] || {};\n    const basename = varName(selCmpt.name + '_' + (range === 'visual' ? channel : selCmpt.fields[channel]));\n    let name = basename;\n    let counter = 1;\n    while (sgNames[name]) {\n        name = `${basename}_${counter++}`;\n    }\n    return (sgNames[name] = sgNames[channel][range] = name);\n}\nexport function positionalProjections(selCmpt) {\n    let x = null;\n    let xi = null;\n    let y = null;\n    let yi = null;\n    selCmpt.project.forEach((p, i) => {\n        if (p.channel === X) {\n            x = p;\n            xi = i;\n        }\n        else if (p.channel === Y) {\n            y = p;\n            yi = i;\n        }\n    });\n    return { x, xi, y, yi };\n}\nexport function assembleInit(init, wrap = identity) {\n    if (isArray(init)) {\n        const str = init.map(v => assembleInit(v, wrap)).join(', ');\n        return `[${str}]`;\n    }\n    else if (isDateTime(init)) {\n        return wrap(dateTimeExpr(init));\n    }\n    return wrap(JSON.stringify(init));\n}\n//# sourceMappingURL=selection.js.map","import { isString } from 'vega-util';\nimport { fieldFilterExpression, isSelectionPredicate } from '../predicate';\nimport { logicalExpr } from '../util';\nimport { selectionPredicate } from './selection/selection';\n/**\n * Converts a predicate into an expression.\n */\n// model is only used for selection filters.\nexport function expression(model, filterOp, node) {\n    return logicalExpr(filterOp, (predicate) => {\n        if (isString(predicate)) {\n            return predicate;\n        }\n        else if (isSelectionPredicate(predicate)) {\n            return selectionPredicate(model, predicate.selection, node);\n        }\n        else {\n            // Filter Object\n            return fieldFilterExpression(predicate);\n        }\n    });\n}\n//# sourceMappingURL=predicate.js.map","import { isArray, isFunction, isString, stringValue } from 'vega-util';\nimport { isBinned, isBinning } from '../../bin';\nimport { getMainRangeChannel, X, X2, Y, Y2 } from '../../channel';\nimport { forEach } from '../../encoding';\nimport { binRequiresRange, format, hasConditionalFieldDef, isFieldDef, isTypedFieldDef, isValueDef, title, vgField } from '../../fielddef';\nimport * as log from '../../log';\nimport { hasDiscreteDomain, ScaleType } from '../../scale';\nimport { QUANTITATIVE } from '../../type';\nimport { contains, some } from '../../util';\nimport { formatSignalRef } from '../common';\n// TODO: we need to find a way to refactor these so that scaleName is a part of scale\n// but that's complicated.  For now, this is a huge step moving forward.\n/**\n * @return Vega ValueRef for normal x- or y-position without projection\n */\nexport function position(channel, channelDef, channel2Def, scaleName, scale, stack, defaultRef) {\n    if (isFieldDef(channelDef) && stack && channel === stack.fieldChannel) {\n        // x or y use stack_end so that stacked line's point mark use stack_end too.\n        return fieldRef(channelDef, scaleName, { suffix: 'end' });\n    }\n    return midPoint(channel, channelDef, channel2Def, scaleName, scale, stack, defaultRef);\n}\n/**\n * @return Vega ValueRef for normal x2- or y2-position without projection\n */\nexport function position2(channel, aFieldDef, a2fieldDef, scaleName, scale, stack, defaultRef) {\n    if (isFieldDef(aFieldDef) &&\n        stack &&\n        // If fieldChannel is X and channel is X2 (or Y and Y2)\n        channel.charAt(0) === stack.fieldChannel.charAt(0)) {\n        return fieldRef(aFieldDef, scaleName, { suffix: 'start' });\n    }\n    return midPoint(channel, a2fieldDef, undefined, scaleName, scale, stack, defaultRef);\n}\nexport function getOffset(channel, markDef) {\n    const offsetChannel = channel + 'Offset';\n    // TODO: in the future read from encoding channel too\n    const markDefOffsetValue = markDef[offsetChannel];\n    if (markDefOffsetValue) {\n        return markDefOffsetValue;\n    }\n    return undefined;\n}\n/**\n * Value Ref for binned fields\n */\nexport function bin(fieldDef, scaleName, side, offset) {\n    const binSuffix = side === 'start' ? undefined : 'end';\n    return fieldRef(fieldDef, scaleName, { binSuffix }, offset ? { offset } : {});\n}\nexport function fieldRef(fieldDef, scaleName, opt, mixins) {\n    const ref = Object.assign({}, (scaleName ? { scale: scaleName } : {}), { field: vgField(fieldDef, opt) });\n    if (mixins) {\n        return Object.assign({}, ref, mixins);\n    }\n    return ref;\n}\nexport function bandRef(scaleName, band = true) {\n    return {\n        scale: scaleName,\n        band: band\n    };\n}\n/**\n * Signal that returns the middle of a bin from start and end field. Should only be used with x and y.\n */\nfunction binMidSignal(scaleName, fieldDef, fieldDef2) {\n    const start = vgField(fieldDef, { expr: 'datum' });\n    const end = fieldDef2 !== undefined\n        ? vgField(fieldDef2, { expr: 'datum' })\n        : vgField(fieldDef, { binSuffix: 'end', expr: 'datum' });\n    return {\n        signal: `scale(\"${scaleName}\", (${start} + ${end}) / 2)`\n    };\n}\n/**\n * @returns {VgValueRef} Value Ref for xc / yc or mid point for other channels.\n */\nexport function midPoint(channel, channelDef, channel2Def, scaleName, scale, stack, defaultRef) {\n    // TODO: datum support\n    if (channelDef) {\n        /* istanbul ignore else */\n        if (isFieldDef(channelDef)) {\n            if (isTypedFieldDef(channelDef)) {\n                if (isBinning(channelDef.bin)) {\n                    // Use middle only for x an y to place marks in the center between start and end of the bin range.\n                    // We do not use the mid point for other channels (e.g. size) so that properties of legends and marks match.\n                    if (contains([X, Y], channel) && channelDef.type === QUANTITATIVE) {\n                        if (stack && stack.impute) {\n                            // For stack, we computed bin_mid so we can impute.\n                            return fieldRef(channelDef, scaleName, { binSuffix: 'mid' });\n                        }\n                        // For non-stack, we can just calculate bin mid on the fly using signal.\n                        return binMidSignal(scaleName, channelDef);\n                    }\n                    return fieldRef(channelDef, scaleName, binRequiresRange(channelDef, channel) ? { binSuffix: 'range' } : {});\n                }\n                else if (isBinned(channelDef.bin)) {\n                    if (isFieldDef(channel2Def)) {\n                        return binMidSignal(scaleName, channelDef, channel2Def);\n                    }\n                    else {\n                        const channel2 = channel === X ? X2 : Y2;\n                        log.warn(log.message.channelRequiredForBinned(channel2));\n                    }\n                }\n            }\n            if (scale) {\n                const scaleType = scale.get('type');\n                if (hasDiscreteDomain(scaleType)) {\n                    if (scaleType === 'band') {\n                        // For band, to get mid point, need to offset by half of the band\n                        return fieldRef(channelDef, scaleName, { binSuffix: 'range' }, { band: 0.5 });\n                    }\n                    return fieldRef(channelDef, scaleName, { binSuffix: 'range' });\n                }\n            }\n            return fieldRef(channelDef, scaleName, {}); // no need for bin suffix\n        }\n        else if (isValueDef(channelDef)) {\n            const value = channelDef.value;\n            if (contains(['x', 'x2'], channel) && value === 'width') {\n                return { field: { group: 'width' } };\n            }\n            else if (contains(['y', 'y2'], channel) && value === 'height') {\n                return { field: { group: 'height' } };\n            }\n            return { value };\n        }\n        // If channelDef is neither field def or value def, it's a condition-only def.\n        // In such case, we will use default ref.\n    }\n    return isFunction(defaultRef) ? defaultRef() : defaultRef;\n}\nexport function tooltipForEncoding(encoding, config) {\n    const keyValues = [];\n    const usedKey = {};\n    function add(fieldDef, channel) {\n        const mainChannel = getMainRangeChannel(channel);\n        if (channel !== mainChannel) {\n            fieldDef = Object.assign({}, fieldDef, { type: encoding[mainChannel].type });\n        }\n        const key = title(fieldDef, config, { allowDisabling: false });\n        const value = text(fieldDef, config).signal;\n        if (!usedKey[key]) {\n            keyValues.push(`${stringValue(key)}: ${value}`);\n        }\n        usedKey[key] = true;\n    }\n    forEach(encoding, (channelDef, channel) => {\n        if (isFieldDef(channelDef)) {\n            add(channelDef, channel);\n        }\n        else if (hasConditionalFieldDef(channelDef)) {\n            add(channelDef.condition, channel);\n        }\n    });\n    return keyValues.length ? { signal: `{${keyValues.join(', ')}}` } : undefined;\n}\nexport function text(channelDef, config) {\n    // text\n    if (channelDef) {\n        if (isValueDef(channelDef)) {\n            return { value: channelDef.value };\n        }\n        if (isTypedFieldDef(channelDef)) {\n            return formatSignalRef(channelDef, format(channelDef), 'datum', config);\n        }\n    }\n    return undefined;\n}\nexport function mid(sizeRef) {\n    return Object.assign({}, sizeRef, { mult: 0.5 });\n}\n/**\n * Whether the scale definitely includes zero in the domain\n */\nfunction domainDefinitelyIncludeZero(scale) {\n    if (scale.get('zero') !== false) {\n        return true;\n    }\n    const domains = scale.domains;\n    if (isArray(domains)) {\n        return some(domains, d => isArray(d) && d.length === 2 && d[0] <= 0 && d[1] >= 0);\n    }\n    return false;\n}\nexport function getDefaultRef(defaultRef, channel, scaleName, scale, mark) {\n    return () => {\n        if (isString(defaultRef)) {\n            if (scaleName) {\n                const scaleType = scale.get('type');\n                if (contains([ScaleType.LOG, ScaleType.TIME, ScaleType.UTC], scaleType)) {\n                    // Log scales cannot have zero.\n                    // Zero in time scale is arbitrary, and does not affect ratio.\n                    // (Time is an interval level of measurement, not ratio).\n                    // See https://en.wikipedia.org/wiki/Level_of_measurement for more info.\n                    if (mark === 'bar' || mark === 'area') {\n                        log.warn(log.message.nonZeroScaleUsedWithLengthMark(mark, channel, { scaleType }));\n                    }\n                }\n                else {\n                    if (domainDefinitelyIncludeZero(scale)) {\n                        return {\n                            scale: scaleName,\n                            value: 0\n                        };\n                    }\n                    if (mark === 'bar' || mark === 'area') {\n                        log.warn(log.message.nonZeroScaleUsedWithLengthMark(mark, channel, { zeroFalse: scale.explicit.zero === false }));\n                    }\n                }\n            }\n            if (defaultRef === 'zeroOrMin') {\n                return channel === 'x' ? { value: 0 } : { field: { group: 'height' } };\n            }\n            else {\n                // zeroOrMax\n                return channel === 'x' ? { field: { group: 'width' } } : { value: 0 };\n            }\n        }\n        return defaultRef;\n    };\n}\n//# sourceMappingURL=valueref.js.map","import { array, isArray, isObject, isString } from 'vega-util';\nimport { isBinned, isBinning } from '../../bin';\nimport { SCALE_CHANNELS, X, X2, Y2 } from '../../channel';\nimport { getTypedFieldDef, isConditionalSelection, isFieldDef, isValueDef } from '../../fielddef';\nimport * as log from '../../log';\nimport { isPathMark } from '../../mark';\nimport { hasContinuousDomain } from '../../scale';\nimport { contains, getFirstDefined, keys } from '../../util';\nimport { VG_MARK_CONFIGS } from '../../vega.schema';\nimport { getMarkConfig } from '../common';\nimport { expression } from '../predicate';\nimport { selectionPredicate } from '../selection/selection';\nimport * as ref from './valueref';\nfunction isVisible(c) {\n    return c !== 'transparent' && c !== null && c !== undefined;\n}\nexport function color(model) {\n    const { markDef, encoding, config } = model;\n    const { filled, type: markType } = markDef;\n    const configValue = {\n        fill: getMarkConfig('fill', markDef, config),\n        stroke: getMarkConfig('stroke', markDef, config),\n        color: getMarkConfig('color', markDef, config)\n    };\n    const transparentIfNeeded = contains(['bar', 'point', 'circle', 'square', 'geoshape'], markType)\n        ? 'transparent'\n        : undefined;\n    const defaultFill = getFirstDefined(markDef.fill, configValue.fill, \n    // If there is no fill, always fill symbols, bar, geoshape\n    // with transparent fills https://github.com/vega/vega-lite/issues/1316\n    transparentIfNeeded);\n    const defaultStroke = getFirstDefined(markDef.stroke, configValue.stroke);\n    const colorVgChannel = filled ? 'fill' : 'stroke';\n    const fillStrokeMarkDefAndConfig = Object.assign({}, (defaultFill ? { fill: { value: defaultFill } } : {}), (defaultStroke ? { stroke: { value: defaultStroke } } : {}));\n    if (encoding.fill || encoding.stroke) {\n        // ignore encoding.color, markDef.color, config.color\n        if (markDef.color) {\n            // warn for markDef.color  (no need to warn encoding.color as it will be dropped in normalized already)\n            log.warn(log.message.droppingColor('property', { fill: 'fill' in encoding, stroke: 'stroke' in encoding }));\n        }\n        return Object.assign({}, nonPosition('fill', model, { defaultValue: getFirstDefined(defaultFill, transparentIfNeeded) }), nonPosition('stroke', model, { defaultValue: defaultStroke }));\n    }\n    else if (encoding.color) {\n        return Object.assign({}, fillStrokeMarkDefAndConfig, nonPosition('color', model, {\n            vgChannel: colorVgChannel,\n            // apply default fill/stroke first, then color config, then transparent if needed.\n            defaultValue: getFirstDefined(markDef[colorVgChannel], markDef.color, configValue[colorVgChannel], configValue.color, filled ? transparentIfNeeded : undefined)\n        }));\n    }\n    else if (isVisible(markDef.fill) || isVisible(markDef.stroke)) {\n        // Ignore markDef.color\n        if (markDef.color) {\n            log.warn(log.message.droppingColor('property', { fill: 'fill' in markDef, stroke: 'stroke' in markDef }));\n        }\n        return fillStrokeMarkDefAndConfig;\n    }\n    else if (markDef.color) {\n        return Object.assign({}, fillStrokeMarkDefAndConfig, { \n            // override config with markDef.color\n            [colorVgChannel]: { value: markDef.color } });\n    }\n    else if (isVisible(configValue.fill) || isVisible(configValue.stroke)) {\n        // ignore config.color\n        return fillStrokeMarkDefAndConfig;\n    }\n    else if (configValue.color) {\n        return Object.assign({}, (transparentIfNeeded ? { fill: { value: 'transparent' } } : {}), { [colorVgChannel]: { value: configValue.color } });\n    }\n    return {};\n}\nexport function baseEncodeEntry(model, ignore) {\n    const { fill, stroke } = color(model);\n    return Object.assign({}, markDefProperties(model.markDef, ignore), wrapInvalid(model, 'fill', fill), wrapInvalid(model, 'stroke', stroke), nonPosition('opacity', model), nonPosition('fillOpacity', model), nonPosition('strokeOpacity', model), nonPosition('strokeWidth', model), tooltip(model), text(model, 'href'));\n}\nfunction wrapInvalid(model, channel, valueRef) {\n    const { config, mark } = model;\n    if (config.invalidValues && valueRef && !isPathMark(mark)) {\n        // For non-path marks, we have to exclude invalid values (null and NaN) for scales with continuous domains.\n        // For path marks, we will use \"defined\" property and skip these values instead.\n        const test = validPredicate(model, { invalid: true, channels: SCALE_CHANNELS });\n        if (test) {\n            return {\n                [channel]: [\n                    // prepend the invalid case\n                    // TODO: support custom value\n                    { test, value: null },\n                    ...array(valueRef)\n                ]\n            };\n        }\n    }\n    return valueRef ? { [channel]: valueRef } : {};\n}\nfunction markDefProperties(mark, ignore) {\n    return VG_MARK_CONFIGS.reduce((m, prop) => {\n        if (mark[prop] !== undefined && ignore[prop] !== 'ignore') {\n            m[prop] = { value: mark[prop] };\n        }\n        return m;\n    }, {});\n}\nexport function valueIfDefined(prop, value) {\n    if (value !== undefined) {\n        return { [prop]: { value: value } };\n    }\n    return undefined;\n}\nfunction validPredicate(model, { invalid = false, channels }) {\n    const filterIndex = channels.reduce((aggregator, channel) => {\n        const scaleComponent = model.getScaleComponent(channel);\n        if (scaleComponent) {\n            const scaleType = scaleComponent.get('type');\n            const field = model.vgField(channel, { expr: 'datum' });\n            // While discrete domain scales can handle invalid values, continuous scales can't.\n            if (field && hasContinuousDomain(scaleType)) {\n                aggregator[field] = true;\n            }\n        }\n        return aggregator;\n    }, {});\n    const fields = keys(filterIndex);\n    if (fields.length > 0) {\n        const op = invalid ? '||' : '&&';\n        return fields\n            .map(field => {\n            const eq = invalid ? '===' : '!==';\n            return `${field} ${eq} null ${op} ${invalid ? '' : '!'}isNaN(${field})`;\n        })\n            .join(` ${op} `);\n    }\n    return undefined;\n}\nexport function defined(model) {\n    if (model.config.invalidValues === 'filter') {\n        const signal = validPredicate(model, { channels: ['x', 'y'] });\n        if (signal) {\n            return { defined: { signal } };\n        }\n    }\n    return {};\n}\n/**\n * Return mixins for non-positional channels with scales.  (Text doesn't have scale.)\n */\nexport function nonPosition(channel, model, opt = {}) {\n    const { markDef, encoding } = model;\n    const { vgChannel = channel } = opt;\n    const { defaultValue = markDef[vgChannel] } = opt;\n    const defaultRef = opt.defaultRef || (defaultValue !== undefined ? { value: defaultValue } : undefined);\n    const channelDef = encoding[channel];\n    return wrapCondition(model, channelDef, vgChannel, cDef => {\n        return ref.midPoint(channel, cDef, undefined, model.scaleName(channel), model.getScaleComponent(channel), null, // No need to provide stack for non-position as it does not affect mid point\n        defaultRef);\n    });\n}\n/**\n * Return a mixin that include a Vega production rule for a Vega-Lite conditional channel definition.\n * or a simple mixin if channel def has no condition.\n */\nexport function wrapCondition(model, channelDef, vgChannel, refFn) {\n    const condition = channelDef && channelDef.condition;\n    const valueRef = refFn(channelDef);\n    if (condition) {\n        const conditions = isArray(condition) ? condition : [condition];\n        const vgConditions = conditions.map(c => {\n            const conditionValueRef = refFn(c);\n            const test = isConditionalSelection(c) ? selectionPredicate(model, c.selection) : expression(model, c.test);\n            return Object.assign({ test }, conditionValueRef);\n        });\n        return {\n            [vgChannel]: [...vgConditions, ...(valueRef !== undefined ? [valueRef] : [])]\n        };\n    }\n    else {\n        return valueRef !== undefined ? { [vgChannel]: valueRef } : {};\n    }\n}\nexport function tooltip(model) {\n    const { encoding, markDef, config } = model;\n    const channelDef = encoding.tooltip;\n    if (isArray(channelDef)) {\n        return { tooltip: ref.tooltipForEncoding({ tooltip: channelDef }, config) };\n    }\n    else {\n        return wrapCondition(model, channelDef, 'tooltip', cDef => {\n            // use valueRef based on channelDef first\n            const tooltipRefFromChannelDef = ref.text(cDef, model.config);\n            if (tooltipRefFromChannelDef) {\n                return tooltipRefFromChannelDef;\n            }\n            if (cDef === null) {\n                // Allow using encoding.tooltip = null to disable tooltip\n                return undefined;\n            }\n            // If tooltipDef does not exist, then use value from markDef or config\n            const markTooltip = getFirstDefined(markDef.tooltip, getMarkConfig('tooltip', markDef, config));\n            if (isString(markTooltip)) {\n                return { value: markTooltip };\n            }\n            else if (isObject(markTooltip)) {\n                // `tooltip` is `{fields: 'encodings' | 'fields'}`\n                if (markTooltip.content === 'encoding') {\n                    return ref.tooltipForEncoding(encoding, config);\n                }\n                else {\n                    return { signal: 'datum' };\n                }\n            }\n            return undefined;\n        });\n    }\n}\nexport function text(model, channel = 'text') {\n    const channelDef = model.encoding[channel];\n    return wrapCondition(model, channelDef, channel, cDef => ref.text(cDef, model.config));\n}\nexport function bandPosition(fieldDef, channel, model) {\n    const scaleName = model.scaleName(channel);\n    const sizeChannel = channel === 'x' ? 'width' : 'height';\n    if (model.encoding.size || model.markDef.size !== undefined) {\n        const orient = model.markDef.orient;\n        if (orient) {\n            const centeredBandPositionMixins = {\n                // Use xc/yc and place the mark at the middle of the band\n                // This way we never have to deal with size's condition for x/y position.\n                [channel + 'c']: ref.fieldRef(fieldDef, scaleName, {}, { band: 0.5 })\n            };\n            if (getTypedFieldDef(model.encoding.size)) {\n                return Object.assign({}, centeredBandPositionMixins, nonPosition('size', model, { vgChannel: sizeChannel }));\n            }\n            else if (isValueDef(model.encoding.size)) {\n                return Object.assign({}, centeredBandPositionMixins, nonPosition('size', model, { vgChannel: sizeChannel }));\n            }\n            else if (model.markDef.size !== undefined) {\n                return Object.assign({}, centeredBandPositionMixins, { [sizeChannel]: { value: model.markDef.size } });\n            }\n        }\n        else {\n            log.warn(log.message.cannotApplySizeToNonOrientedMark(model.markDef.type));\n        }\n    }\n    return {\n        [channel]: ref.fieldRef(fieldDef, scaleName, { binSuffix: 'range' }),\n        [sizeChannel]: ref.bandRef(scaleName)\n    };\n}\nexport function centeredBandPosition(channel, model, defaultPosRef, defaultSizeRef) {\n    const centerChannel = channel === 'x' ? 'xc' : 'yc';\n    const sizeChannel = channel === 'x' ? 'width' : 'height';\n    return Object.assign({}, pointPosition(channel, model, defaultPosRef, centerChannel), nonPosition('size', model, { defaultRef: defaultSizeRef, vgChannel: sizeChannel }));\n}\nexport function binPosition(fieldDef, fieldDef2, channel, scaleName, spacing, reverse) {\n    const binSpacing = {\n        x: reverse ? spacing : 0,\n        x2: reverse ? 0 : spacing,\n        y: reverse ? 0 : spacing,\n        y2: reverse ? spacing : 0\n    };\n    const channel2 = channel === X ? X2 : Y2;\n    if (isBinning(fieldDef.bin)) {\n        return {\n            [channel2]: ref.bin(fieldDef, scaleName, 'start', binSpacing[`${channel}2`]),\n            [channel]: ref.bin(fieldDef, scaleName, 'end', binSpacing[channel])\n        };\n    }\n    else if (isBinned(fieldDef.bin) && isFieldDef(fieldDef2)) {\n        return {\n            [channel2]: ref.fieldRef(fieldDef, scaleName, {}, { offset: binSpacing[`${channel}2`] }),\n            [channel]: ref.fieldRef(fieldDef2, scaleName, {}, { offset: binSpacing[channel] })\n        };\n    }\n    else {\n        log.warn(log.message.channelRequiredForBinned(channel2));\n        return undefined;\n    }\n}\n/**\n * Return mixins for point (non-band) position channels.\n */\nexport function pointPosition(channel, model, defaultRef, vgChannel) {\n    // TODO: refactor how refer to scale as discussed in https://github.com/vega/vega-lite/pull/1613\n    const { encoding, mark, stack } = model;\n    const channelDef = encoding[channel];\n    const channel2Def = encoding[channel === X ? X2 : Y2];\n    const scaleName = model.scaleName(channel);\n    const scale = model.getScaleComponent(channel);\n    const offset = ref.getOffset(channel, model.markDef);\n    const valueRef = !channelDef && (encoding.latitude || encoding.longitude)\n        ? // use geopoint output if there are lat/long and there is no point position overriding lat/long.\n            { field: model.getName(channel) }\n        : Object.assign({}, ref.position(channel, channelDef, channel2Def, scaleName, scale, stack, ref.getDefaultRef(defaultRef, channel, scaleName, scale, mark)), (offset ? { offset } : {}));\n    return {\n        [vgChannel || channel]: valueRef\n    };\n}\n/**\n * Return mixins for x2, y2.\n * If channel is not specified, return one channel based on orientation.\n */\nexport function pointPosition2(model, defaultRef, channel) {\n    const { encoding, mark, stack } = model;\n    const baseChannel = channel === 'x2' ? 'x' : 'y';\n    const channelDef = encoding[baseChannel];\n    const scaleName = model.scaleName(baseChannel);\n    const scale = model.getScaleComponent(baseChannel);\n    const offset = ref.getOffset(channel, model.markDef);\n    const valueRef = !channelDef && (encoding.latitude || encoding.longitude)\n        ? // use geopoint output if there are lat2/long2 and there is no point position2 overriding lat2/long2.\n            { field: model.getName(channel) }\n        : Object.assign({}, ref.position2(channel, channelDef, encoding[channel], scaleName, scale, stack, ref.getDefaultRef(defaultRef, baseChannel, scaleName, scale, mark)), (offset ? { offset } : {}));\n    return { [channel]: valueRef };\n}\n//# sourceMappingURL=mixins.js.map","import { keys } from '../util';\nimport { wrapCondition } from './mark/mixins';\nexport function guideEncodeEntry(encoding, model) {\n    return keys(encoding).reduce((encode, channel) => {\n        const valueDef = encoding[channel];\n        return Object.assign({}, encode, wrapCondition(model, valueDef, channel, (x) => ({ value: x.value })));\n    }, {});\n}\n//# sourceMappingURL=guide.js.map","import { POSITION_SCALE_CHANNELS } from '../channel';\nimport * as log from '../log';\nimport { contains } from '../util';\nimport { isConcatModel, isFacetModel, isLayerModel, isRepeatModel } from './model';\nexport function defaultScaleResolve(channel, model) {\n    if (isLayerModel(model) || isFacetModel(model)) {\n        return 'shared';\n    }\n    else if (isConcatModel(model) || isRepeatModel(model)) {\n        return contains(POSITION_SCALE_CHANNELS, channel) ? 'independent' : 'shared';\n    }\n    /* istanbul ignore next: should never reach here. */\n    throw new Error('invalid model type for resolve');\n}\nexport function parseGuideResolve(resolve, channel) {\n    const channelScaleResolve = resolve.scale[channel];\n    const guide = contains(POSITION_SCALE_CHANNELS, channel) ? 'axis' : 'legend';\n    if (channelScaleResolve === 'independent') {\n        if (resolve[guide][channel] === 'shared') {\n            log.warn(log.message.independentScaleMeansIndependentGuide(channel));\n        }\n        return 'independent';\n    }\n    return resolve[guide][channel] || 'shared';\n}\n//# sourceMappingURL=resolve.js.map","import * as log from '../log';\nimport { duplicate, getFirstDefined, keys, stringify } from '../util';\n/**\n * Generic class for storing properties that are explicitly specified\n * and implicitly determined by the compiler.\n * This is important for scale/axis/legend merging as\n * we want to prioritize properties that users explicitly specified.\n */\nexport class Split {\n    constructor(explicit = {}, implicit = {}) {\n        this.explicit = explicit;\n        this.implicit = implicit;\n    }\n    clone() {\n        return new Split(duplicate(this.explicit), duplicate(this.implicit));\n    }\n    combine() {\n        // FIXME remove \"as any\".\n        // Add \"as any\" to avoid an error \"Spread types may only be created from object types\".\n        return Object.assign({}, this.explicit, this.implicit);\n    }\n    get(key) {\n        // Explicit has higher precedence\n        return getFirstDefined(this.explicit[key], this.implicit[key]);\n    }\n    getWithExplicit(key) {\n        // Explicit has higher precedence\n        if (this.explicit[key] !== undefined) {\n            return { explicit: true, value: this.explicit[key] };\n        }\n        else if (this.implicit[key] !== undefined) {\n            return { explicit: false, value: this.implicit[key] };\n        }\n        return { explicit: false, value: undefined };\n    }\n    setWithExplicit(key, value) {\n        if (value.value !== undefined) {\n            this.set(key, value.value, value.explicit);\n        }\n    }\n    set(key, value, explicit) {\n        delete this[explicit ? 'implicit' : 'explicit'][key];\n        this[explicit ? 'explicit' : 'implicit'][key] = value;\n        return this;\n    }\n    copyKeyFromSplit(key, s) {\n        // Explicit has higher precedence\n        if (s.explicit[key] !== undefined) {\n            this.set(key, s.explicit[key], true);\n        }\n        else if (s.implicit[key] !== undefined) {\n            this.set(key, s.implicit[key], false);\n        }\n    }\n    copyKeyFromObject(key, s) {\n        // Explicit has higher precedence\n        if (s[key] !== undefined) {\n            this.set(key, s[key], true);\n        }\n    }\n    /**\n     * Merge split object into this split object. Properties from the other split\n     * overwrite properties from this split.\n     */\n    copyAll(other) {\n        for (const key of keys(other.combine())) {\n            const val = other.getWithExplicit(key);\n            this.setWithExplicit(key, val);\n        }\n    }\n}\nexport function makeExplicit(value) {\n    return {\n        explicit: true,\n        value\n    };\n}\nexport function makeImplicit(value) {\n    return {\n        explicit: false,\n        value\n    };\n}\nexport function tieBreakByComparing(compare) {\n    return (v1, v2, property, propertyOf) => {\n        const diff = compare(v1.value, v2.value);\n        if (diff > 0) {\n            return v1;\n        }\n        else if (diff < 0) {\n            return v2;\n        }\n        return defaultTieBreaker(v1, v2, property, propertyOf);\n    };\n}\nexport function defaultTieBreaker(v1, v2, property, propertyOf) {\n    if (v1.explicit && v2.explicit) {\n        log.warn(log.message.mergeConflictingProperty(property, propertyOf, v1.value, v2.value));\n    }\n    // If equal score, prefer v1.\n    return v1;\n}\nexport function mergeValuesWithExplicit(v1, v2, property, propertyOf, tieBreaker = defaultTieBreaker) {\n    if (v1 === undefined || v1.value === undefined) {\n        // For first run\n        return v2;\n    }\n    if (v1.explicit && !v2.explicit) {\n        return v1;\n    }\n    else if (v2.explicit && !v1.explicit) {\n        return v2;\n    }\n    else if (stringify(v1.value) === stringify(v2.value)) {\n        return v1;\n    }\n    else {\n        return tieBreaker(v1, v2, property, propertyOf);\n    }\n}\n//# sourceMappingURL=split.js.map","import { Split } from '../split';\nexport class LegendComponent extends Split {\n}\n//# sourceMappingURL=component.js.map","import { isColorChannel } from '../../channel';\nimport { valueArray } from '../../fielddef';\nimport { isContinuousToContinuous } from '../../scale';\nimport { contains, getFirstDefined } from '../../util';\nexport function values(legend, fieldDef) {\n    const vals = legend.values;\n    if (vals) {\n        return valueArray(fieldDef, vals);\n    }\n    return undefined;\n}\nexport function clipHeight(legendType) {\n    if (legendType === 'gradient') {\n        return 20;\n    }\n    return undefined;\n}\nexport function type(params) {\n    const { legend } = params;\n    return getFirstDefined(legend.type, defaultType(params));\n}\nexport function defaultType({ channel, timeUnit, scaleType, alwaysReturn }) {\n    // Following the logic in https://github.com/vega/vega-parser/blob/master/src/parsers/legend.js\n    if (isColorChannel(channel)) {\n        if (contains(['quarter', 'month', 'day'], timeUnit)) {\n            return 'symbol';\n        }\n        if (isContinuousToContinuous(scaleType)) {\n            return alwaysReturn ? 'gradient' : undefined;\n        }\n    }\n    return alwaysReturn ? 'symbol' : undefined;\n}\nexport function direction({ legend, legendConfig, timeUnit, channel, scaleType }) {\n    const orient = getFirstDefined(legend.orient, legendConfig.orient, 'right');\n    const legendType = type({ legend, channel, timeUnit, scaleType, alwaysReturn: true });\n    return getFirstDefined(legend.direction, legendConfig[legendType ? 'gradientDirection' : 'symbolDirection'], defaultDirection(orient, legendType));\n}\nfunction defaultDirection(orient, legendType) {\n    switch (orient) {\n        case 'top':\n        case 'bottom':\n            return 'horizontal';\n        case 'left':\n        case 'right':\n        case 'none':\n        case undefined: // undefined = \"right\" in Vega\n            return undefined; // vertical is Vega's default\n        default:\n            // top-left / ...\n            // For inner legend, uses compact layout like Tableau\n            return legendType === 'gradient' ? 'horizontal' : undefined;\n    }\n}\nexport function defaultGradientLength({ legend, legendConfig, model, channel, scaleType }) {\n    const { gradientHorizontalMaxLength, gradientHorizontalMinLength, gradientVerticalMaxLength, gradientVerticalMinLength } = legendConfig;\n    const dir = direction({ legend, legendConfig, channel, scaleType });\n    if (dir === 'horizontal') {\n        const orient = getFirstDefined(legend.orient, legendConfig.orient);\n        if (orient === 'top' || orient === 'bottom') {\n            return gradientLengthSignal(model, 'width', gradientHorizontalMinLength, gradientHorizontalMaxLength);\n        }\n        else {\n            return gradientHorizontalMinLength;\n        }\n    }\n    else {\n        // vertical / undefined (Vega uses vertical by default)\n        return gradientLengthSignal(model, 'height', gradientVerticalMinLength, gradientVerticalMaxLength);\n    }\n}\nfunction gradientLengthSignal(model, sizeType, min, max) {\n    const sizeSignal = model.getSizeSignalRef(sizeType).signal;\n    return { signal: `clamp(${sizeSignal}, ${min}, ${max})` };\n}\nexport function defaultLabelOverlap(scaleType) {\n    if (contains(['quantile', 'threshold', 'log'], scaleType)) {\n        return 'greedy';\n    }\n    return undefined;\n}\n//# sourceMappingURL=properties.js.map","import { isArray } from 'vega-util';\nimport { COLOR, OPACITY, SHAPE } from '../../channel';\nimport { hasConditionalValueDef, isTimeFieldDef, isValueDef } from '../../fielddef';\nimport { AREA, BAR, CIRCLE, FILL_STROKE_CONFIG, GEOSHAPE, LINE, POINT, SQUARE, TEXT, TICK } from '../../mark';\nimport { ScaleType } from '../../scale';\nimport { getFirstDefined, keys } from '../../util';\nimport { applyMarkConfig, timeFormatExpression } from '../common';\nimport * as mixins from '../mark/mixins';\nimport { defaultType } from './properties';\nfunction type(legendCmp, model, channel) {\n    const scaleType = model.getScaleComponent(channel).get('type');\n    return getFirstDefined(legendCmp.get('type'), defaultType({ channel, scaleType, alwaysReturn: true }));\n}\nexport function symbols(fieldDef, symbolsSpec, model, channel, legendCmp) {\n    if (type(legendCmp, model, channel) !== 'symbol') {\n        return undefined;\n    }\n    let out = Object.assign({}, applyMarkConfig({}, model, FILL_STROKE_CONFIG), mixins.color(model)); // FIXME: remove this when VgEncodeEntry is compatible with SymbolEncodeEntry\n    switch (model.mark) {\n        case BAR:\n        case TICK:\n        case TEXT:\n            out.shape = { value: 'square' };\n            break;\n        case CIRCLE:\n        case SQUARE:\n            out.shape = { value: model.mark };\n            break;\n        case POINT:\n        case LINE:\n        case GEOSHAPE:\n        case AREA:\n            // use default circle\n            break;\n    }\n    const { markDef, encoding } = model;\n    const filled = markDef.filled;\n    const opacity = getMaxValue(encoding.opacity) || markDef.opacity;\n    if (out.fill) {\n        // for fill legend, we don't want any fill in symbol\n        if (channel === 'fill' || (filled && channel === COLOR)) {\n            delete out.fill;\n        }\n        else {\n            if (out.fill['field']) {\n                // For others, set fill to some opaque value (or nothing if a color is already set)\n                if (legendCmp.get('symbolFillColor')) {\n                    delete out.fill;\n                }\n                else {\n                    out.fill = { value: 'black' };\n                    out.fillOpacity = { value: opacity || 1 };\n                }\n            }\n            else if (isArray(out.fill)) {\n                const fill = getFirstConditionValue(encoding.fill || encoding.color) ||\n                    markDef.fill ||\n                    (filled && markDef.color);\n                if (fill) {\n                    out.fill = { value: fill };\n                }\n            }\n        }\n    }\n    if (out.stroke) {\n        if (channel === 'stroke' || (!filled && channel === COLOR)) {\n            delete out.stroke;\n        }\n        else {\n            if (out.stroke['field']) {\n                // For others, remove stroke field\n                delete out.stroke;\n            }\n            else if (isArray(out.stroke)) {\n                const stroke = getFirstDefined(getFirstConditionValue(encoding.stroke || encoding.color), markDef.stroke, filled ? markDef.color : undefined);\n                if (stroke) {\n                    out.stroke = { value: stroke };\n                }\n            }\n        }\n    }\n    if (channel !== SHAPE) {\n        const shape = getFirstConditionValue(encoding.shape) || markDef.shape;\n        if (shape) {\n            out.shape = { value: shape };\n        }\n    }\n    if (channel !== OPACITY) {\n        if (opacity) {\n            // only apply opacity if it is neither zero or undefined\n            out.opacity = { value: opacity };\n        }\n    }\n    out = Object.assign({}, out, symbolsSpec);\n    return keys(out).length > 0 ? out : undefined;\n}\nexport function gradient(fieldDef, gradientSpec, model, channel, legendCmp) {\n    if (type(legendCmp, model, channel) !== 'gradient') {\n        return undefined;\n    }\n    let out = {};\n    const opacity = getMaxValue(model.encoding.opacity) || model.markDef.opacity;\n    if (opacity) {\n        // only apply opacity if it is neither zero or undefined\n        out.opacity = { value: opacity };\n    }\n    out = Object.assign({}, out, gradientSpec);\n    return keys(out).length > 0 ? out : undefined;\n}\nexport function labels(fieldDef, labelsSpec, model, channel, legendCmp) {\n    const legend = model.legend(channel);\n    const config = model.config;\n    let out = {};\n    if (isTimeFieldDef(fieldDef)) {\n        const isUTCScale = model.getScaleComponent(channel).get('type') === ScaleType.UTC;\n        const expr = timeFormatExpression('datum.value', fieldDef.timeUnit, legend.format, config.legend.shortTimeLabels, config.timeFormat, isUTCScale);\n        labelsSpec = Object.assign({}, (expr ? { text: { signal: expr } } : {}), labelsSpec);\n    }\n    out = Object.assign({}, out, labelsSpec);\n    return keys(out).length > 0 ? out : undefined;\n}\nfunction getMaxValue(channelDef) {\n    return getConditionValue(channelDef, (v, conditionalDef) => Math.max(v, conditionalDef.value));\n}\nfunction getFirstConditionValue(channelDef) {\n    return getConditionValue(channelDef, (v, conditionalDef) => {\n        return getFirstDefined(v, conditionalDef.value);\n    });\n}\nfunction getConditionValue(channelDef, reducer) {\n    if (hasConditionalValueDef(channelDef)) {\n        return (isArray(channelDef.condition) ? channelDef.condition : [channelDef.condition]).reduce(reducer, channelDef.value);\n    }\n    else if (isValueDef(channelDef)) {\n        return channelDef.value;\n    }\n    return undefined;\n}\n//# sourceMappingURL=encode.js.map","import { COLOR, FILL, FILLOPACITY, OPACITY, SHAPE, SIZE, STROKE, STROKEOPACITY, STROKEWIDTH } from '../../channel';\nimport { getTypedFieldDef, isFieldDef, title as fieldDefTitle } from '../../fielddef';\nimport { LEGEND_PROPERTIES, VG_LEGEND_PROPERTIES } from '../../legend';\nimport { GEOJSON } from '../../type';\nimport { deleteNestedProperty, getFirstDefined, keys } from '../../util';\nimport { mergeTitleComponent, numberFormat } from '../common';\nimport { guideEncodeEntry } from '../guide';\nimport { isUnitModel } from '../model';\nimport { parseGuideResolve } from '../resolve';\nimport { defaultTieBreaker, makeImplicit, mergeValuesWithExplicit } from '../split';\nimport { LegendComponent } from './component';\nimport * as encode from './encode';\nimport * as properties from './properties';\nimport { direction, type } from './properties';\nexport function parseLegend(model) {\n    if (isUnitModel(model)) {\n        model.component.legends = parseUnitLegend(model);\n    }\n    else {\n        model.component.legends = parseNonUnitLegend(model);\n    }\n}\nfunction parseUnitLegend(model) {\n    const { encoding } = model;\n    return [COLOR, FILL, STROKE, STROKEWIDTH, SIZE, SHAPE, OPACITY, FILLOPACITY, STROKEOPACITY].reduce((legendComponent, channel) => {\n        const def = encoding[channel];\n        if (model.legend(channel) &&\n            model.getScaleComponent(channel) &&\n            !(isFieldDef(def) && (channel === SHAPE && def.type === GEOJSON))) {\n            legendComponent[channel] = parseLegendForChannel(model, channel);\n        }\n        return legendComponent;\n    }, {});\n}\nfunction getLegendDefWithScale(model, channel) {\n    const scale = model.scaleName(COLOR);\n    if (channel === 'color') {\n        return model.markDef.filled ? { fill: scale } : { stroke: scale };\n    }\n    return { [channel]: model.scaleName(channel) };\n}\nfunction isExplicit(value, property, legend, fieldDef) {\n    switch (property) {\n        case 'values':\n            // specified legend.values is already respected, but may get transformed.\n            return !!legend.values;\n        case 'title':\n            // title can be explicit if fieldDef.title is set\n            if (property === 'title' && value === fieldDef.title) {\n                return true;\n            }\n    }\n    // Otherwise, things are explicit if the returned value matches the specified property\n    return value === legend[property];\n}\nexport function parseLegendForChannel(model, channel) {\n    const fieldDef = model.fieldDef(channel);\n    const legend = model.legend(channel);\n    const legendCmpt = new LegendComponent({}, getLegendDefWithScale(model, channel));\n    for (const property of LEGEND_PROPERTIES) {\n        const value = getProperty(property, legend, channel, model);\n        if (value !== undefined) {\n            const explicit = isExplicit(value, property, legend, fieldDef);\n            if (explicit || model.config.legend[property] === undefined) {\n                legendCmpt.set(property, value, explicit);\n            }\n        }\n    }\n    const legendEncoding = legend.encoding || {};\n    const legendEncode = ['labels', 'legend', 'title', 'symbols', 'gradient'].reduce((e, part) => {\n        const legendEncodingPart = guideEncodeEntry(legendEncoding[part] || {}, model);\n        const value = encode[part]\n            ? encode[part](fieldDef, legendEncodingPart, model, channel, legendCmpt) // apply rule\n            : legendEncodingPart; // no rule -- just default values\n        if (value !== undefined && keys(value).length > 0) {\n            e[part] = { update: value };\n        }\n        return e;\n    }, {});\n    if (keys(legendEncode).length > 0) {\n        legendCmpt.set('encode', legendEncode, !!legend.encoding);\n    }\n    return legendCmpt;\n}\nfunction getProperty(property, legend, channel, model) {\n    const { encoding } = model;\n    const fieldDef = getTypedFieldDef(encoding[channel]);\n    const legendConfig = model.config.legend;\n    const { timeUnit } = fieldDef;\n    const scaleType = model.getScaleComponent(channel).get('type');\n    switch (property) {\n        case 'format':\n            // We don't include temporal field here as we apply format in encode block\n            return numberFormat(fieldDef, legend.format, model.config);\n        case 'title':\n            return fieldDefTitle(fieldDef, model.config, { allowDisabling: true }) || undefined;\n        case 'type':\n            return type({ legend, channel, timeUnit, scaleType, alwaysReturn: false });\n        case 'direction':\n            return direction({ legend, legendConfig, timeUnit, channel, scaleType });\n        // TODO: enable when https://github.com/vega/vega/issues/1351 is fixed\n        // case 'clipHeight':\n        //   return getFirstDefined(specifiedLegend.clipHeight, properties.clipHeight(properties.type(...)));\n        case 'labelOverlap':\n            return getFirstDefined(legend.labelOverlap, properties.defaultLabelOverlap(scaleType));\n        case 'gradientLength':\n            return getFirstDefined(\n            // do specified gradientLength first\n            legend.gradientLength, legendConfig.gradientLength, \n            // Otherwise, use smart default based on plot height\n            properties.defaultGradientLength({\n                model,\n                legend,\n                legendConfig,\n                channel,\n                scaleType\n            }));\n        case 'values':\n            return properties.values(legend, fieldDef);\n    }\n    // Otherwise, return specified property.\n    return legend[property];\n}\nfunction parseNonUnitLegend(model) {\n    const { legends, resolve } = model.component;\n    for (const child of model.children) {\n        parseLegend(child);\n        keys(child.component.legends).forEach((channel) => {\n            resolve.legend[channel] = parseGuideResolve(model.component.resolve, channel);\n            if (resolve.legend[channel] === 'shared') {\n                // If the resolve says shared (and has not been overridden)\n                // We will try to merge and see if there is a conflict\n                legends[channel] = mergeLegendComponent(legends[channel], child.component.legends[channel]);\n                if (!legends[channel]) {\n                    // If merge returns nothing, there is a conflict so we cannot make the legend shared.\n                    // Thus, mark legend as independent and remove the legend component.\n                    resolve.legend[channel] = 'independent';\n                    delete legends[channel];\n                }\n            }\n        });\n    }\n    keys(legends).forEach((channel) => {\n        for (const child of model.children) {\n            if (!child.component.legends[channel]) {\n                // skip if the child does not have a particular legend\n                continue;\n            }\n            if (resolve.legend[channel] === 'shared') {\n                // After merging shared legend, make sure to remove legend from child\n                delete child.component.legends[channel];\n            }\n        }\n    });\n    return legends;\n}\nexport function mergeLegendComponent(mergedLegend, childLegend) {\n    if (!mergedLegend) {\n        return childLegend.clone();\n    }\n    const mergedOrient = mergedLegend.getWithExplicit('orient');\n    const childOrient = childLegend.getWithExplicit('orient');\n    if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {\n        // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)\n        // Cannot merge due to inconsistent orient\n        return undefined;\n    }\n    let typeMerged = false;\n    // Otherwise, let's merge\n    for (const prop of VG_LEGEND_PROPERTIES) {\n        const mergedValueWithExplicit = mergeValuesWithExplicit(mergedLegend.getWithExplicit(prop), childLegend.getWithExplicit(prop), prop, 'legend', \n        // Tie breaker function\n        (v1, v2) => {\n            switch (prop) {\n                case 'title':\n                    return mergeTitleComponent(v1, v2);\n                case 'type':\n                    // There are only two types. If we have different types, then prefer symbol over gradient.\n                    typeMerged = true;\n                    return makeImplicit('symbol');\n            }\n            return defaultTieBreaker(v1, v2, prop, 'legend');\n        });\n        mergedLegend.setWithExplicit(prop, mergedValueWithExplicit);\n    }\n    if (typeMerged) {\n        if (((mergedLegend.implicit || {}).encode || {}).gradient) {\n            deleteNestedProperty(mergedLegend.implicit, ['encode', 'gradient']);\n        }\n        if (((mergedLegend.explicit || {}).encode || {}).gradient) {\n            deleteNestedProperty(mergedLegend.explicit, ['encode', 'gradient']);\n        }\n    }\n    return mergedLegend;\n}\n//# sourceMappingURL=parse.js.map","import { flatten, keys, stringify, vals } from '../../util';\nimport { mergeLegendComponent } from './parse';\nexport function assembleLegends(model) {\n    const legendComponentIndex = model.component.legends;\n    const legendByDomain = {};\n    for (const channel of keys(legendComponentIndex)) {\n        const scaleComponent = model.getScaleComponent(channel);\n        const domainHash = stringify(scaleComponent.domains);\n        if (legendByDomain[domainHash]) {\n            for (const mergedLegendComponent of legendByDomain[domainHash]) {\n                const merged = mergeLegendComponent(mergedLegendComponent, legendComponentIndex[channel]);\n                if (!merged) {\n                    // If cannot merge, need to add this legend separately\n                    legendByDomain[domainHash].push(legendComponentIndex[channel]);\n                }\n            }\n        }\n        else {\n            legendByDomain[domainHash] = [legendComponentIndex[channel].clone()];\n        }\n    }\n    return flatten(vals(legendByDomain)).map((legendCmpt) => {\n        const legend = legendCmpt.combine();\n        // For non color channel's legend, we need to override symbol stroke config from Vega config\n        if (legend.encode && legend.encode.symbols) {\n            const out = legend.encode.symbols.update;\n            if (out.fill && out.fill['value'] !== 'transparent' && !out.stroke && !legend.stroke) {\n                // For non color channel's legend, we need to override symbol stroke config from Vega config if stroke channel is not used.\n                out.stroke = { value: 'transparent' };\n            }\n        }\n        return legend;\n    });\n}\n//# sourceMappingURL=assemble.js.map","import * as tslib_1 from \"tslib\";\nimport { contains } from '../../util';\nimport { isSignalRef } from '../../vega.schema';\nimport { isConcatModel, isLayerModel, isRepeatModel } from '../model';\nexport function assembleProjections(model) {\n    if (isLayerModel(model) || isConcatModel(model) || isRepeatModel(model)) {\n        return assembleProjectionsForModelAndChildren(model);\n    }\n    else {\n        return assembleProjectionForModel(model);\n    }\n}\nexport function assembleProjectionsForModelAndChildren(model) {\n    return model.children.reduce((projections, child) => {\n        return projections.concat(child.assembleProjections());\n    }, assembleProjectionForModel(model));\n}\nexport function assembleProjectionForModel(model) {\n    const component = model.component.projection;\n    if (!component || component.merged) {\n        return [];\n    }\n    const projection = component.combine();\n    const { name } = projection, rest = tslib_1.__rest(projection, [\"name\"]); // we need to extract name so that it is always present in the output and pass TS type validation\n    const size = {\n        signal: `[${component.size.map(ref => ref.signal).join(', ')}]`\n    };\n    const fit = component.data.reduce((sources, data) => {\n        const source = isSignalRef(data) ? data.signal : `data('${model.lookupDataSource(data)}')`;\n        if (!contains(sources, source)) {\n            // build a unique list of sources\n            sources.push(source);\n        }\n        return sources;\n    }, []);\n    if (fit.length <= 0) {\n        throw new Error(\"Projection's fit didn't find any data sources\");\n    }\n    return [\n        Object.assign({ name,\n            size, fit: {\n                signal: fit.length > 1 ? `[${fit.join(', ')}]` : fit[0]\n            } }, rest)\n    ];\n}\n//# sourceMappingURL=assemble.js.map","export const PROJECTION_PROPERTIES = [\n    'type',\n    'clipAngle',\n    'clipExtent',\n    'center',\n    'rotate',\n    'precision',\n    'coefficient',\n    'distance',\n    'fraction',\n    'lobes',\n    'parallel',\n    'radius',\n    'ratio',\n    'spacing',\n    'tilt'\n];\n//# sourceMappingURL=projection.js.map","import { Split } from '../split';\nexport class ProjectionComponent extends Split {\n    constructor(name, specifiedProjection, size, data) {\n        super(Object.assign({}, specifiedProjection), // all explicit properties of projection\n        { name } // name as initial implicit property\n        );\n        this.specifiedProjection = specifiedProjection;\n        this.size = size;\n        this.data = data;\n        this.merged = false;\n    }\n}\n//# sourceMappingURL=component.js.map","import { LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, SHAPE } from '../../channel';\nimport { MAIN } from '../../data';\nimport { PROJECTION_PROPERTIES } from '../../projection';\nimport { GEOJSON } from '../../type';\nimport { duplicate, every, stringify } from '../../util';\nimport { isUnitModel } from '../model';\nimport { ProjectionComponent } from './component';\nexport function parseProjection(model) {\n    if (isUnitModel(model)) {\n        model.component.projection = parseUnitProjection(model);\n    }\n    else {\n        // because parse happens from leaves up (unit specs before layer spec),\n        // we can be sure that the above if statement has already occurred\n        // and therefore we have access to child.component.projection\n        // for each of model's children\n        model.component.projection = parseNonUnitProjections(model);\n    }\n}\nfunction parseUnitProjection(model) {\n    const { specifiedProjection, config, hasProjection } = model;\n    if (hasProjection) {\n        const data = [];\n        [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]].forEach(posssiblePair => {\n            if (model.channelHasField(posssiblePair[0]) || model.channelHasField(posssiblePair[1])) {\n                data.push({\n                    signal: model.getName(`geojson_${data.length}`)\n                });\n            }\n        });\n        if (model.channelHasField(SHAPE) && model.fieldDef(SHAPE).type === GEOJSON) {\n            data.push({\n                signal: model.getName(`geojson_${data.length}`)\n            });\n        }\n        if (data.length === 0) {\n            // main source is geojson, so we can just use that\n            data.push(model.requestDataName(MAIN));\n        }\n        return new ProjectionComponent(model.projectionName(true), Object.assign({}, (config.projection || {}), (specifiedProjection || {})), [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')], data);\n    }\n    return undefined;\n}\nfunction mergeIfNoConflict(first, second) {\n    const allPropertiesShared = every(PROJECTION_PROPERTIES, prop => {\n        // neither has the property\n        if (!first.explicit.hasOwnProperty(prop) && !second.explicit.hasOwnProperty(prop)) {\n            return true;\n        }\n        // both have property and an equal value for property\n        if (first.explicit.hasOwnProperty(prop) &&\n            second.explicit.hasOwnProperty(prop) &&\n            // some properties might be signals or objects and require hashing for comparison\n            stringify(first.get(prop)) === stringify(second.get(prop))) {\n            return true;\n        }\n        return false;\n    });\n    const size = stringify(first.size) === stringify(second.size);\n    if (size) {\n        if (allPropertiesShared) {\n            return first;\n        }\n        else if (stringify(first.explicit) === stringify({})) {\n            return second;\n        }\n        else if (stringify(second.explicit) === stringify({})) {\n            return first;\n        }\n    }\n    // if all properties don't match, let each unit spec have its own projection\n    return null;\n}\nfunction parseNonUnitProjections(model) {\n    if (model.children.length === 0) {\n        return undefined;\n    }\n    let nonUnitProjection;\n    const mergable = every(model.children, child => {\n        parseProjection(child);\n        const projection = child.component.projection;\n        if (!projection) {\n            // child layer does not use a projection\n            return true;\n        }\n        else if (!nonUnitProjection) {\n            // cached 'projection' is null, cache this one\n            nonUnitProjection = projection;\n            return true;\n        }\n        else {\n            const merge = mergeIfNoConflict(nonUnitProjection, projection);\n            if (merge) {\n                nonUnitProjection = merge;\n            }\n            return !!merge;\n        }\n    });\n    // it cached one and all other children share the same projection,\n    if (nonUnitProjection && mergable) {\n        // so we can elevate it to the layer level\n        const name = model.projectionName(true);\n        const modelProjection = new ProjectionComponent(name, nonUnitProjection.specifiedProjection, nonUnitProjection.size, duplicate(nonUnitProjection.data));\n        // rename and assign all others as merged\n        model.children.forEach(child => {\n            if (child.component.projection) {\n                modelProjection.data.push(...child.component.projection.data);\n                child.renameProjection(child.component.projection.get('name'), name);\n                child.component.projection.merged = true;\n            }\n        });\n        return modelProjection;\n    }\n    return undefined;\n}\n//# sourceMappingURL=parse.js.map","import { entries, uniqueId } from './../../util';\n/**\n * Print debug information for dataflow tree.\n */\nexport function debug(node) {\n    console.log(`${node.constructor.name}${node.debugName ? `(${node.debugName})` : ''} -> ${node.children.map(c => {\n        return `${c.constructor.name}${c.debugName ? ` (${c.debugName})` : ''}`;\n    })}`);\n    console.log(node);\n    node.children.forEach(debug);\n}\n/**\n * Print the dataflow tree as graphviz.\n *\n * Render the output in http://viz-js.com/.\n */\nexport function draw(roots) {\n    // check the graph before printing it since the logic below assumes a consistent graph\n    checkLinks(roots);\n    const nodes = {};\n    const edges = [];\n    function getId(node) {\n        let id = node['__uniqueid'];\n        if (id === undefined) {\n            id = uniqueId();\n            node['__uniqueid'] = id;\n        }\n        return id;\n    }\n    function getLabel(node) {\n        const out = [node.constructor.name.slice(0, -4)];\n        if (node.debugName) {\n            out.push(`<i>${node.debugName}</i>`);\n        }\n        const dep = node.dependentFields();\n        if (dep.size) {\n            out.push(`<font color=\"grey\" point-size=\"10\">IN:</font> ${[...node.dependentFields()].join(', ')}`);\n        }\n        const prod = node.producedFields();\n        if (prod.size) {\n            out.push(`<font color=\"grey\" point-size=\"10\">OUT:</font> ${[...node.producedFields()].join(', ')}`);\n        }\n        return out.join('<br/>');\n    }\n    function collector(node) {\n        const id = getId(node);\n        nodes[id] = {\n            id: id,\n            label: getLabel(node),\n            hash: String(node.hash()).replace(/\"/g, '')\n        };\n        for (const child of node.children) {\n            edges.push([id, getId(child)]);\n            collector(child);\n        }\n    }\n    roots.forEach(n => collector(n));\n    const dot = `digraph DataFlow {\n  rankdir = TB;\n  node [shape=record]\n  ${entries(nodes)\n        .map(({ key, value }) => `  \"${key}\" [\n    label = <${value.label}>;\n    tooltip = \"[${value.id}]&#010;${value.hash}\"\n  ]`)\n        .join('\\n')}\n\n  ${edges.map(([source, target]) => `\"${source}\" -> \"${target}\"`).join(' ')}\n}`;\n    console.log(dot);\n    return dot;\n}\n/**\n * Iterates over a dataflow graph and checks whether all links are consistent.\n */\nexport function checkLinks(nodes) {\n    for (const node of nodes) {\n        for (const child of node.children) {\n            if (child.parent !== node) {\n                console.error('Dataflow graph is inconsistent.', parent, child);\n                return false;\n            }\n        }\n        if (!checkLinks(node.children)) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=debug.js.map","import { isInlineData, isNamedData, isUrlData } from '../../data';\nimport { contains, keys, omit } from '../../util';\nimport { DataFlowNode } from './dataflow';\nexport class SourceNode extends DataFlowNode {\n    constructor(data) {\n        super(null); // source cannot have parent\n        data = data || { name: 'source' };\n        const format = data.format ? Object.assign({}, omit(data.format, ['parse'])) : {};\n        if (isInlineData(data)) {\n            this._data = { values: data.values };\n        }\n        else if (isUrlData(data)) {\n            this._data = { url: data.url };\n            if (!format.type) {\n                // Extract extension from URL using snippet from\n                // http://stackoverflow.com/questions/680929/how-to-extract-extension-from-filename-string-in-javascript\n                let defaultExtension = /(?:\\.([^.]+))?$/.exec(data.url)[1];\n                if (!contains(['json', 'csv', 'tsv', 'dsv', 'topojson'], defaultExtension)) {\n                    defaultExtension = 'json';\n                }\n                // defaultExtension has type string but we ensure that it is DataFormatType above\n                format.type = defaultExtension;\n            }\n        }\n        else if (isNamedData(data)) {\n            this._data = {};\n        }\n        // any dataset can be named\n        if (data.name) {\n            this._name = data.name;\n        }\n        if (format && keys(format).length > 0) {\n            this._data.format = format;\n        }\n    }\n    get data() {\n        return this._data;\n    }\n    hasName() {\n        return !!this._name;\n    }\n    get dataName() {\n        return this._name;\n    }\n    set dataName(name) {\n        this._name = name;\n    }\n    set parent(parent) {\n        throw new Error('Source nodes have to be roots.');\n    }\n    remove() {\n        throw new Error('Source nodes are roots and cannot be removed.');\n    }\n    hash() {\n        throw new Error('Cannot hash sources');\n    }\n    assemble() {\n        return Object.assign({ name: this._name }, this._data, { transform: [] });\n    }\n}\n//# sourceMappingURL=source.js.map","import { SourceNode } from './source';\n/**\n * Abstract base class for BottomUpOptimizer and TopDownOptimizer.\n * Contains only mutation handling logic. Subclasses need to implement iteration logic.\n */\nclass OptimizerBase {\n    constructor() {\n        this._mutated = false;\n    }\n    // Once true, _mutated is never set to false\n    setMutated() {\n        this._mutated = true;\n    }\n    get mutatedFlag() {\n        return this._mutated;\n    }\n}\n/**\n * Starts from a node and runs the optimization function(the \"run\" method) upwards to the root,\n * depending on the continueFlag and mutatedFlag values returned by the optimization function.\n */\nexport class BottomUpOptimizer extends OptimizerBase {\n    constructor() {\n        super();\n        this._continue = false;\n    }\n    setContinue() {\n        this._continue = true;\n    }\n    get continueFlag() {\n        return this._continue;\n    }\n    get flags() {\n        return { continueFlag: this.continueFlag, mutatedFlag: this.mutatedFlag };\n    }\n    set flags({ continueFlag, mutatedFlag }) {\n        if (continueFlag) {\n            this.setContinue();\n        }\n        if (mutatedFlag) {\n            this.setMutated();\n        }\n    }\n    optimizeNextFromLeaves(node) {\n        if (node instanceof SourceNode) {\n            return false;\n        }\n        const next = node.parent;\n        const { continueFlag } = this.run(node);\n        if (continueFlag) {\n            this.optimizeNextFromLeaves(next);\n        }\n        return this.mutatedFlag;\n    }\n}\n/**\n * The optimizer function( the \"run\" method), is invoked on the given node and then continues recursively.\n */\nexport class TopDownOptimizer extends OptimizerBase {\n}\n//# sourceMappingURL=optimizer.js.map","import { isBinning } from '../../bin';\nimport { isScaleChannel } from '../../channel';\nimport { binRequiresRange, isTypedFieldDef, vgField } from '../../fielddef';\nimport * as log from '../../log';\nimport { duplicate, hash, keys, replacePathInField, setEqual } from '../../util';\nimport { DataFlowNode } from './dataflow';\nfunction addDimension(dims, channel, fieldDef) {\n    if (isTypedFieldDef(fieldDef) && isBinning(fieldDef.bin)) {\n        dims.add(vgField(fieldDef, {}));\n        dims.add(vgField(fieldDef, { binSuffix: 'end' }));\n        if (binRequiresRange(fieldDef, channel)) {\n            dims.add(vgField(fieldDef, { binSuffix: 'range' }));\n        }\n    }\n    else {\n        dims.add(vgField(fieldDef));\n    }\n    return dims;\n}\nfunction mergeMeasures(parentMeasures, childMeasures) {\n    for (const field of keys(childMeasures)) {\n        // when we merge a measure, we either have to add an aggregation operator or even a new field\n        const ops = childMeasures[field];\n        for (const op of keys(ops)) {\n            if (field in parentMeasures) {\n                // add operator to existing measure field\n                parentMeasures[field][op] = new Set([...(parentMeasures[field][op] || []), ...ops[op]]);\n            }\n            else {\n                parentMeasures[field] = { [op]: ops[op] };\n            }\n        }\n    }\n}\nexport class AggregateNode extends DataFlowNode {\n    /**\n     * @param dimensions string set for dimensions\n     * @param measures dictionary mapping field name => dict of aggregation functions and names to use\n     */\n    constructor(parent, dimensions, measures) {\n        super(parent);\n        this.dimensions = dimensions;\n        this.measures = measures;\n    }\n    clone() {\n        return new AggregateNode(null, new Set(this.dimensions), duplicate(this.measures));\n    }\n    get groupBy() {\n        return this.dimensions;\n    }\n    static makeFromEncoding(parent, model) {\n        let isAggregate = false;\n        model.forEachFieldDef(fd => {\n            if (fd.aggregate) {\n                isAggregate = true;\n            }\n        });\n        const meas = {};\n        const dims = new Set();\n        if (!isAggregate) {\n            // no need to create this node if the model has no aggregation\n            return null;\n        }\n        model.forEachFieldDef((fieldDef, channel) => {\n            const { aggregate, field } = fieldDef;\n            if (aggregate) {\n                if (aggregate === 'count') {\n                    meas['*'] = meas['*'] || {};\n                    meas['*']['count'] = new Set([vgField(fieldDef, { forAs: true })]);\n                }\n                else {\n                    meas[field] = meas[field] || {};\n                    meas[field][aggregate] = new Set([vgField(fieldDef, { forAs: true })]);\n                    // For scale channel with domain === 'unaggregated', add min/max so we can use their union as unaggregated domain\n                    if (isScaleChannel(channel) && model.scaleDomain(channel) === 'unaggregated') {\n                        meas[field]['min'] = new Set([vgField({ field, aggregate: 'min' }, { forAs: true })]);\n                        meas[field]['max'] = new Set([vgField({ field, aggregate: 'max' }, { forAs: true })]);\n                    }\n                }\n            }\n            else {\n                addDimension(dims, channel, fieldDef);\n            }\n        });\n        if (dims.size + keys(meas).length === 0) {\n            return null;\n        }\n        return new AggregateNode(parent, dims, meas);\n    }\n    static makeFromTransform(parent, t) {\n        const dims = new Set();\n        const meas = {};\n        for (const s of t.aggregate) {\n            const { op, field, as } = s;\n            if (op) {\n                if (op === 'count') {\n                    meas['*'] = meas['*'] || {};\n                    meas['*']['count'] = new Set([as ? as : vgField(s, { forAs: true })]);\n                }\n                else {\n                    meas[field] = meas[field] || {};\n                    meas[field][op] = new Set([as ? as : vgField(s, { forAs: true })]);\n                }\n            }\n        }\n        for (const s of t.groupby || []) {\n            dims.add(s);\n        }\n        if (dims.size + keys(meas).length === 0) {\n            return null;\n        }\n        return new AggregateNode(parent, dims, meas);\n    }\n    merge(other) {\n        if (setEqual(this.dimensions, other.dimensions)) {\n            mergeMeasures(this.measures, other.measures);\n            return true;\n        }\n        else {\n            log.debug('different dimensions, cannot merge');\n            return false;\n        }\n    }\n    addDimensions(fields) {\n        fields.forEach(this.dimensions.add, this.dimensions);\n    }\n    dependentFields() {\n        return new Set([...this.dimensions, ...keys(this.measures)]);\n    }\n    producedFields() {\n        const out = new Set();\n        for (const field of keys(this.measures)) {\n            for (const op of keys(this.measures[field])) {\n                const m = this.measures[field][op];\n                if (m.size === 0) {\n                    out.add(`${op}_${field}`);\n                }\n                else {\n                    m.forEach(out.add, out);\n                }\n            }\n        }\n        return out;\n    }\n    hash() {\n        return `Aggregate ${hash({ dimensions: this.dimensions, measures: this.measures })}`;\n    }\n    assemble() {\n        const ops = [];\n        const fields = [];\n        const as = [];\n        for (const field of keys(this.measures)) {\n            for (const op of keys(this.measures[field])) {\n                for (const alias of this.measures[field][op]) {\n                    as.push(alias);\n                    ops.push(op);\n                    fields.push(field === '*' ? null : replacePathInField(field));\n                }\n            }\n        }\n        const result = {\n            type: 'aggregate',\n            groupby: [...this.dimensions],\n            ops,\n            fields,\n            as\n        };\n        return result;\n    }\n}\n//# sourceMappingURL=aggregate.js.map","import { isArray } from 'vega-util';\nimport { isBinning } from '../../bin';\nimport { COLUMN, ROW } from '../../channel';\nimport { vgField } from '../../fielddef';\nimport * as log from '../../log';\nimport { hasDiscreteDomain } from '../../scale';\nimport { DEFAULT_SORT_OP, isSortField } from '../../sort';\nimport { hash } from '../../util';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { assembleDomain, getFieldFromDomain } from '../scale/domain';\nimport { sortArrayIndexField } from './calculate';\nimport { DataFlowNode } from './dataflow';\n/**\n * A node that helps us track what fields we are faceting by.\n */\nexport class FacetNode extends DataFlowNode {\n    /**\n     * @param model The facet model.\n     * @param name The name that this facet source will have.\n     * @param data The source data for this facet data.\n     */\n    constructor(parent, model, name, data) {\n        super(parent);\n        this.model = model;\n        this.name = name;\n        this.data = data;\n        for (const channel of [COLUMN, ROW]) {\n            const fieldDef = model.facet[channel];\n            if (fieldDef) {\n                const { bin, sort } = fieldDef;\n                this[channel] = Object.assign({ name: model.getName(`${channel}_domain`), fields: [vgField(fieldDef), ...(isBinning(bin) ? [vgField(fieldDef, { binSuffix: 'end' })] : [])] }, (isSortField(sort)\n                    ? { sortField: sort }\n                    : isArray(sort)\n                        ? { sortIndexField: sortArrayIndexField(fieldDef, channel) }\n                        : {}));\n            }\n        }\n        this.childModel = model.child;\n    }\n    hash() {\n        let out = `Facet`;\n        if (this.column) {\n            out += ` c:${hash(this.column)}`;\n        }\n        if (this.row) {\n            out += ` r:${hash(this.row)}`;\n        }\n        return out;\n    }\n    get fields() {\n        return [...((this.column && this.column.fields) || []), ...((this.row && this.row.fields) || [])];\n    }\n    /**\n     * The name to reference this source is its name.\n     */\n    getSource() {\n        return this.name;\n    }\n    getChildIndependentFieldsWithStep() {\n        const childIndependentFieldsWithStep = {};\n        for (const channel of ['x', 'y']) {\n            const childScaleComponent = this.childModel.component.scales[channel];\n            if (childScaleComponent && !childScaleComponent.merged) {\n                const type = childScaleComponent.get('type');\n                const range = childScaleComponent.get('range');\n                if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n                    const domain = assembleDomain(this.childModel, channel);\n                    const field = getFieldFromDomain(domain);\n                    if (field) {\n                        childIndependentFieldsWithStep[channel] = field;\n                    }\n                    else {\n                        log.warn('Unknown field for ${channel}.  Cannot calculate view size.');\n                    }\n                }\n            }\n        }\n        return childIndependentFieldsWithStep;\n    }\n    assembleRowColumnData(channel, crossedDataName, childIndependentFieldsWithStep) {\n        const childChannel = channel === 'row' ? 'y' : 'x';\n        const fields = [];\n        const ops = [];\n        const as = [];\n        if (childIndependentFieldsWithStep[childChannel]) {\n            if (crossedDataName) {\n                // If there is a crossed data, calculate max\n                fields.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);\n                ops.push('max');\n            }\n            else {\n                // If there is no crossed data, just calculate distinct\n                fields.push(childIndependentFieldsWithStep[childChannel]);\n                ops.push('distinct');\n            }\n            // Although it is technically a max, just name it distinct so it's easier to refer to it\n            as.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);\n        }\n        const { sortField, sortIndexField } = this[channel];\n        if (sortField) {\n            const { op = DEFAULT_SORT_OP, field } = sortField;\n            fields.push(field);\n            ops.push(op);\n            as.push(vgField(sortField, { forAs: true }));\n        }\n        else if (sortIndexField) {\n            fields.push(sortIndexField);\n            ops.push('max');\n            as.push(sortIndexField);\n        }\n        return {\n            name: this[channel].name,\n            // Use data from the crossed one if it exist\n            source: crossedDataName || this.data,\n            transform: [\n                Object.assign({ type: 'aggregate', groupby: this[channel].fields }, (fields.length\n                    ? {\n                        fields,\n                        ops,\n                        as\n                    }\n                    : {}))\n            ]\n        };\n    }\n    assemble() {\n        const data = [];\n        let crossedDataName = null;\n        const childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();\n        if (this.column && this.row && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {\n            // Need to create a cross dataset to correctly calculate cardinality\n            crossedDataName = `cross_${this.column.name}_${this.row.name}`;\n            const fields = [].concat(childIndependentFieldsWithStep.x || [], childIndependentFieldsWithStep.y || []);\n            const ops = fields.map(() => 'distinct');\n            data.push({\n                name: crossedDataName,\n                source: this.data,\n                transform: [\n                    {\n                        type: 'aggregate',\n                        groupby: [...this.column.fields, ...this.row.fields],\n                        fields,\n                        ops\n                    }\n                ]\n            });\n        }\n        for (const channel of [COLUMN, ROW]) {\n            if (this[channel]) {\n                data.push(this.assembleRowColumnData(channel, crossedDataName, childIndependentFieldsWithStep));\n            }\n        }\n        return data;\n    }\n}\n//# sourceMappingURL=facet.js.map","import { isNumber, isString } from 'vega-util';\nimport { isMinMaxOp } from '../../aggregate';\nimport { getMainRangeChannel } from '../../channel';\nimport { isDateTime } from '../../datetime';\nimport { isNumberFieldDef, isScaleFieldDef, isTimeFieldDef, isTypedFieldDef } from '../../fielddef';\nimport * as log from '../../log';\nimport { forEachLeaf } from '../../logical';\nimport { isFieldEqualPredicate, isFieldOneOfPredicate, isFieldPredicate, isFieldRangePredicate } from '../../predicate';\nimport { isSortField } from '../../sort';\nimport { accessPathDepth, accessPathWithDatum, duplicate, hash, keys, removePathFromField } from '../../util';\nimport { isFacetModel, isUnitModel } from '../model';\nimport { Split } from '../split';\nimport { DataFlowNode } from './dataflow';\n/**\n * @param field The field.\n * @param parse What to parse the field as.\n */\nfunction parseExpression(field, parse) {\n    const f = accessPathWithDatum(field);\n    if (parse === 'number') {\n        return `toNumber(${f})`;\n    }\n    else if (parse === 'boolean') {\n        return `toBoolean(${f})`;\n    }\n    else if (parse === 'string') {\n        return `toString(${f})`;\n    }\n    else if (parse === 'date') {\n        return `toDate(${f})`;\n    }\n    else if (parse === 'flatten') {\n        return f;\n    }\n    else if (parse.indexOf('date:') === 0) {\n        const specifier = parse.slice(5, parse.length);\n        return `timeParse(${f},${specifier})`;\n    }\n    else if (parse.indexOf('utc:') === 0) {\n        const specifier = parse.slice(4, parse.length);\n        return `utcParse(${f},${specifier})`;\n    }\n    else {\n        log.warn(log.message.unrecognizedParse(parse));\n        return null;\n    }\n}\nexport class ParseNode extends DataFlowNode {\n    clone() {\n        return new ParseNode(null, duplicate(this._parse));\n    }\n    constructor(parent, parse) {\n        super(parent);\n        this._parse = parse;\n    }\n    hash() {\n        return `Parse ${hash(this._parse)}`;\n    }\n    /**\n     * Creates a parse node from a data.format.parse and updates ancestorParse.\n     */\n    static makeExplicit(parent, model, ancestorParse) {\n        // Custom parse\n        let explicit = {};\n        const data = model.data;\n        if (data && data.format && data.format.parse) {\n            explicit = data.format.parse;\n        }\n        return this.makeWithAncestors(parent, explicit, {}, ancestorParse);\n    }\n    static makeImplicitFromFilterTransform(parent, transform, ancestorParse) {\n        const parse = {};\n        forEachLeaf(transform.filter, filter => {\n            if (isFieldPredicate(filter)) {\n                // Automatically add a parse node for filters with filter objects\n                let val = null;\n                // For EqualFilter, just use the equal property.\n                // For RangeFilter and OneOfFilter, all array members should have\n                // the same type, so we only use the first one.\n                if (isFieldEqualPredicate(filter)) {\n                    val = filter.equal;\n                }\n                else if (isFieldRangePredicate(filter)) {\n                    val = filter.range[0];\n                }\n                else if (isFieldOneOfPredicate(filter)) {\n                    val = (filter.oneOf || filter['in'])[0];\n                } // else -- for filter expression, we can't infer anything\n                if (val) {\n                    if (isDateTime(val)) {\n                        parse[filter.field] = 'date';\n                    }\n                    else if (isNumber(val)) {\n                        parse[filter.field] = 'number';\n                    }\n                    else if (isString(val)) {\n                        parse[filter.field] = 'string';\n                    }\n                }\n                if (filter.timeUnit) {\n                    parse[filter.field] = 'date';\n                }\n            }\n        });\n        if (keys(parse).length === 0) {\n            return null;\n        }\n        return this.makeWithAncestors(parent, {}, parse, ancestorParse);\n    }\n    /**\n     * Creates a parse node for implicit parsing from a model and updates ancestorParse.\n     */\n    static makeImplicitFromEncoding(parent, model, ancestorParse) {\n        const implicit = {};\n        function add(fieldDef) {\n            if (isTimeFieldDef(fieldDef)) {\n                implicit[fieldDef.field] = 'date';\n            }\n            else if (isNumberFieldDef(fieldDef) && isMinMaxOp(fieldDef.aggregate)) {\n                implicit[fieldDef.field] = 'number';\n            }\n            else if (accessPathDepth(fieldDef.field) > 1) {\n                // For non-date/non-number (strings and booleans), derive a flattened field for a referenced nested field.\n                // (Parsing numbers / dates already flattens numeric and temporal fields.)\n                if (!(fieldDef.field in implicit)) {\n                    implicit[fieldDef.field] = 'flatten';\n                }\n            }\n            else if (isScaleFieldDef(fieldDef) && isSortField(fieldDef.sort) && accessPathDepth(fieldDef.sort.field) > 1) {\n                // Flatten fields that we sort by but that are not otherwise flattened.\n                if (!(fieldDef.sort.field in implicit)) {\n                    implicit[fieldDef.sort.field] = 'flatten';\n                }\n            }\n        }\n        if (isUnitModel(model) || isFacetModel(model)) {\n            // Parse encoded fields\n            model.forEachFieldDef((fieldDef, channel) => {\n                if (isTypedFieldDef(fieldDef)) {\n                    add(fieldDef);\n                }\n                else {\n                    const mainChannel = getMainRangeChannel(channel);\n                    if (mainChannel !== channel) {\n                        const mainFieldDef = model.fieldDef(mainChannel);\n                        add(Object.assign({}, fieldDef, { type: mainFieldDef.type }));\n                    }\n                    else {\n                        throw new Error(`Non-secondary channel ${channel} must have type in its field definition ${JSON.stringify(fieldDef)}`);\n                    }\n                }\n            });\n        }\n        return this.makeWithAncestors(parent, {}, implicit, ancestorParse);\n    }\n    /**\n     * Creates a parse node from \"explicit\" parse and \"implicit\" parse and updates ancestorParse.\n     */\n    static makeWithAncestors(parent, explicit, implicit, ancestorParse) {\n        // We should not parse what has already been parsed in a parent (explicitly or implicitly) or what has been derived (maked as \"derived\"). We also don't need to flatten a field that has already been parsed.\n        for (const field of keys(implicit)) {\n            const parsedAs = ancestorParse.getWithExplicit(field);\n            if (parsedAs.value !== undefined) {\n                // We always ignore derived fields even if they are implicitly defined because we expect users to create the right types.\n                if (parsedAs.explicit ||\n                    parsedAs.value === implicit[field] ||\n                    parsedAs.value === 'derived' ||\n                    implicit[field] === 'flatten') {\n                    delete implicit[field];\n                }\n                else {\n                    log.warn(log.message.differentParse(field, implicit[field], parsedAs.value));\n                }\n            }\n        }\n        for (const field of keys(explicit)) {\n            const parsedAs = ancestorParse.get(field);\n            if (parsedAs !== undefined) {\n                // Don't parse a field again if it has been parsed with the same type already.\n                if (parsedAs === explicit[field]) {\n                    delete explicit[field];\n                }\n                else {\n                    log.warn(log.message.differentParse(field, explicit[field], parsedAs));\n                }\n            }\n        }\n        const parse = new Split(explicit, implicit);\n        // add the format parse from this model so that children don't parse the same field again\n        ancestorParse.copyAll(parse);\n        // copy only non-null parses\n        const p = {};\n        for (const key of keys(parse.combine())) {\n            const val = parse.get(key);\n            if (val !== null) {\n                p[key] = val;\n            }\n        }\n        if (keys(p).length === 0 || ancestorParse.parseNothing) {\n            return null;\n        }\n        return new ParseNode(parent, p);\n    }\n    get parse() {\n        return this._parse;\n    }\n    merge(other) {\n        this._parse = Object.assign({}, this._parse, other.parse);\n        other.remove();\n    }\n    /**\n     * Assemble an object for Vega's format.parse property.\n     */\n    assembleFormatParse() {\n        const formatParse = {};\n        for (const field of keys(this._parse)) {\n            const p = this._parse[field];\n            if (accessPathDepth(field) === 1) {\n                formatParse[field] = p;\n            }\n        }\n        return formatParse;\n    }\n    // format parse depends and produces all fields in its parse\n    producedFields() {\n        return new Set(keys(this._parse));\n    }\n    dependentFields() {\n        return new Set(keys(this._parse));\n    }\n    assembleTransforms(onlyNested = false) {\n        return keys(this._parse)\n            .filter(field => (onlyNested ? accessPathDepth(field) > 1 : true))\n            .map(field => {\n            const expr = parseExpression(field, this._parse[field]);\n            if (!expr) {\n                return null;\n            }\n            const formula = {\n                type: 'formula',\n                expr,\n                as: removePathFromField(field) // Vega output is always flattened\n            };\n            return formula;\n        })\n            .filter(t => t !== null);\n    }\n}\n//# sourceMappingURL=formatparse.js.map","import { vgField } from '../../fielddef';\nimport { duplicate, hash } from '../../util';\nimport { unique } from './../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for the join aggregate transform nodes.\n */\nexport class JoinAggregateTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n    }\n    clone() {\n        return new JoinAggregateTransformNode(null, duplicate(this.transform));\n    }\n    addDimensions(fields) {\n        this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n    }\n    dependentFields() {\n        const out = new Set();\n        this.transform.groupby.forEach(f => out.add(f));\n        this.transform.joinaggregate\n            .map(w => w.field)\n            .filter(f => f !== undefined)\n            .forEach(f => out.add(f));\n        return out;\n    }\n    producedFields() {\n        return new Set(this.transform.joinaggregate.map(this.getDefaultName));\n    }\n    getDefaultName(joinAggregateFieldDef) {\n        return joinAggregateFieldDef.as || vgField(joinAggregateFieldDef);\n    }\n    hash() {\n        return `JoinAggregateTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const fields = [];\n        const ops = [];\n        const as = [];\n        for (const joinaggregate of this.transform.joinaggregate) {\n            ops.push(joinaggregate.op);\n            as.push(this.getDefaultName(joinaggregate));\n            fields.push(joinaggregate.field === undefined ? null : joinaggregate.field);\n        }\n        const groupby = this.transform.groupby;\n        return Object.assign({ type: 'joinaggregate', as,\n            ops,\n            fields }, (groupby !== undefined ? { groupby } : {}));\n    }\n}\n//# sourceMappingURL=joinaggregate.js.map","import { isArray, isString } from 'vega-util';\nimport { getTypedFieldDef, isFieldDef, vgField } from '../../fielddef';\nimport { duplicate, getFirstDefined, hash } from '../../util';\nimport { sortParams } from '../common';\nimport { DataFlowNode } from './dataflow';\nfunction getStackByFields(model) {\n    return model.stack.stackBy.reduce((fields, by) => {\n        const fieldDef = by.fieldDef;\n        const _field = vgField(fieldDef);\n        if (_field) {\n            fields.push(_field);\n        }\n        return fields;\n    }, []);\n}\nfunction isValidAsArray(as) {\n    return isArray(as) && as.every(s => isString(s)) && as.length > 1;\n}\nexport class StackNode extends DataFlowNode {\n    clone() {\n        return new StackNode(null, duplicate(this._stack));\n    }\n    constructor(parent, stack) {\n        super(parent);\n        this._stack = stack;\n    }\n    static makeFromTransform(parent, stackTransform) {\n        const { stack, groupby, as, offset = 'zero' } = stackTransform;\n        const sortFields = [];\n        const sortOrder = [];\n        if (stackTransform.sort !== undefined) {\n            for (const sortField of stackTransform.sort) {\n                sortFields.push(sortField.field);\n                sortOrder.push(getFirstDefined(sortField.order, 'ascending'));\n            }\n        }\n        const sort = {\n            field: sortFields,\n            order: sortOrder\n        };\n        let normalizedAs;\n        if (isValidAsArray(as)) {\n            normalizedAs = as;\n        }\n        else if (isString(as)) {\n            normalizedAs = [as, as + '_end'];\n        }\n        else {\n            normalizedAs = [stackTransform.stack + '_start', stackTransform.stack + '_end'];\n        }\n        return new StackNode(parent, {\n            stackField: stack,\n            groupby,\n            offset,\n            sort,\n            facetby: [],\n            as: normalizedAs\n        });\n    }\n    static makeFromEncoding(parent, model) {\n        const stackProperties = model.stack;\n        const { encoding } = model;\n        if (!stackProperties) {\n            return null;\n        }\n        let dimensionFieldDef;\n        if (stackProperties.groupbyChannel) {\n            const cDef = encoding[stackProperties.groupbyChannel];\n            dimensionFieldDef = getTypedFieldDef(cDef);\n        }\n        const stackby = getStackByFields(model);\n        const orderDef = model.encoding.order;\n        let sort;\n        if (isArray(orderDef) || isFieldDef(orderDef)) {\n            sort = sortParams(orderDef);\n        }\n        else {\n            // default = descending by stackFields\n            // FIXME is the default here correct for binned fields?\n            sort = stackby.reduce((s, field) => {\n                s.field.push(field);\n                s.order.push('descending');\n                return s;\n            }, { field: [], order: [] });\n        }\n        return new StackNode(parent, {\n            dimensionFieldDef,\n            stackField: model.vgField(stackProperties.fieldChannel),\n            facetby: [],\n            stackby,\n            sort,\n            offset: stackProperties.offset,\n            impute: stackProperties.impute,\n            as: [\n                model.vgField(stackProperties.fieldChannel, { suffix: 'start', forAs: true }),\n                model.vgField(stackProperties.fieldChannel, { suffix: 'end', forAs: true })\n            ]\n        });\n    }\n    get stack() {\n        return this._stack;\n    }\n    addDimensions(fields) {\n        this._stack.facetby.push(...fields);\n    }\n    dependentFields() {\n        const out = new Set();\n        out.add(this._stack.stackField);\n        this.getGroupbyFields().forEach(out.add);\n        this._stack.facetby.forEach(out.add);\n        const field = this._stack.sort.field;\n        isArray(field) ? field.forEach(out.add) : out.add(field);\n        return out;\n    }\n    producedFields() {\n        return new Set(this._stack.as);\n    }\n    hash() {\n        return `Stack ${hash(this._stack)}`;\n    }\n    getGroupbyFields() {\n        const { dimensionFieldDef, impute, groupby } = this._stack;\n        if (dimensionFieldDef) {\n            if (dimensionFieldDef.bin) {\n                if (impute) {\n                    // For binned group by field with impute, we calculate bin_mid\n                    // as we cannot impute two fields simultaneously\n                    return [vgField(dimensionFieldDef, { binSuffix: 'mid' })];\n                }\n                return [\n                    // For binned group by field without impute, we need both bin (start) and bin_end\n                    vgField(dimensionFieldDef, {}),\n                    vgField(dimensionFieldDef, { binSuffix: 'end' })\n                ];\n            }\n            return [vgField(dimensionFieldDef)];\n        }\n        return groupby || [];\n    }\n    assemble() {\n        const transform = [];\n        const { facetby, dimensionFieldDef, stackField: field, stackby, sort, offset, impute, as } = this._stack;\n        // Impute\n        if (impute && dimensionFieldDef) {\n            if (dimensionFieldDef.bin) {\n                // As we can only impute one field at a time, we need to calculate\n                // mid point for a binned field\n                transform.push({\n                    type: 'formula',\n                    expr: '(' +\n                        vgField(dimensionFieldDef, { expr: 'datum' }) +\n                        '+' +\n                        vgField(dimensionFieldDef, { expr: 'datum', binSuffix: 'end' }) +\n                        ')/2',\n                    as: vgField(dimensionFieldDef, { binSuffix: 'mid', forAs: true })\n                });\n            }\n            transform.push({\n                type: 'impute',\n                field,\n                groupby: [...stackby, ...facetby],\n                key: vgField(dimensionFieldDef, { binSuffix: 'mid' }),\n                method: 'value',\n                value: 0\n            });\n        }\n        // Stack\n        transform.push({\n            type: 'stack',\n            groupby: [...this.getGroupbyFields(), ...facetby],\n            field,\n            sort,\n            as,\n            offset\n        });\n        return transform;\n    }\n}\n//# sourceMappingURL=stack.js.map","import { isAggregateOp } from '../../aggregate';\nimport { vgField } from '../../fielddef';\nimport { duplicate, hash } from '../../util';\nimport { unique } from './../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for the window transform nodes\n */\nexport class WindowTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n    }\n    clone() {\n        return new WindowTransformNode(null, duplicate(this.transform));\n    }\n    addDimensions(fields) {\n        this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n    }\n    dependentFields() {\n        const out = new Set();\n        this.transform.groupby.forEach(f => out.add(f));\n        this.transform.sort.forEach(m => out.add(m.field));\n        this.transform.window\n            .map(w => w.field)\n            .filter(f => f !== undefined)\n            .forEach(f => out.add(f));\n        return out;\n    }\n    producedFields() {\n        return new Set(this.transform.window.map(this.getDefaultName));\n    }\n    getDefaultName(windowFieldDef) {\n        return windowFieldDef.as || vgField(windowFieldDef);\n    }\n    hash() {\n        return `WindowTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const fields = [];\n        const ops = [];\n        const as = [];\n        const params = [];\n        for (const window of this.transform.window) {\n            ops.push(window.op);\n            as.push(this.getDefaultName(window));\n            params.push(window.param === undefined ? null : window.param);\n            fields.push(window.field === undefined ? null : window.field);\n        }\n        const frame = this.transform.frame;\n        const groupby = this.transform.groupby;\n        if (frame && frame[0] === null && frame[1] === null && ops.every(o => isAggregateOp(o))) {\n            // when the window does not rely on any particular window ops or frame, switch to a simpler and more efficient joinaggregate\n            return Object.assign({ type: 'joinaggregate', as, ops: ops, fields }, (groupby !== undefined ? { groupby } : {}));\n        }\n        const sortFields = [];\n        const sortOrder = [];\n        if (this.transform.sort !== undefined) {\n            for (const sortField of this.transform.sort) {\n                sortFields.push(sortField.field);\n                sortOrder.push(sortField.order || 'ascending');\n            }\n        }\n        const sort = {\n            field: sortFields,\n            order: sortOrder\n        };\n        const ignorePeers = this.transform.ignorePeers;\n        return Object.assign({ type: 'window', params,\n            as,\n            ops,\n            fields,\n            sort }, (ignorePeers !== undefined ? { ignorePeers } : {}), (groupby !== undefined ? { groupby } : {}), (frame !== undefined ? { frame } : {}));\n    }\n}\n//# sourceMappingURL=window.js.map","import { MAIN } from '../../data';\nimport { fieldIntersection, flatten, hash, hasIntersection, keys } from '../../util';\nimport { AggregateNode } from './aggregate';\nimport { OutputNode } from './dataflow';\nimport { FacetNode } from './facet';\nimport { ParseNode } from './formatparse';\nimport { JoinAggregateTransformNode } from './joinaggregate';\nimport { FACET_SCALE_PREFIX } from './optimize';\nimport { BottomUpOptimizer, TopDownOptimizer } from './optimizer';\nimport { SourceNode } from './source';\nimport { StackNode } from './stack';\nimport { TimeUnitNode } from './timeunit';\nimport { WindowTransformNode } from './window';\n/**\n * Start optimization path at the leaves. Useful for merging up or removing things.\n *\n * If the callback returns true, the recursion continues.\n */\nexport function iterateFromLeaves(f) {\n    function optimizeNextFromLeaves(node) {\n        if (node instanceof SourceNode) {\n            return false;\n        }\n        const next = node.parent;\n        const { continueFlag, mutatedFlag } = f(node);\n        let childFlag = false;\n        if (continueFlag) {\n            childFlag = optimizeNextFromLeaves(next);\n        }\n        return mutatedFlag || childFlag;\n    }\n    return optimizeNextFromLeaves;\n}\n/**\n * Move parse nodes up to forks.\n */\nexport class MoveParseUp extends BottomUpOptimizer {\n    run(node) {\n        const parent = node.parent;\n        // move parse up by merging or swapping\n        if (node instanceof ParseNode) {\n            if (parent instanceof SourceNode) {\n                return this.flags;\n            }\n            if (parent.numChildren() > 1) {\n                // don't move parse further up but continue with parent.\n                this.setContinue();\n                return this.flags;\n            }\n            if (parent instanceof ParseNode) {\n                this.setMutated();\n                parent.merge(node);\n            }\n            else {\n                // don't swap with nodes that produce something that the parse node depends on (e.g. lookup)\n                if (fieldIntersection(parent.producedFields(), node.dependentFields())) {\n                    this.setContinue();\n                    return this.flags;\n                }\n                this.setMutated();\n                node.swapWithParent();\n            }\n        }\n        this.setContinue();\n        return this.flags;\n    }\n}\n/**\n * Merge identical nodes at forks by comparing hashes.\n *\n * Does not need to iterate from leaves so we implement this with recursion as it's a bit simpler.\n */\nexport class MergeIdenticalNodes extends TopDownOptimizer {\n    mergeNodes(parent, nodes) {\n        const mergedNode = nodes.shift();\n        for (const node of nodes) {\n            parent.removeChild(node);\n            node.parent = mergedNode;\n            node.remove();\n        }\n    }\n    run(node) {\n        const hashes = node.children.map(x => x.hash());\n        const buckets = {};\n        for (let i = 0; i < hashes.length; i++) {\n            if (buckets[hashes[i]] === undefined) {\n                buckets[hashes[i]] = [node.children[i]];\n            }\n            else {\n                buckets[hashes[i]].push(node.children[i]);\n            }\n        }\n        for (const k of keys(buckets)) {\n            if (buckets[k].length > 1) {\n                this.setMutated();\n                this.mergeNodes(node, buckets[k]);\n            }\n        }\n        for (const child of node.children) {\n            this.run(child);\n        }\n        return this.mutatedFlag;\n    }\n}\n/**\n * Repeatedly remove leaf nodes that are not output or facet nodes.\n * The reason is that we don't need subtrees that don't have any output nodes.\n * Facet nodes are needed for the row or column domains.\n */\nexport class RemoveUnusedSubtrees extends BottomUpOptimizer {\n    run(node) {\n        if (node instanceof OutputNode || node.numChildren() > 0 || node instanceof FacetNode) {\n            // no need to continue with parent because it is output node or will have children (there was a fork)\n            return this.flags;\n        }\n        else {\n            this.setMutated();\n            node.remove();\n        }\n        return this.flags;\n    }\n}\n/**\n * Removes duplicate time unit nodes (as determined by the name of the\n * output field) that may be generated due to selections projected over\n * time units.\n */\nexport class RemoveDuplicateTimeUnits extends BottomUpOptimizer {\n    constructor() {\n        super(...arguments);\n        this.fields = new Set();\n    }\n    run(node) {\n        this.setContinue();\n        if (node instanceof TimeUnitNode) {\n            const pfields = node.producedFields();\n            if (hasIntersection(pfields, this.fields)) {\n                this.setMutated();\n                node.remove();\n            }\n            else {\n                this.fields = new Set([...this.fields, ...pfields]);\n            }\n        }\n        return this.flags;\n    }\n}\n/**\n * Clones the subtree and ignores output nodes except for the leaves, which are renamed.\n */\nfunction cloneSubtree(facet) {\n    function clone(node) {\n        if (!(node instanceof FacetNode)) {\n            const copy = node.clone();\n            if (copy instanceof OutputNode) {\n                const newName = FACET_SCALE_PREFIX + copy.getSource();\n                copy.setSource(newName);\n                facet.model.component.data.outputNodes[newName] = copy;\n            }\n            else if (copy instanceof AggregateNode ||\n                copy instanceof StackNode ||\n                copy instanceof WindowTransformNode ||\n                copy instanceof JoinAggregateTransformNode) {\n                copy.addDimensions(facet.fields);\n            }\n            flatten(node.children.map(clone)).forEach((n) => (n.parent = copy));\n            return [copy];\n        }\n        return flatten(node.children.map(clone));\n    }\n    return clone;\n}\n/**\n * Move facet nodes down to the next fork or output node. Also pull the main output with the facet node.\n * After moving down the facet node, make a copy of the subtree and make it a child of the main output.\n */\nexport function moveFacetDown(node) {\n    if (node instanceof FacetNode) {\n        if (node.numChildren() === 1 && !(node.children[0] instanceof OutputNode)) {\n            // move down until we hit a fork or output node\n            const child = node.children[0];\n            if (child instanceof AggregateNode ||\n                child instanceof StackNode ||\n                child instanceof WindowTransformNode ||\n                child instanceof JoinAggregateTransformNode) {\n                child.addDimensions(node.fields);\n            }\n            child.swapWithParent();\n            moveFacetDown(node);\n        }\n        else {\n            // move main to facet\n            const facetMain = node.model.component.data.main;\n            moveMainDownToFacet(facetMain);\n            // replicate the subtree and place it before the facet's main node\n            const cloner = cloneSubtree(node);\n            const copy = flatten(node.children.map(cloner));\n            for (const c of copy) {\n                c.parent = facetMain;\n            }\n        }\n    }\n    else {\n        node.children.map(moveFacetDown);\n    }\n}\nfunction moveMainDownToFacet(node) {\n    if (node instanceof OutputNode && node.type === MAIN) {\n        if (node.numChildren() === 1) {\n            const child = node.children[0];\n            if (!(child instanceof FacetNode)) {\n                child.swapWithParent();\n                moveMainDownToFacet(node);\n            }\n        }\n    }\n}\n/**\n * Remove nodes that are not required starting from a root.\n */\nexport class RemoveUnnecessaryNodes extends TopDownOptimizer {\n    run(node) {\n        // remove output nodes that are not required\n        if (node instanceof OutputNode && !node.isRequired()) {\n            this.setMutated();\n            node.remove();\n        }\n        for (const child of node.children) {\n            this.run(child);\n        }\n        return this.mutatedFlag;\n    }\n}\n/**\n * Inserts an Intermediate ParseNode containing all non-conflicting Parse fields and removes the empty ParseNodes\n */\nexport class MergeParse extends BottomUpOptimizer {\n    run(node) {\n        const parent = node.parent;\n        const parseChildren = parent.children.filter((x) => x instanceof ParseNode);\n        if (parseChildren.length > 1) {\n            const commonParse = {};\n            for (const parseNode of parseChildren) {\n                const parse = parseNode.parse;\n                for (const k of keys(parse)) {\n                    if (commonParse[k] === undefined) {\n                        commonParse[k] = parse[k];\n                    }\n                    else if (commonParse[k] !== parse[k]) {\n                        delete commonParse[k];\n                    }\n                }\n            }\n            if (keys(commonParse).length !== 0) {\n                this.setMutated();\n                const mergedParseNode = new ParseNode(parent, commonParse);\n                for (const parseNode of parseChildren) {\n                    for (const key of keys(commonParse)) {\n                        delete parseNode.parse[key];\n                    }\n                    parent.removeChild(parseNode);\n                    parseNode.parent = mergedParseNode;\n                    if (keys(parseNode.parse).length === 0) {\n                        parseNode.remove();\n                    }\n                }\n            }\n        }\n        this.setContinue();\n        return this.flags;\n    }\n}\nexport class MergeAggregateNodes extends BottomUpOptimizer {\n    run(node) {\n        const parent = node.parent;\n        const aggChildren = parent.children.filter((x) => x instanceof AggregateNode);\n        // Object which we'll use to map the fields which an aggregate is grouped by to\n        // the set of aggregates with that grouping. This is useful as only aggregates\n        // with the same group by can be merged\n        const groupedAggregates = {};\n        // Build groupedAggregates\n        for (const agg of aggChildren) {\n            const groupBys = hash(keys(agg.groupBy).sort());\n            if (!(groupBys in groupedAggregates)) {\n                groupedAggregates[groupBys] = [];\n            }\n            groupedAggregates[groupBys].push(agg);\n        }\n        // Merge aggregateNodes with same key in groupedAggregates\n        for (const group of keys(groupedAggregates)) {\n            const mergeableAggs = groupedAggregates[group];\n            if (mergeableAggs.length > 1) {\n                const mergedAggs = mergeableAggs.pop();\n                for (const agg of mergeableAggs) {\n                    if (mergedAggs.merge(agg)) {\n                        parent.removeChild(agg);\n                        agg.parent = mergedAggs;\n                        agg.remove();\n                        this.setMutated();\n                    }\n                }\n            }\n        }\n        this.setContinue();\n        return this.flags;\n    }\n}\n//# sourceMappingURL=optimizers.js.map","import * as log from '../../log';\nimport { checkLinks } from './debug';\nimport { BottomUpOptimizer } from './optimizer';\nimport * as optimizers from './optimizers';\nexport const FACET_SCALE_PREFIX = 'scale_';\nexport const MAX_OPTIMIZATION_RUNS = 5;\n/**\n * Return all leaf nodes.\n */\nfunction getLeaves(roots) {\n    const leaves = [];\n    function append(node) {\n        if (node.numChildren() === 0) {\n            leaves.push(node);\n        }\n        else {\n            node.children.forEach(append);\n        }\n    }\n    roots.forEach(append);\n    return leaves;\n}\nexport function isTrue(x) {\n    return x;\n}\n/**\n * Run the specified optimizer on the provided nodes.\n *\n * @param optimizer The optimizer to run.\n * @param nodes A set of nodes to optimize.\n * @param flag Flag that will be or'ed with return valued from optimization calls to the nodes.\n */\nfunction runOptimizer(optimizer, nodes, flag) {\n    const flags = nodes.map(node => {\n        const optimizerInstance = new optimizer();\n        if (optimizerInstance instanceof BottomUpOptimizer) {\n            return optimizerInstance.optimizeNextFromLeaves(node);\n        }\n        else {\n            return optimizerInstance.run(node);\n        }\n    });\n    return flags.some(isTrue) || flag;\n}\nfunction optimizationDataflowHelper(dataComponent) {\n    let roots = dataComponent.sources;\n    let mutatedFlag = false;\n    // mutatedFlag should always be on the right side otherwise short circuit logic might cause the mutating method to not execute\n    mutatedFlag = runOptimizer(optimizers.RemoveUnnecessaryNodes, roots, mutatedFlag);\n    // remove source nodes that don't have any children because they also don't have output nodes\n    roots = roots.filter(r => r.numChildren() > 0);\n    mutatedFlag = runOptimizer(optimizers.RemoveUnusedSubtrees, getLeaves(roots), mutatedFlag);\n    roots = roots.filter(r => r.numChildren() > 0);\n    mutatedFlag = runOptimizer(optimizers.MoveParseUp, getLeaves(roots), mutatedFlag);\n    mutatedFlag = runOptimizer(optimizers.RemoveDuplicateTimeUnits, getLeaves(roots), mutatedFlag);\n    mutatedFlag = runOptimizer(optimizers.MergeParse, getLeaves(roots), mutatedFlag);\n    mutatedFlag = runOptimizer(optimizers.MergeAggregateNodes, getLeaves(roots), mutatedFlag);\n    mutatedFlag = runOptimizer(optimizers.MergeIdenticalNodes, roots, mutatedFlag);\n    dataComponent.sources = roots;\n    return mutatedFlag;\n}\n/**\n * Optimizes the dataflow of the passed in data component.\n */\nexport function optimizeDataflow(data) {\n    // check before optimizations\n    checkLinks(data.sources);\n    let firstPassCounter = 0;\n    let secondPassCounter = 0;\n    for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {\n        if (!optimizationDataflowHelper(data)) {\n            break;\n        }\n        firstPassCounter++;\n    }\n    // move facets down and make a copy of the subtree so that we can have scales at the top level\n    data.sources.map(optimizers.moveFacetDown);\n    for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {\n        if (!optimizationDataflowHelper(data)) {\n            break;\n        }\n        secondPassCounter++;\n    }\n    // check after optimizations\n    checkLinks(data.sources);\n    if (Math.max(firstPassCounter, secondPassCounter) === MAX_OPTIMIZATION_RUNS) {\n        log.warn(`Maximum optimization runs(${MAX_OPTIMIZATION_RUNS}) reached.`);\n    }\n}\n//# sourceMappingURL=optimize.js.map","import * as tslib_1 from \"tslib\";\nimport { isObject, isString } from 'vega-util';\nimport { SHARED_DOMAIN_OP_INDEX } from '../../aggregate';\nimport { isBinning } from '../../bin';\nimport { isScaleChannel } from '../../channel';\nimport { MAIN, RAW } from '../../data';\nimport { binRequiresRange, valueExpr, vgField } from '../../fielddef';\nimport * as log from '../../log';\nimport { hasDiscreteDomain, isSelectionDomain } from '../../scale';\nimport { DEFAULT_SORT_OP, isSortArray, isSortByEncoding, isSortField } from '../../sort';\nimport * as util from '../../util';\nimport { isDataRefDomain, isDataRefUnionedDomain, isFieldRefUnionDomain } from '../../vega.schema';\nimport { sortArrayIndexField } from '../data/calculate';\nimport { FACET_SCALE_PREFIX } from '../data/optimize';\nimport { isFacetModel, isUnitModel } from '../model';\nimport { SELECTION_DOMAIN } from '../selection/selection';\nexport function parseScaleDomain(model) {\n    if (isUnitModel(model)) {\n        parseUnitScaleDomain(model);\n    }\n    else {\n        parseNonUnitScaleDomain(model);\n    }\n}\nfunction parseUnitScaleDomain(model) {\n    const scales = model.specifiedScales;\n    const localScaleComponents = model.component.scales;\n    util.keys(localScaleComponents).forEach((channel) => {\n        const specifiedScale = scales[channel];\n        const specifiedDomain = specifiedScale ? specifiedScale.domain : undefined;\n        const domains = parseDomainForChannel(model, channel);\n        const localScaleCmpt = localScaleComponents[channel];\n        localScaleCmpt.domains = domains;\n        if (isSelectionDomain(specifiedDomain)) {\n            // As scale parsing occurs before selection parsing, we use a temporary\n            // signal here and append the scale.domain definition. This is replaced\n            // with the correct domainRaw signal during scale assembly.\n            // For more information, see isRawSelectionDomain in selection.ts.\n            // FIXME: replace this with a special property in the scaleComponent\n            localScaleCmpt.set('domainRaw', {\n                signal: SELECTION_DOMAIN + util.hash(specifiedDomain)\n            }, true);\n        }\n        if (model.component.data.isFaceted) {\n            // get resolve from closest facet parent as this decides whether we need to refer to cloned subtree or not\n            let facetParent = model;\n            while (!isFacetModel(facetParent) && facetParent.parent) {\n                facetParent = facetParent.parent;\n            }\n            const resolve = facetParent.component.resolve.scale[channel];\n            if (resolve === 'shared') {\n                for (const domain of domains) {\n                    // Replace the scale domain with data output from a cloned subtree after the facet.\n                    if (isDataRefDomain(domain)) {\n                        // use data from cloned subtree (which is the same as data but with a prefix added once)\n                        domain.data = FACET_SCALE_PREFIX + domain.data.replace(FACET_SCALE_PREFIX, '');\n                    }\n                }\n            }\n        }\n    });\n}\nfunction parseNonUnitScaleDomain(model) {\n    for (const child of model.children) {\n        parseScaleDomain(child);\n    }\n    const localScaleComponents = model.component.scales;\n    util.keys(localScaleComponents).forEach((channel) => {\n        let domains;\n        let domainRaw = null;\n        for (const child of model.children) {\n            const childComponent = child.component.scales[channel];\n            if (childComponent) {\n                if (domains === undefined) {\n                    domains = childComponent.domains;\n                }\n                else {\n                    domains = domains.concat(childComponent.domains);\n                }\n                const dr = childComponent.get('domainRaw');\n                if (domainRaw && dr && domainRaw.signal !== dr.signal) {\n                    log.warn('The same selection must be used to override scale domains in a layered view.');\n                }\n                domainRaw = dr;\n            }\n        }\n        localScaleComponents[channel].domains = domains;\n        if (domainRaw) {\n            localScaleComponents[channel].set('domainRaw', domainRaw, true);\n        }\n    });\n}\n/**\n * Remove unaggregated domain if it is not applicable\n * Add unaggregated domain if domain is not specified and config.scale.useUnaggregatedDomain is true.\n */\nfunction normalizeUnaggregatedDomain(domain, fieldDef, scaleType, scaleConfig) {\n    if (domain === 'unaggregated') {\n        const { valid, reason } = canUseUnaggregatedDomain(fieldDef, scaleType);\n        if (!valid) {\n            log.warn(reason);\n            return undefined;\n        }\n    }\n    else if (domain === undefined && scaleConfig.useUnaggregatedDomain) {\n        // Apply config if domain is not specified.\n        const { valid } = canUseUnaggregatedDomain(fieldDef, scaleType);\n        if (valid) {\n            return 'unaggregated';\n        }\n    }\n    return domain;\n}\nexport function parseDomainForChannel(model, channel) {\n    const scaleType = model.getScaleComponent(channel).get('type');\n    const domain = normalizeUnaggregatedDomain(model.scaleDomain(channel), model.fieldDef(channel), scaleType, model.config.scale);\n    if (domain !== model.scaleDomain(channel)) {\n        model.specifiedScales[channel] = Object.assign({}, model.specifiedScales[channel], { domain });\n    }\n    // If channel is either X or Y then union them with X2 & Y2 if they exist\n    if (channel === 'x' && model.channelHasField('x2')) {\n        if (model.channelHasField('x')) {\n            return parseSingleChannelDomain(scaleType, domain, model, 'x').concat(parseSingleChannelDomain(scaleType, domain, model, 'x2'));\n        }\n        else {\n            return parseSingleChannelDomain(scaleType, domain, model, 'x2');\n        }\n    }\n    else if (channel === 'y' && model.channelHasField('y2')) {\n        if (model.channelHasField('y')) {\n            return parseSingleChannelDomain(scaleType, domain, model, 'y').concat(parseSingleChannelDomain(scaleType, domain, model, 'y2'));\n        }\n        else {\n            return parseSingleChannelDomain(scaleType, domain, model, 'y2');\n        }\n    }\n    return parseSingleChannelDomain(scaleType, domain, model, channel);\n}\nfunction mapDomainToDataSignal(domain, type, timeUnit) {\n    return domain.map(v => {\n        const data = valueExpr(v, { timeUnit, type });\n        return { signal: `{data: ${data}}` };\n    });\n}\nfunction parseSingleChannelDomain(scaleType, domain, model, channel) {\n    const fieldDef = model.fieldDef(channel);\n    if (domain && domain !== 'unaggregated' && !isSelectionDomain(domain)) {\n        // explicit value\n        const { type, timeUnit } = fieldDef;\n        if (type === 'temporal' || timeUnit) {\n            return mapDomainToDataSignal(domain, type, timeUnit);\n        }\n        return [domain];\n    }\n    const stack = model.stack;\n    if (stack && channel === stack.fieldChannel) {\n        if (stack.offset === 'normalize') {\n            return [[0, 1]];\n        }\n        const data = model.requestDataName(MAIN);\n        return [\n            {\n                data,\n                field: model.vgField(channel, { suffix: 'start' })\n            },\n            {\n                data,\n                field: model.vgField(channel, { suffix: 'end' })\n            }\n        ];\n    }\n    const sort = isScaleChannel(channel)\n        ? domainSort(model, channel, scaleType)\n        : undefined;\n    if (domain === 'unaggregated') {\n        const data = model.requestDataName(MAIN);\n        const { field } = fieldDef;\n        return [\n            {\n                data,\n                field: vgField({ field, aggregate: 'min' })\n            },\n            {\n                data,\n                field: vgField({ field, aggregate: 'max' })\n            }\n        ];\n    }\n    else if (isBinning(fieldDef.bin)) {\n        if (hasDiscreteDomain(scaleType)) {\n            if (scaleType === 'bin-ordinal') {\n                // we can omit the domain as it is inferred from the `bins` property\n                return [];\n            }\n            // ordinal bin scale takes domain from bin_range, ordered by bin start\n            // This is useful for both axis-based scale (x/y) and legend-based scale (other channels).\n            return [\n                {\n                    // If sort by aggregation of a specified sort field, we need to use RAW table,\n                    // so we can aggregate values for the scale independently from the main aggregation.\n                    data: util.isBoolean(sort) ? model.requestDataName(MAIN) : model.requestDataName(RAW),\n                    // Use range if we added it and the scale does not support computing a range as a signal.\n                    field: model.vgField(channel, binRequiresRange(fieldDef, channel) ? { binSuffix: 'range' } : {}),\n                    // we have to use a sort object if sort = true to make the sort correct by bin start\n                    sort: sort === true || !isObject(sort)\n                        ? {\n                            field: model.vgField(channel, {}),\n                            op: 'min' // min or max doesn't matter since we sort by the start of the bin range\n                        }\n                        : sort\n                }\n            ];\n        }\n        else {\n            // continuous scales\n            if (isBinning(fieldDef.bin)) {\n                const signalName = model.getName(vgField(fieldDef, { suffix: 'bins' }));\n                return [{ signal: `[${signalName}.start, ${signalName}.stop]` }];\n            }\n            else {\n                return [\n                    {\n                        data: model.requestDataName(MAIN),\n                        field: model.vgField(channel, {})\n                    }\n                ];\n            }\n        }\n    }\n    else if (sort) {\n        return [\n            {\n                // If sort by aggregation of a specified sort field, we need to use RAW table,\n                // so we can aggregate values for the scale independently from the main aggregation.\n                data: util.isBoolean(sort) ? model.requestDataName(MAIN) : model.requestDataName(RAW),\n                field: model.vgField(channel),\n                sort: sort\n            }\n        ];\n    }\n    else {\n        return [\n            {\n                data: model.requestDataName(MAIN),\n                field: model.vgField(channel)\n            }\n        ];\n    }\n}\nfunction normalizeSortField(sort, isStacked) {\n    const { op, field, order } = sort;\n    return Object.assign({ \n        // Apply default op\n        op: op || (isStacked ? 'sum' : DEFAULT_SORT_OP) }, (field ? { field: util.replacePathInField(field) } : {}), (order ? { order } : {}));\n}\nexport function domainSort(model, channel, scaleType) {\n    if (!hasDiscreteDomain(scaleType)) {\n        return undefined;\n    }\n    // save to cast as the only exception is the geojson type for shape, which would not generate a scale\n    const fieldDef = model.fieldDef(channel);\n    const sort = fieldDef.sort;\n    // if the sort is specified with array, use the derived sort index field\n    if (isSortArray(sort)) {\n        return {\n            op: 'min',\n            field: sortArrayIndexField(fieldDef, channel),\n            order: 'ascending'\n        };\n    }\n    const isStacked = model.stack !== null;\n    // Sorted based on an aggregate calculation over a specified sort field (only for ordinal scale)\n    if (isSortField(sort)) {\n        return normalizeSortField(sort, isStacked);\n    }\n    else if (isSortByEncoding(sort)) {\n        const { encoding, order } = sort;\n        const { aggregate, field } = model.fieldDef(encoding);\n        const sortField = {\n            op: aggregate,\n            field,\n            order\n        };\n        return normalizeSortField(sortField, isStacked);\n    }\n    else if (sort === 'descending') {\n        return {\n            op: 'min',\n            field: model.vgField(channel),\n            order: 'descending'\n        };\n    }\n    else if (util.contains(['ascending', undefined /* default =ascending*/], sort)) {\n        return true;\n    }\n    // sort == null\n    return undefined;\n}\n/**\n * Determine if a scale can use unaggregated domain.\n * @return {Boolean} Returns true if all of the following conditions apply:\n * 1. `scale.domain` is `unaggregated`\n * 2. Aggregation function is not `count` or `sum`\n * 3. The scale is quantitative or time scale.\n */\nexport function canUseUnaggregatedDomain(fieldDef, scaleType) {\n    if (!fieldDef.aggregate) {\n        return {\n            valid: false,\n            reason: log.message.unaggregateDomainHasNoEffectForRawField(fieldDef)\n        };\n    }\n    if (!SHARED_DOMAIN_OP_INDEX[fieldDef.aggregate]) {\n        return {\n            valid: false,\n            reason: log.message.unaggregateDomainWithNonSharedDomainOp(fieldDef.aggregate)\n        };\n    }\n    if (fieldDef.type === 'quantitative') {\n        if (scaleType === 'log') {\n            return {\n                valid: false,\n                reason: log.message.unaggregatedDomainWithLogScale(fieldDef)\n            };\n        }\n    }\n    return { valid: true };\n}\n/**\n * Converts an array of domains to a single Vega scale domain.\n */\nexport function mergeDomains(domains) {\n    const uniqueDomains = util.unique(domains.map(domain => {\n        // ignore sort property when computing the unique domains\n        if (isDataRefDomain(domain)) {\n            const { sort: _s } = domain, domainWithoutSort = tslib_1.__rest(domain, [\"sort\"]);\n            return domainWithoutSort;\n        }\n        return domain;\n    }), util.hash);\n    const sorts = util.unique(domains\n        .map(d => {\n        if (isDataRefDomain(d)) {\n            const s = d.sort;\n            if (s !== undefined && !util.isBoolean(s)) {\n                if (s.op === 'count') {\n                    // let's make sure that if op is count, we don't use a field\n                    delete s.field;\n                }\n                if (s.order === 'ascending') {\n                    // drop order: ascending as it is the default\n                    delete s.order;\n                }\n            }\n            return s;\n        }\n        return undefined;\n    })\n        .filter(s => s !== undefined), util.hash);\n    if (uniqueDomains.length === 0) {\n        return undefined;\n    }\n    else if (uniqueDomains.length === 1) {\n        const domain = domains[0];\n        if (isDataRefDomain(domain) && sorts.length > 0) {\n            let sort = sorts[0];\n            if (sorts.length > 1) {\n                log.warn(log.message.MORE_THAN_ONE_SORT);\n                sort = true;\n            }\n            return Object.assign({}, domain, { sort });\n        }\n        return domain;\n    }\n    // only keep simple sort properties that work with unioned domains\n    const simpleSorts = util.unique(sorts.map(s => {\n        if (util.isBoolean(s)) {\n            return s;\n        }\n        if (s.op === 'count') {\n            return s;\n        }\n        log.warn(log.message.domainSortDropped(s));\n        return true;\n    }), util.hash);\n    let sort;\n    if (simpleSorts.length === 1) {\n        sort = simpleSorts[0];\n    }\n    else if (simpleSorts.length > 1) {\n        log.warn(log.message.MORE_THAN_ONE_SORT);\n        sort = true;\n    }\n    const allData = util.unique(domains.map(d => {\n        if (isDataRefDomain(d)) {\n            return d.data;\n        }\n        return null;\n    }), x => x);\n    if (allData.length === 1 && allData[0] !== null) {\n        // create a union domain of different fields with a single data source\n        const domain = Object.assign({ data: allData[0], fields: uniqueDomains.map(d => d.field) }, (sort ? { sort } : {}));\n        return domain;\n    }\n    return Object.assign({ fields: uniqueDomains }, (sort ? { sort } : {}));\n}\n/**\n * Return a field if a scale single field.\n * Return `undefined` otherwise.\n *\n */\nexport function getFieldFromDomain(domain) {\n    if (isDataRefDomain(domain) && isString(domain.field)) {\n        return domain.field;\n    }\n    else if (isDataRefUnionedDomain(domain)) {\n        let field;\n        for (const nonUnionDomain of domain.fields) {\n            if (isDataRefDomain(nonUnionDomain) && isString(nonUnionDomain.field)) {\n                if (!field) {\n                    field = nonUnionDomain.field;\n                }\n                else if (field !== nonUnionDomain.field) {\n                    log.warn('Detected faceted independent scales that union domain of multiple fields from different data sources.  We will use the first field.  The result view size may be incorrect.');\n                    return field;\n                }\n            }\n        }\n        log.warn('Detected faceted independent scales that union domain of identical fields from different source detected.  We will assume that this is the same field from a different fork of the same data source.  However, if this is not case, the result view size maybe incorrect.');\n        return field;\n    }\n    else if (isFieldRefUnionDomain(domain)) {\n        log.warn('Detected faceted independent scales that union domain of multiple fields from the same data source.  We will use the first field.  The result view size may be incorrect.');\n        const field = domain.fields[0];\n        return isString(field) ? field : undefined;\n    }\n    return undefined;\n}\nexport function assembleDomain(model, channel) {\n    const scaleComponent = model.component.scales[channel];\n    const domains = scaleComponent.domains.map(domain => {\n        // Correct references to data as the original domain's data was determined\n        // in parseScale, which happens before parseData. Thus the original data\n        // reference can be incorrect.\n        if (isDataRefDomain(domain)) {\n            domain.data = model.lookupDataSource(domain.data);\n        }\n        return domain;\n    });\n    // domains is an array that has to be merged into a single vega domain\n    return mergeDomains(domains);\n}\n//# sourceMappingURL=domain.js.map","import * as tslib_1 from \"tslib\";\nimport { keys } from '../../util';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { isConcatModel, isLayerModel, isRepeatModel } from '../model';\nimport { isRawSelectionDomain, selectionScaleDomain } from '../selection/selection';\nimport { assembleDomain } from './domain';\nexport function assembleScales(model) {\n    if (isLayerModel(model) || isConcatModel(model) || isRepeatModel(model)) {\n        // For concat / layer / repeat, include scales of children too\n        return model.children.reduce((scales, child) => {\n            return scales.concat(assembleScales(child));\n        }, assembleScalesForModel(model));\n    }\n    else {\n        // For facet, child scales would not be included in the parent's scope.\n        // For unit, there is no child.\n        return assembleScalesForModel(model);\n    }\n}\nexport function assembleScalesForModel(model) {\n    return keys(model.component.scales).reduce((scales, channel) => {\n        const scaleComponent = model.component.scales[channel];\n        if (scaleComponent.merged) {\n            // Skipped merged scales\n            return scales;\n        }\n        const scale = scaleComponent.combine();\n        // need to separate const and non const object destruction\n        let { domainRaw } = scale;\n        const { name, type, domainRaw: _d, range: _r } = scale, otherScaleProps = tslib_1.__rest(scale, [\"name\", \"type\", \"domainRaw\", \"range\"]);\n        const range = assembleScaleRange(scale.range, name, channel);\n        // As scale parsing occurs before selection parsing, a temporary signal\n        // is used for domainRaw. Here, we detect if this temporary signal\n        // is set, and replace it with the correct domainRaw signal.\n        // For more information, see isRawSelectionDomain in selection.ts.\n        if (domainRaw && isRawSelectionDomain(domainRaw)) {\n            domainRaw = selectionScaleDomain(model, domainRaw);\n        }\n        const domain = assembleDomain(model, channel);\n        scales.push(Object.assign({ name,\n            type }, (domain ? { domain } : {}), (domainRaw ? { domainRaw } : {}), { range: range }, otherScaleProps));\n        return scales;\n    }, []);\n}\nexport function assembleScaleRange(scaleRange, scaleName, channel) {\n    // add signals to x/y range\n    if (channel === 'x' || channel === 'y') {\n        if (isVgRangeStep(scaleRange)) {\n            // For x/y range step, use a signal created in layout assemble instead of a constant range step.\n            return {\n                step: { signal: scaleName + '_step' }\n            };\n        }\n    }\n    return scaleRange;\n}\n//# sourceMappingURL=assemble.js.map","import { Split } from '../split';\nexport class ScaleComponent extends Split {\n    constructor(name, typeWithExplicit) {\n        super({}, // no initial explicit property\n        { name } // name as initial implicit property\n        );\n        this.merged = false;\n        this.domains = [];\n        this.setWithExplicit('type', typeWithExplicit);\n    }\n}\n//# sourceMappingURL=component.js.map","/**\n * A class that behaves like a SignalRef but lazily generates the signal.\n * The provided generator function should use `Model.getSignalName` to use the correct signal name.\n */\nexport class SignalRefWrapper {\n    constructor(exprGenerator) {\n        this.exprGenerator = exprGenerator;\n    }\n    get signal() {\n        return this.exprGenerator();\n    }\n    toJSON() {\n        return { signal: this.signal };\n    }\n    static fromName(rename, signalName) {\n        return new SignalRefWrapper(() => rename(signalName));\n    }\n}\n//# sourceMappingURL=signal.js.map","import { isArray, isNumber } from 'vega-util';\nimport { isBinning } from '../../bin';\nimport { COLOR, FILL, FILLOPACITY, OPACITY, POSITION_SCALE_CHANNELS, SCALE_CHANNELS, SHAPE, SIZE, STROKE, STROKEOPACITY, STROKEWIDTH, X, Y } from '../../channel';\nimport { vgField } from '../../fielddef';\nimport * as log from '../../log';\nimport { channelScalePropertyIncompatability, hasContinuousDomain, hasDiscreteDomain, isContinuousToDiscrete, isExtendedScheme, scaleTypeSupportProperty } from '../../scale';\nimport * as util from '../../util';\nimport { isSignalRef, isVgRangeStep } from '../../vega.schema';\nimport { SignalRefWrapper } from '../signal';\nimport { makeExplicit, makeImplicit } from '../split';\nexport const RANGE_PROPERTIES = ['range', 'rangeStep', 'scheme'];\nfunction getSizeType(channel) {\n    return channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;\n}\nexport function parseUnitScaleRange(model) {\n    const localScaleComponents = model.component.scales;\n    // use SCALE_CHANNELS instead of scales[channel] to ensure that x, y come first!\n    SCALE_CHANNELS.forEach((channel) => {\n        const localScaleCmpt = localScaleComponents[channel];\n        if (!localScaleCmpt) {\n            return;\n        }\n        const mergedScaleCmpt = model.getScaleComponent(channel);\n        const specifiedScale = model.specifiedScales[channel];\n        const fieldDef = model.fieldDef(channel);\n        // Read if there is a specified width/height\n        const sizeType = getSizeType(channel);\n        let sizeSpecified = sizeType ? !!model.component.layoutSize.get(sizeType) : undefined;\n        const scaleType = mergedScaleCmpt.get('type');\n        // if autosize is fit, size cannot be data driven\n        const rangeStep = util.contains(['point', 'band'], scaleType) || !!specifiedScale.rangeStep;\n        if (sizeType && model.fit && !sizeSpecified && rangeStep) {\n            log.warn(log.message.CANNOT_FIX_RANGE_STEP_WITH_FIT);\n            sizeSpecified = true;\n        }\n        const xyRangeSteps = getXYRangeStep(model);\n        const rangeWithExplicit = parseRangeForChannel(channel, model.getSignalName.bind(model), scaleType, fieldDef.type, specifiedScale, model.config, localScaleCmpt.get('zero'), model.mark, sizeSpecified, model.getName(sizeType), xyRangeSteps);\n        localScaleCmpt.setWithExplicit('range', rangeWithExplicit);\n    });\n}\nfunction getRangeStep(model, channel) {\n    const scaleCmpt = model.getScaleComponent(channel);\n    if (!scaleCmpt) {\n        return undefined;\n    }\n    const scaleType = scaleCmpt.get('type');\n    const fieldDef = model.fieldDef(channel);\n    if (hasDiscreteDomain(scaleType)) {\n        const range = scaleCmpt && scaleCmpt.get('range');\n        if (range && isVgRangeStep(range) && isNumber(range.step)) {\n            return range.step;\n        }\n        // TODO: support the case without range step\n    }\n    else if (fieldDef && fieldDef.bin) {\n        if (isBinning(fieldDef.bin)) {\n            const binSignal = model.getName(vgField(fieldDef, { suffix: 'bins' }));\n            // TODO: extract this to be range step signal\n            const binCount = `(${binSignal}.stop - ${binSignal}.start) / ${binSignal}.step`;\n            const sizeType = getSizeType(channel);\n            const sizeSignal = model.getName(sizeType);\n            return new SignalRefWrapper(() => `${model.getSignalName(sizeSignal)} / (${model.getSignalName(binCount)})`);\n        }\n        // TODO: handle binned case\n    }\n    return undefined;\n}\nfunction getXYRangeStep(model) {\n    const steps = [];\n    for (const channel of POSITION_SCALE_CHANNELS) {\n        const step = getRangeStep(model, channel);\n        if (step !== undefined) {\n            steps.push(step);\n        }\n    }\n    return steps;\n}\n/**\n * Return mixins that includes one of the range properties (range, rangeStep, scheme).\n */\nexport function parseRangeForChannel(channel, getSignalName, scaleType, type, specifiedScale, config, zero, mark, sizeSpecified, sizeSignal, xyRangeSteps) {\n    const noRangeStep = sizeSpecified || specifiedScale.rangeStep === null;\n    // Check if any of the range properties is specified.\n    // If so, check if it is compatible and make sure that we only output one of the properties\n    for (const property of RANGE_PROPERTIES) {\n        if (specifiedScale[property] !== undefined) {\n            const supportedByScaleType = scaleTypeSupportProperty(scaleType, property);\n            const channelIncompatability = channelScalePropertyIncompatability(channel, property);\n            if (!supportedByScaleType) {\n                log.warn(log.message.scalePropertyNotWorkWithScaleType(scaleType, property, channel));\n            }\n            else if (channelIncompatability) {\n                // channel\n                log.warn(channelIncompatability);\n            }\n            else {\n                switch (property) {\n                    case 'range':\n                        return makeExplicit(specifiedScale[property]);\n                    case 'scheme':\n                        return makeExplicit(parseScheme(specifiedScale[property]));\n                    case 'rangeStep':\n                        const rangeStep = specifiedScale[property];\n                        if (rangeStep !== null) {\n                            if (!sizeSpecified) {\n                                return makeExplicit({ step: rangeStep });\n                            }\n                            else {\n                                // If top-level size is specified, we ignore specified rangeStep.\n                                log.warn(log.message.rangeStepDropped(channel));\n                            }\n                        }\n                }\n            }\n        }\n    }\n    return makeImplicit(defaultRange(channel, getSignalName, scaleType, type, config, zero, mark, sizeSignal, xyRangeSteps, noRangeStep, specifiedScale.domain));\n}\nfunction parseScheme(scheme) {\n    if (isExtendedScheme(scheme)) {\n        return Object.assign({ scheme: scheme.name }, util.omit(scheme, ['name']));\n    }\n    return { scheme: scheme };\n}\nfunction defaultRange(channel, getSignalName, scaleType, type, config, zero, mark, sizeSignal, xyRangeSteps, noRangeStep, domain) {\n    switch (channel) {\n        case X:\n        case Y:\n            if (util.contains(['point', 'band'], scaleType) && !noRangeStep) {\n                if (channel === X && mark === 'text') {\n                    if (config.scale.textXRangeStep) {\n                        return { step: config.scale.textXRangeStep };\n                    }\n                }\n                else {\n                    if (config.scale.rangeStep) {\n                        return { step: config.scale.rangeStep };\n                    }\n                }\n            }\n            // If range step is null, use zero to width or height.\n            // Note that these range signals are temporary\n            // as they can be merged and renamed.\n            // (We do not have the right size signal here since parseLayoutSize() happens after parseScale().)\n            // We will later replace these temporary names with\n            // the final name in assembleScaleRange()\n            if (channel === Y && hasContinuousDomain(scaleType)) {\n                // For y continuous scale, we have to start from the height as the bottom part has the max value.\n                return [SignalRefWrapper.fromName(getSignalName, sizeSignal), 0];\n            }\n            else {\n                return [0, SignalRefWrapper.fromName(getSignalName, sizeSignal)];\n            }\n        case SIZE:\n            // TODO: support custom rangeMin, rangeMax\n            const rangeMin = sizeRangeMin(mark, zero, config);\n            const rangeMax = sizeRangeMax(mark, xyRangeSteps, config);\n            if (isContinuousToDiscrete(scaleType)) {\n                return interpolateRange(rangeMin, rangeMax, defaultContinuousToDiscreteCount(scaleType, config, domain, channel));\n            }\n            else {\n                return [rangeMin, rangeMax];\n            }\n        case STROKEWIDTH:\n            // TODO: support custom rangeMin, rangeMax\n            return [config.scale.minStrokeWidth, config.scale.maxStrokeWidth];\n        case SHAPE:\n            return 'symbol';\n        case COLOR:\n        case FILL:\n        case STROKE:\n            if (scaleType === 'ordinal') {\n                // Only nominal data uses ordinal scale by default\n                return type === 'nominal' ? 'category' : 'ordinal';\n            }\n            else {\n                return mark === 'rect' || mark === 'geoshape' ? 'heatmap' : 'ramp';\n            }\n        case OPACITY:\n        case FILLOPACITY:\n        case STROKEOPACITY:\n            // TODO: support custom rangeMin, rangeMax\n            return [config.scale.minOpacity, config.scale.maxOpacity];\n    }\n    /* istanbul ignore next: should never reach here */\n    throw new Error(`Scale range undefined for channel ${channel}`);\n}\nexport function defaultContinuousToDiscreteCount(scaleType, config, domain, channel) {\n    switch (scaleType) {\n        case 'quantile':\n            return config.scale.quantileCount;\n        case 'quantize':\n            return config.scale.quantizeCount;\n        case 'threshold':\n            if (domain !== undefined && isArray(domain)) {\n                return domain.length + 1;\n            }\n            else {\n                log.warn(log.message.domainRequiredForThresholdScale(channel));\n                // default threshold boundaries for threshold scale since domain has cardinality of 2\n                return 3;\n            }\n    }\n}\n/**\n * Returns the linear interpolation of the range according to the cardinality\n *\n * @param rangeMin start of the range\n * @param rangeMax end of the range\n * @param cardinality number of values in the output range\n */\nexport function interpolateRange(rangeMin, rangeMax, cardinality) {\n    // always return a signal since it's better to compute the sequence in Vega later\n    const f = () => {\n        const rMax = isSignalRef(rangeMax) ? rangeMax.signal : rangeMax;\n        const step = `(${rMax} - ${rangeMin}) / (${cardinality} - 1)`;\n        return `sequence(${rangeMin}, ${rangeMax} + ${step}, ${step})`;\n    };\n    if (isSignalRef(rangeMax)) {\n        return new SignalRefWrapper(f);\n    }\n    else {\n        return { signal: f() };\n    }\n}\nfunction sizeRangeMin(mark, zero, config) {\n    if (zero) {\n        return 0;\n    }\n    switch (mark) {\n        case 'bar':\n        case 'tick':\n            return config.scale.minBandSize;\n        case 'line':\n        case 'trail':\n        case 'rule':\n            return config.scale.minStrokeWidth;\n        case 'text':\n            return config.scale.minFontSize;\n        case 'point':\n        case 'square':\n        case 'circle':\n            return config.scale.minSize;\n    }\n    /* istanbul ignore next: should never reach here */\n    // sizeRangeMin not implemented for the mark\n    throw new Error(log.message.incompatibleChannel('size', mark));\n}\nexport const MAX_SIZE_RANGE_STEP_RATIO = 0.95;\nfunction sizeRangeMax(mark, xyRangeSteps, config) {\n    const scaleConfig = config.scale;\n    switch (mark) {\n        case 'bar':\n        case 'tick':\n            if (config.scale.maxBandSize !== undefined) {\n                return config.scale.maxBandSize;\n            }\n            const min = minXYRangeStep(xyRangeSteps, config.scale);\n            if (isNumber(min)) {\n                return min - 1;\n            }\n            else {\n                return new SignalRefWrapper(() => `${min.signal} - 1`);\n            }\n        case 'line':\n        case 'trail':\n        case 'rule':\n            return config.scale.maxStrokeWidth;\n        case 'text':\n            return config.scale.maxFontSize;\n        case 'point':\n        case 'square':\n        case 'circle':\n            if (config.scale.maxSize) {\n                return config.scale.maxSize;\n            }\n            const pointStep = minXYRangeStep(xyRangeSteps, scaleConfig);\n            if (isNumber(pointStep)) {\n                return Math.pow(MAX_SIZE_RANGE_STEP_RATIO * pointStep, 2);\n            }\n            else {\n                return new SignalRefWrapper(() => `pow(${MAX_SIZE_RANGE_STEP_RATIO} * ${pointStep.signal}, 2)`);\n            }\n    }\n    /* istanbul ignore next: should never reach here */\n    // sizeRangeMax not implemented for the mark\n    throw new Error(log.message.incompatibleChannel('size', mark));\n}\n/**\n * @returns {number} Range step of x or y or minimum between the two if both are ordinal scale.\n */\nfunction minXYRangeStep(xyRangeSteps, scaleConfig) {\n    if (xyRangeSteps.length > 0) {\n        let min = Infinity;\n        for (const step of xyRangeSteps) {\n            if (isSignalRef(step)) {\n                min = undefined;\n            }\n            else {\n                if (min !== undefined && step < min) {\n                    min = step;\n                }\n            }\n        }\n        return min !== undefined\n            ? min\n            : new SignalRefWrapper(() => {\n                const exprs = xyRangeSteps.map(e => (isSignalRef(e) ? e.signal : e));\n                return `min(${exprs.join(', ')})`;\n            });\n    }\n    if (scaleConfig.rangeStep) {\n        return scaleConfig.rangeStep;\n    }\n    return 21; // FIXME: re-evaluate the default value here.\n}\n//# sourceMappingURL=range.js.map","import { isBinned, isBinning, isBinParams } from '../../bin';\nimport { COLOR, FILL, STROKE, X, Y } from '../../channel';\nimport { vgField } from '../../fielddef';\nimport * as log from '../../log';\nimport { channelScalePropertyIncompatability, hasContinuousDomain, isContinuousToContinuous, isContinuousToDiscrete, ScaleType, scaleTypeSupportProperty } from '../../scale';\nimport * as util from '../../util';\nimport { contains, getFirstDefined, keys } from '../../util';\nimport { isUnitModel } from '../model';\nimport { mergeValuesWithExplicit, tieBreakByComparing } from '../split';\nimport { SignalRefWrapper } from './../signal';\nimport { parseUnitScaleRange } from './range';\nexport function parseScaleProperty(model, property) {\n    if (isUnitModel(model)) {\n        parseUnitScaleProperty(model, property);\n    }\n    else {\n        parseNonUnitScaleProperty(model, property);\n    }\n}\nfunction parseUnitScaleProperty(model, property) {\n    const localScaleComponents = model.component.scales;\n    keys(localScaleComponents).forEach((channel) => {\n        const specifiedScale = model.specifiedScales[channel];\n        const localScaleCmpt = localScaleComponents[channel];\n        const mergedScaleCmpt = model.getScaleComponent(channel);\n        const fieldDef = model.fieldDef(channel);\n        const config = model.config;\n        const specifiedValue = specifiedScale[property];\n        const sType = mergedScaleCmpt.get('type');\n        const supportedByScaleType = scaleTypeSupportProperty(sType, property);\n        const channelIncompatability = channelScalePropertyIncompatability(channel, property);\n        if (specifiedValue !== undefined) {\n            // If there is a specified value, check if it is compatible with scale type and channel\n            if (!supportedByScaleType) {\n                log.warn(log.message.scalePropertyNotWorkWithScaleType(sType, property, channel));\n            }\n            else if (channelIncompatability) {\n                // channel\n                log.warn(channelIncompatability);\n            }\n        }\n        if (supportedByScaleType && channelIncompatability === undefined) {\n            if (specifiedValue !== undefined) {\n                // copyKeyFromObject ensures type safety\n                localScaleCmpt.copyKeyFromObject(property, specifiedScale);\n            }\n            else {\n                const value = getDefaultValue(property, model, channel, fieldDef, mergedScaleCmpt.get('type'), mergedScaleCmpt.get('padding'), mergedScaleCmpt.get('paddingInner'), specifiedScale.domain, model.markDef, config);\n                if (value !== undefined) {\n                    localScaleCmpt.set(property, value, false);\n                }\n            }\n        }\n    });\n}\n// Note: This method is used in Voyager.\nexport function getDefaultValue(property, model, channel, fieldDef, scaleType, scalePadding, scalePaddingInner, specifiedDomain, markDef, config) {\n    const scaleConfig = config.scale;\n    // If we have default rule-base, determine default value first\n    switch (property) {\n        case 'bins':\n            return bins(model, fieldDef, channel);\n        case 'interpolate':\n            return interpolate(channel);\n        case 'nice':\n            return nice(scaleType, channel, fieldDef);\n        case 'padding':\n            return padding(channel, scaleType, scaleConfig, fieldDef, markDef, config.bar);\n        case 'paddingInner':\n            return paddingInner(scalePadding, channel, markDef.type, scaleConfig);\n        case 'paddingOuter':\n            return paddingOuter(scalePadding, channel, scaleType, markDef.type, scalePaddingInner, scaleConfig);\n        case 'reverse':\n            return reverse(scaleType, fieldDef.sort);\n        case 'zero':\n            return zero(channel, fieldDef, specifiedDomain, markDef, scaleType);\n    }\n    // Otherwise, use scale config\n    return scaleConfig[property];\n}\n// This method is here rather than in range.ts to avoid circular dependency.\nexport function parseScaleRange(model) {\n    if (isUnitModel(model)) {\n        parseUnitScaleRange(model);\n    }\n    else {\n        parseNonUnitScaleProperty(model, 'range');\n    }\n}\nexport function parseNonUnitScaleProperty(model, property) {\n    const localScaleComponents = model.component.scales;\n    for (const child of model.children) {\n        if (property === 'range') {\n            parseScaleRange(child);\n        }\n        else {\n            parseScaleProperty(child, property);\n        }\n    }\n    keys(localScaleComponents).forEach((channel) => {\n        let valueWithExplicit;\n        for (const child of model.children) {\n            const childComponent = child.component.scales[channel];\n            if (childComponent) {\n                const childValueWithExplicit = childComponent.getWithExplicit(property);\n                valueWithExplicit = mergeValuesWithExplicit(valueWithExplicit, childValueWithExplicit, property, 'scale', tieBreakByComparing((v1, v2) => {\n                    switch (property) {\n                        case 'range':\n                            // For range step, prefer larger step\n                            if (v1.step && v2.step) {\n                                return v1.step - v2.step;\n                            }\n                            return 0;\n                        // TODO: precedence rule for other properties\n                    }\n                    return 0;\n                }));\n            }\n        }\n        localScaleComponents[channel].setWithExplicit(property, valueWithExplicit);\n    });\n}\nexport function bins(model, fieldDef, channel) {\n    const bin = fieldDef.bin;\n    if (isBinning(bin)) {\n        return new SignalRefWrapper(() => {\n            return model.getName(vgField(fieldDef, { suffix: 'bins' }));\n        });\n    }\n    else if (isBinned(bin) && isBinParams(bin) && bin.step !== undefined) {\n        // start and stop will be determined from the scale domain\n        return {\n            step: bin.step\n        };\n    }\n    return undefined;\n}\nexport function interpolate(channel) {\n    if (contains([COLOR, FILL, STROKE], channel)) {\n        return 'hcl';\n    }\n    return undefined;\n}\nexport function nice(scaleType, channel, fieldDef) {\n    if (fieldDef.bin || util.contains([ScaleType.TIME, ScaleType.UTC], scaleType)) {\n        return undefined;\n    }\n    return util.contains([X, Y], channel) ? true : undefined;\n}\nexport function padding(channel, scaleType, scaleConfig, fieldDef, markDef, barConfig) {\n    if (util.contains([X, Y], channel)) {\n        if (isContinuousToContinuous(scaleType)) {\n            if (scaleConfig.continuousPadding !== undefined) {\n                return scaleConfig.continuousPadding;\n            }\n            const { type, orient } = markDef;\n            if (type === 'bar' && !fieldDef.bin) {\n                if ((orient === 'vertical' && channel === 'x') || (orient === 'horizontal' && channel === 'y')) {\n                    return barConfig.continuousBandSize;\n                }\n            }\n        }\n        if (scaleType === ScaleType.POINT) {\n            return scaleConfig.pointPadding;\n        }\n    }\n    return undefined;\n}\nexport function paddingInner(paddingValue, channel, mark, scaleConfig) {\n    if (paddingValue !== undefined) {\n        // If user has already manually specified \"padding\", no need to add default paddingInner.\n        return undefined;\n    }\n    if (util.contains([X, Y], channel)) {\n        // Padding is only set for X and Y by default.\n        // Basically it doesn't make sense to add padding for color and size.\n        // paddingOuter would only be called if it's a band scale, just return the default for bandScale.\n        const { bandPaddingInner, barBandPaddingInner, rectBandPaddingInner } = scaleConfig;\n        return getFirstDefined(bandPaddingInner, mark === 'bar' ? barBandPaddingInner : rectBandPaddingInner);\n    }\n    return undefined;\n}\nexport function paddingOuter(paddingValue, channel, scaleType, mark, paddingInnerValue, scaleConfig) {\n    if (paddingValue !== undefined) {\n        // If user has already manually specified \"padding\", no need to add default paddingOuter.\n        return undefined;\n    }\n    if (util.contains([X, Y], channel)) {\n        // Padding is only set for X and Y by default.\n        // Basically it doesn't make sense to add padding for color and size.\n        if (scaleType === ScaleType.BAND) {\n            const { bandPaddingOuter, barBandPaddingOuter, rectBandPaddingOuter } = scaleConfig;\n            return getFirstDefined(bandPaddingOuter, mark === 'bar' ? barBandPaddingOuter : rectBandPaddingOuter, \n            /* By default, paddingOuter is paddingInner / 2. The reason is that\n              size (width/height) = step * (cardinality - paddingInner + 2 * paddingOuter).\n              and we want the width/height to be integer by default.\n              Note that step (by default) and cardinality are integers.) */\n            paddingInnerValue / 2);\n        }\n    }\n    return undefined;\n}\nexport function reverse(scaleType, sort) {\n    if (hasContinuousDomain(scaleType) && sort === 'descending') {\n        // For continuous domain scales, Vega does not support domain sort.\n        // Thus, we reverse range instead if sort is descending\n        return true;\n    }\n    return undefined;\n}\nexport function zero(channel, fieldDef, specifiedScale, markDef, scaleType) {\n    // If users explicitly provide a domain range, we should not augment zero as that will be unexpected.\n    const hasCustomDomain = !!specifiedScale && specifiedScale !== 'unaggregated';\n    if (hasCustomDomain) {\n        return false;\n    }\n    // If there is no custom domain, return true only for the following cases:\n    // 1) using quantitative field with size\n    // While this can be either ratio or interval fields, our assumption is that\n    // ratio are more common. However, if the scaleType is discretizing scale, we want to return\n    // false so that range doesn't start at zero\n    if (channel === 'size' && fieldDef.type === 'quantitative' && !isContinuousToDiscrete(scaleType)) {\n        return true;\n    }\n    // 2) non-binned, quantitative x-scale or y-scale\n    // (For binning, we should not include zero by default because binning are calculated without zero.)\n    if (!fieldDef.bin && util.contains([X, Y], channel)) {\n        const { orient, type } = markDef;\n        if (contains(['bar', 'area', 'line', 'trail'], type)) {\n            if ((orient === 'horizontal' && channel === 'y') || (orient === 'vertical' && channel === 'x')) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=properties.js.map","import { isBinning } from '../../bin';\nimport { isColorChannel, isScaleChannel, rangeType } from '../../channel';\nimport * as log from '../../log';\nimport { channelSupportScaleType, scaleTypeSupportDataType } from '../../scale';\nimport * as util from '../../util';\n/**\n * Determine if there is a specified scale type and if it is appropriate,\n * or determine default type if type is unspecified or inappropriate.\n */\n// NOTE: CompassQL uses this method.\nexport function scaleType(specifiedScale, channel, fieldDef, mark, scaleConfig) {\n    const defaultScaleType = defaultType(channel, fieldDef, mark, specifiedScale, scaleConfig);\n    const { type } = specifiedScale;\n    if (!isScaleChannel(channel)) {\n        // There is no scale for these channels\n        return null;\n    }\n    if (type !== undefined) {\n        // Check if explicitly specified scale type is supported by the channel\n        if (!channelSupportScaleType(channel, type)) {\n            log.warn(log.message.scaleTypeNotWorkWithChannel(channel, type, defaultScaleType));\n            return defaultScaleType;\n        }\n        // Check if explicitly specified scale type is supported by the data type\n        if (!scaleTypeSupportDataType(type, fieldDef.type)) {\n            log.warn(log.message.scaleTypeNotWorkWithFieldDef(type, defaultScaleType));\n            return defaultScaleType;\n        }\n        return type;\n    }\n    return defaultScaleType;\n}\n/**\n * Determine appropriate default scale type.\n */\n// NOTE: Voyager uses this method.\nfunction defaultType(channel, fieldDef, mark, specifiedScale, scaleConfig) {\n    switch (fieldDef.type) {\n        case 'nominal':\n        case 'ordinal':\n            if (isColorChannel(channel) || rangeType(channel) === 'discrete') {\n                if (channel === 'shape' && fieldDef.type === 'ordinal') {\n                    log.warn(log.message.discreteChannelCannotEncode(channel, 'ordinal'));\n                }\n                return 'ordinal';\n            }\n            if (util.contains(['x', 'y'], channel)) {\n                if (util.contains(['rect', 'bar', 'rule'], mark)) {\n                    // The rect/bar mark should fit into a band.\n                    // For rule, using band scale to make rule align with axis ticks better https://github.com/vega/vega-lite/issues/3429\n                    return 'band';\n                }\n                if (mark === 'bar') {\n                    return 'band';\n                }\n            }\n            // Otherwise, use ordinal point scale so we can easily get center positions of the marks.\n            return 'point';\n        case 'temporal':\n            if (isColorChannel(channel)) {\n                return 'time';\n            }\n            else if (rangeType(channel) === 'discrete') {\n                log.warn(log.message.discreteChannelCannotEncode(channel, 'temporal'));\n                // TODO: consider using quantize (equivalent to binning) once we have it\n                return 'ordinal';\n            }\n            return 'time';\n        case 'quantitative':\n            if (isColorChannel(channel)) {\n                if (isBinning(fieldDef.bin)) {\n                    return 'bin-ordinal';\n                }\n                return 'linear';\n            }\n            else if (rangeType(channel) === 'discrete') {\n                log.warn(log.message.discreteChannelCannotEncode(channel, 'quantitative'));\n                // TODO: consider using quantize (equivalent to binning) once we have it\n                return 'ordinal';\n            }\n            return 'linear';\n        case 'geojson':\n            return undefined;\n    }\n    /* istanbul ignore next: should never reach this */\n    throw new Error(log.message.invalidFieldType(fieldDef.type));\n}\n//# sourceMappingURL=type.js.map","import { SCALE_CHANNELS, SHAPE } from '../../channel';\nimport { hasConditionalFieldDef, isFieldDef } from '../../fielddef';\nimport { GEOSHAPE } from '../../mark';\nimport { NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES, scaleCompatible, scaleTypePrecedence } from '../../scale';\nimport { GEOJSON } from '../../type';\nimport { keys } from '../../util';\nimport { isUnitModel } from '../model';\nimport { defaultScaleResolve } from '../resolve';\nimport { mergeValuesWithExplicit, tieBreakByComparing } from '../split';\nimport { ScaleComponent } from './component';\nimport { parseScaleDomain } from './domain';\nimport { parseScaleProperty, parseScaleRange } from './properties';\nimport { scaleType } from './type';\nexport function parseScale(model) {\n    parseScaleCore(model);\n    parseScaleDomain(model);\n    for (const prop of NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES) {\n        parseScaleProperty(model, prop);\n    }\n    // range depends on zero\n    parseScaleRange(model);\n}\nexport function parseScaleCore(model) {\n    if (isUnitModel(model)) {\n        model.component.scales = parseUnitScaleCore(model);\n    }\n    else {\n        model.component.scales = parseNonUnitScaleCore(model);\n    }\n}\n/**\n * Parse scales for all channels of a model.\n */\nfunction parseUnitScaleCore(model) {\n    const { encoding, config, mark } = model;\n    return SCALE_CHANNELS.reduce((scaleComponents, channel) => {\n        let fieldDef;\n        let specifiedScale;\n        const channelDef = encoding[channel];\n        // Don't generate scale for shape of geoshape\n        if (isFieldDef(channelDef) && mark === GEOSHAPE && channel === SHAPE && channelDef.type === GEOJSON) {\n            return scaleComponents;\n        }\n        if (isFieldDef(channelDef)) {\n            fieldDef = channelDef;\n            specifiedScale = channelDef.scale;\n        }\n        else if (hasConditionalFieldDef(channelDef)) {\n            fieldDef = channelDef.condition;\n            specifiedScale = channelDef.condition['scale']; // We use ['scale'] since we know that channel here has scale for sure\n        }\n        if (fieldDef && specifiedScale !== null && specifiedScale !== false) {\n            specifiedScale = specifiedScale || {};\n            const sType = scaleType(specifiedScale, channel, fieldDef, mark, config.scale);\n            scaleComponents[channel] = new ScaleComponent(model.scaleName(channel + '', true), {\n                value: sType,\n                explicit: specifiedScale.type === sType\n            });\n        }\n        return scaleComponents;\n    }, {});\n}\nconst scaleTypeTieBreaker = tieBreakByComparing((st1, st2) => scaleTypePrecedence(st1) - scaleTypePrecedence(st2));\nfunction parseNonUnitScaleCore(model) {\n    const scaleComponents = (model.component.scales = {});\n    const scaleTypeWithExplicitIndex = {};\n    const resolve = model.component.resolve;\n    // Parse each child scale and determine if a particular channel can be merged.\n    for (const child of model.children) {\n        parseScaleCore(child);\n        // Instead of always merging right away -- check if it is compatible to merge first!\n        keys(child.component.scales).forEach((channel) => {\n            // if resolve is undefined, set default first\n            resolve.scale[channel] = resolve.scale[channel] || defaultScaleResolve(channel, model);\n            if (resolve.scale[channel] === 'shared') {\n                const explicitScaleType = scaleTypeWithExplicitIndex[channel];\n                const childScaleType = child.component.scales[channel].getWithExplicit('type');\n                if (explicitScaleType) {\n                    if (scaleCompatible(explicitScaleType.value, childScaleType.value)) {\n                        // merge scale component if type are compatible\n                        scaleTypeWithExplicitIndex[channel] = mergeValuesWithExplicit(explicitScaleType, childScaleType, 'type', 'scale', scaleTypeTieBreaker);\n                    }\n                    else {\n                        // Otherwise, update conflicting channel to be independent\n                        resolve.scale[channel] = 'independent';\n                        // Remove from the index so they don't get merged\n                        delete scaleTypeWithExplicitIndex[channel];\n                    }\n                }\n                else {\n                    scaleTypeWithExplicitIndex[channel] = childScaleType;\n                }\n            }\n        });\n    }\n    // Merge each channel listed in the index\n    keys(scaleTypeWithExplicitIndex).forEach((channel) => {\n        // Create new merged scale component\n        const name = model.scaleName(channel, true);\n        const typeWithExplicit = scaleTypeWithExplicitIndex[channel];\n        scaleComponents[channel] = new ScaleComponent(name, typeWithExplicit);\n        // rename each child and mark them as merged\n        for (const child of model.children) {\n            const childScale = child.component.scales[channel];\n            if (childScale) {\n                child.renameScale(childScale.get('name'), name);\n                childScale.merged = true;\n            }\n        }\n    });\n    return scaleComponents;\n}\n//# sourceMappingURL=parse.js.map","import * as tslib_1 from \"tslib\";\nimport { isNumber, isString } from 'vega-util';\nimport { isChannel, isScaleChannel } from '../channel';\nimport { forEach, reduce } from '../encoding';\nimport { getFieldDef, vgField } from '../fielddef';\nimport * as log from '../log';\nimport { hasDiscreteDomain } from '../scale';\nimport { isFacetSpec, isLayerSpec, isUnitSpec } from '../spec';\nimport { DEFAULT_SPACING, extractCompositionLayout } from '../spec/base';\nimport { extractTitleConfig } from '../title';\nimport { normalizeTransform } from '../transform';\nimport { contains, duplicate, keys, varName } from '../util';\nimport { isVgRangeStep } from '../vega.schema';\nimport { assembleAxes } from './axis/assemble';\nimport { assembleHeaderGroups, assembleTitleGroup, HEADER_CHANNELS } from './header/index';\nimport { sizeExpr } from './layoutsize/assemble';\nimport { assembleLegends } from './legend/assemble';\nimport { parseLegend } from './legend/parse';\nimport { assembleProjections } from './projection/assemble';\nimport { parseProjection } from './projection/parse';\nimport { assembleScales } from './scale/assemble';\nimport { assembleDomain, getFieldFromDomain } from './scale/domain';\nimport { parseScale } from './scale/parse';\nimport { Split } from './split';\nexport class NameMap {\n    constructor() {\n        this.nameMap = {};\n    }\n    rename(oldName, newName) {\n        this.nameMap[oldName] = newName;\n    }\n    has(name) {\n        return this.nameMap[name] !== undefined;\n    }\n    get(name) {\n        // If the name appears in the _nameMap, we need to read its new name.\n        // We have to loop over the dict just in case the new name also gets renamed.\n        while (this.nameMap[name] && name !== this.nameMap[name]) {\n            name = this.nameMap[name];\n        }\n        return name;\n    }\n}\n/*\n  We use type guards instead of `instanceof` as `instanceof` makes\n  different parts of the compiler depend on the actual implementation of\n  the model classes, which in turn depend on different parts of the compiler.\n  Thus, `instanceof` leads to circular dependency problems.\n\n  On the other hand, type guards only make different parts of the compiler\n  depend on the type of the model classes, but not the actual implementation.\n*/\nexport function isUnitModel(model) {\n    return model && model.type === 'unit';\n}\nexport function isFacetModel(model) {\n    return model && model.type === 'facet';\n}\nexport function isRepeatModel(model) {\n    return model && model.type === 'repeat';\n}\nexport function isConcatModel(model) {\n    return model && model.type === 'concat';\n}\nexport function isLayerModel(model) {\n    return model && model.type === 'layer';\n}\nexport class Model {\n    constructor(spec, parent, parentGivenName, config, repeater, resolve, view) {\n        this.parent = parent;\n        this.config = config;\n        this.repeater = repeater;\n        this.view = view;\n        this.children = [];\n        /**\n         * Corrects the data references in marks after assemble.\n         */\n        this.correctDataNames = (mark) => {\n            // TODO: make this correct\n            // for normal data references\n            if (mark.from && mark.from.data) {\n                mark.from.data = this.lookupDataSource(mark.from.data);\n            }\n            // for access to facet data\n            if (mark.from && mark.from.facet && mark.from.facet.data) {\n                mark.from.facet.data = this.lookupDataSource(mark.from.facet.data);\n            }\n            return mark;\n        };\n        this.parent = parent;\n        this.config = config;\n        this.repeater = repeater;\n        // If name is not provided, always use parent's givenName to avoid name conflicts.\n        this.name = spec.name || parentGivenName;\n        this.title = isString(spec.title) ? { text: spec.title } : spec.title;\n        // Shared name maps\n        this.scaleNameMap = parent ? parent.scaleNameMap : new NameMap();\n        this.projectionNameMap = parent ? parent.projectionNameMap : new NameMap();\n        this.signalNameMap = parent ? parent.signalNameMap : new NameMap();\n        this.data = spec.data;\n        this.description = spec.description;\n        this.transforms = normalizeTransform(spec.transform || []);\n        this.layout =\n            isUnitSpec(spec) || isLayerSpec(spec) ? undefined : extractCompositionLayout(spec);\n        this.component = {\n            data: {\n                sources: parent ? parent.component.data.sources : [],\n                outputNodes: parent ? parent.component.data.outputNodes : {},\n                outputNodeRefCounts: parent ? parent.component.data.outputNodeRefCounts : {},\n                // data is faceted if the spec is a facet spec or the parent has faceted data and no data is defined\n                isFaceted: isFacetSpec(spec) || (parent && parent.component.data.isFaceted && !spec.data)\n            },\n            layoutSize: new Split(),\n            layoutHeaders: { row: {}, column: {} },\n            mark: null,\n            resolve: Object.assign({ scale: {}, axis: {}, legend: {} }, (resolve ? duplicate(resolve) : {})),\n            selection: null,\n            scales: null,\n            projection: null,\n            axes: {},\n            legends: {}\n        };\n    }\n    get width() {\n        return this.getSizeSignalRef('width');\n    }\n    get height() {\n        return this.getSizeSignalRef('height');\n    }\n    initSize(size) {\n        const { width, height } = size;\n        if (width) {\n            this.component.layoutSize.set('width', width, true);\n        }\n        if (height) {\n            this.component.layoutSize.set('height', height, true);\n        }\n    }\n    parse() {\n        this.parseScale();\n        this.parseLayoutSize(); // depends on scale\n        this.renameTopLevelLayoutSizeSignal();\n        this.parseSelection();\n        this.parseProjection();\n        this.parseData(); // (pathorder) depends on markDef; selection filters depend on parsed selections; depends on projection because some transforms require the finalized projection name.\n        this.parseAxisAndHeader(); // depends on scale and layout size\n        this.parseLegend(); // depends on scale, markDef\n        this.parseMarkGroup(); // depends on data name, scale, layout size, axisGroup, and children's scale, axis, legend and mark.\n    }\n    parseScale() {\n        parseScale(this);\n    }\n    parseProjection() {\n        parseProjection(this);\n    }\n    /**\n     * Rename top-level spec's size to be just width / height, ignoring model name.\n     * This essentially merges the top-level spec's width/height signals with the width/height signals\n     * to help us reduce redundant signals declaration.\n     */\n    renameTopLevelLayoutSizeSignal() {\n        if (this.getName('width') !== 'width') {\n            this.renameSignal(this.getName('width'), 'width');\n        }\n        if (this.getName('height') !== 'height') {\n            this.renameSignal(this.getName('height'), 'height');\n        }\n    }\n    parseLegend() {\n        parseLegend(this);\n    }\n    assembleGroupStyle() {\n        if (this.type === 'unit' || this.type === 'layer') {\n            return (this.view && this.view.style) || 'cell';\n        }\n        return undefined;\n    }\n    assembleEncodeFromView(view) {\n        // Exclude \"style\"\n        const { style: _ } = view, baseView = tslib_1.__rest(view, [\"style\"]);\n        const e = {};\n        for (const property in baseView) {\n            if (baseView.hasOwnProperty(property)) {\n                const value = baseView[property];\n                if (value !== undefined) {\n                    e[property] = { value };\n                }\n            }\n        }\n        return e;\n    }\n    assembleGroupEncodeEntry(isTopLevel) {\n        let encodeEntry = undefined;\n        if (this.view) {\n            encodeEntry = this.assembleEncodeFromView(this.view);\n        }\n        if (!isTopLevel) {\n            // For top-level spec, we can set the global width and height signal to adjust the group size.\n            // For other child specs, we have to manually set width and height in the encode entry.\n            if (this.type === 'unit' || this.type === 'layer') {\n                return Object.assign({ width: this.getSizeSignalRef('width'), height: this.getSizeSignalRef('height') }, (encodeEntry || {}));\n            }\n        }\n        return encodeEntry;\n    }\n    assembleLayout() {\n        if (!this.layout) {\n            return undefined;\n        }\n        const { align, bounds, center, spacing = {} } = this.layout;\n        return Object.assign({ padding: isNumber(spacing)\n                ? spacing\n                : {\n                    row: spacing.row || DEFAULT_SPACING,\n                    column: spacing.column || DEFAULT_SPACING\n                } }, this.assembleDefaultLayout(), (align ? { align } : {}), (bounds ? { bounds } : {}), (center ? { center } : {}));\n    }\n    assembleDefaultLayout() {\n        return {};\n    }\n    assembleHeaderMarks() {\n        const { layoutHeaders } = this.component;\n        let headerMarks = [];\n        for (const channel of HEADER_CHANNELS) {\n            if (layoutHeaders[channel].title) {\n                headerMarks.push(assembleTitleGroup(this, channel));\n            }\n        }\n        for (const channel of HEADER_CHANNELS) {\n            headerMarks = headerMarks.concat(assembleHeaderGroups(this, channel));\n        }\n        return headerMarks;\n    }\n    assembleAxes() {\n        return assembleAxes(this.component.axes, this.config);\n    }\n    assembleLegends() {\n        return assembleLegends(this);\n    }\n    assembleProjections() {\n        return assembleProjections(this);\n    }\n    assembleTitle() {\n        const _a = this.title || {}, { encoding } = _a, titleNoEncoding = tslib_1.__rest(_a, [\"encoding\"]);\n        const title = Object.assign({}, extractTitleConfig(this.config.title).nonMark, titleNoEncoding, (encoding ? { encode: { update: encoding } } : {}));\n        if (title.text) {\n            if (!contains(['unit', 'layer'], this.type)) {\n                // As described in https://github.com/vega/vega-lite/issues/2875:\n                // Due to vega/vega#960 (comment), we only support title's anchor for unit and layered spec for now.\n                if (title.anchor && title.anchor !== 'start') {\n                    log.warn(log.message.cannotSetTitleAnchor(this.type));\n                }\n                title.anchor = 'start';\n            }\n            if (contains(['middle', undefined], title.anchor) && title.frame === undefined) {\n                title.frame = 'group';\n            }\n            return keys(title).length > 0 ? title : undefined;\n        }\n        return undefined;\n    }\n    /**\n     * Assemble the mark group for this model.  We accept optional `signals` so that we can include concat top-level signals with the top-level model's local signals.\n     */\n    assembleGroup(signals = []) {\n        const group = {};\n        signals = signals.concat(this.assembleSelectionSignals());\n        if (signals.length > 0) {\n            group.signals = signals;\n        }\n        const layout = this.assembleLayout();\n        if (layout) {\n            group.layout = layout;\n        }\n        group.marks = [].concat(this.assembleHeaderMarks(), this.assembleMarks());\n        // Only include scales if this spec is top-level or if parent is facet.\n        // (Otherwise, it will be merged with upper-level's scope.)\n        const scales = !this.parent || isFacetModel(this.parent) ? assembleScales(this) : [];\n        if (scales.length > 0) {\n            group.scales = scales;\n        }\n        const axes = this.assembleAxes();\n        if (axes.length > 0) {\n            group.axes = axes;\n        }\n        const legends = this.assembleLegends();\n        if (legends.length > 0) {\n            group.legends = legends;\n        }\n        return group;\n    }\n    hasDescendantWithFieldOnChannel(channel) {\n        for (const child of this.children) {\n            if (isUnitModel(child)) {\n                if (child.channelHasField(channel)) {\n                    return true;\n                }\n            }\n            else {\n                if (child.hasDescendantWithFieldOnChannel(channel)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    getName(text) {\n        return varName((this.name ? this.name + '_' : '') + text);\n    }\n    /**\n     * Request a data source name for the given data source type and mark that data source as required. This method should be called in parse, so that all used data source can be correctly instantiated in assembleData().\n     */\n    requestDataName(name) {\n        const fullName = this.getName(name);\n        // Increase ref count. This is critical because otherwise we won't create a data source.\n        // We also increase the ref counts on OutputNode.getSource() calls.\n        const refCounts = this.component.data.outputNodeRefCounts;\n        refCounts[fullName] = (refCounts[fullName] || 0) + 1;\n        return fullName;\n    }\n    getSizeSignalRef(sizeType) {\n        if (isFacetModel(this.parent)) {\n            const channel = sizeType === 'width' ? 'x' : 'y';\n            const scaleComponent = this.component.scales[channel];\n            if (scaleComponent && !scaleComponent.merged) {\n                // independent scale\n                const type = scaleComponent.get('type');\n                const range = scaleComponent.get('range');\n                if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n                    const scaleName = scaleComponent.get('name');\n                    const domain = assembleDomain(this, channel);\n                    const field = getFieldFromDomain(domain);\n                    if (field) {\n                        const fieldRef = vgField({ aggregate: 'distinct', field }, { expr: 'datum' });\n                        return {\n                            signal: sizeExpr(scaleName, scaleComponent, fieldRef)\n                        };\n                    }\n                    else {\n                        log.warn('Unknown field for ${channel}.  Cannot calculate view size.');\n                        return null;\n                    }\n                }\n            }\n        }\n        return {\n            signal: this.signalNameMap.get(this.getName(sizeType))\n        };\n    }\n    /**\n     * Lookup the name of the datasource for an output node. You probably want to call this in assemble.\n     */\n    lookupDataSource(name) {\n        const node = this.component.data.outputNodes[name];\n        if (!node) {\n            // Name not found in map so let's just return what we got.\n            // This can happen if we already have the correct name.\n            return name;\n        }\n        return node.getSource();\n    }\n    getSignalName(oldSignalName) {\n        return this.signalNameMap.get(oldSignalName);\n    }\n    renameSignal(oldName, newName) {\n        this.signalNameMap.rename(oldName, newName);\n    }\n    renameScale(oldName, newName) {\n        this.scaleNameMap.rename(oldName, newName);\n    }\n    renameProjection(oldName, newName) {\n        this.projectionNameMap.rename(oldName, newName);\n    }\n    /**\n     * @return scale name for a given channel after the scale has been parsed and named.\n     */\n    scaleName(originalScaleName, parse) {\n        if (parse) {\n            // During the parse phase always return a value\n            // No need to refer to rename map because a scale can't be renamed\n            // before it has the original name.\n            return this.getName(originalScaleName);\n        }\n        // If there is a scale for the channel, it should either\n        // be in the scale component or exist in the name map\n        if (\n        // If there is a scale for the channel, there should be a local scale component for it\n        (isChannel(originalScaleName) && isScaleChannel(originalScaleName) && this.component.scales[originalScaleName]) ||\n            // in the scale name map (the scale get merged by its parent)\n            this.scaleNameMap.has(this.getName(originalScaleName))) {\n            return this.scaleNameMap.get(this.getName(originalScaleName));\n        }\n        return undefined;\n    }\n    /**\n     * @return projection name after the projection has been parsed and named.\n     */\n    projectionName(parse) {\n        if (parse) {\n            // During the parse phase always return a value\n            // No need to refer to rename map because a projection can't be renamed\n            // before it has the original name.\n            return this.getName('projection');\n        }\n        if ((this.component.projection && !this.component.projection.merged) ||\n            this.projectionNameMap.has(this.getName('projection'))) {\n            return this.projectionNameMap.get(this.getName('projection'));\n        }\n        return undefined;\n    }\n    /**\n     * Traverse a model's hierarchy to get the scale component for a particular channel.\n     */\n    getScaleComponent(channel) {\n        /* istanbul ignore next: This is warning for debugging test */\n        if (!this.component.scales) {\n            throw new Error('getScaleComponent cannot be called before parseScale().  Make sure you have called parseScale or use parseUnitModelWithScale().');\n        }\n        const localScaleComponent = this.component.scales[channel];\n        if (localScaleComponent && !localScaleComponent.merged) {\n            return localScaleComponent;\n        }\n        return this.parent ? this.parent.getScaleComponent(channel) : undefined;\n    }\n    /**\n     * Traverse a model's hierarchy to get a particular selection component.\n     */\n    getSelectionComponent(variableName, origName) {\n        let sel = this.component.selection[variableName];\n        if (!sel && this.parent) {\n            sel = this.parent.getSelectionComponent(variableName, origName);\n        }\n        if (!sel) {\n            throw new Error(log.message.selectionNotFound(origName));\n        }\n        return sel;\n    }\n}\n/** Abstract class for UnitModel and FacetModel.  Both of which can contain fieldDefs as a part of its own specification. */\nexport class ModelWithField extends Model {\n    /** Get \"field\" reference for Vega */\n    vgField(channel, opt = {}) {\n        const fieldDef = this.fieldDef(channel);\n        if (!fieldDef) {\n            return undefined;\n        }\n        return vgField(fieldDef, opt);\n    }\n    reduceFieldDef(f, init, t) {\n        return reduce(this.getMapping(), (acc, cd, c) => {\n            const fieldDef = getFieldDef(cd);\n            if (fieldDef) {\n                return f(acc, fieldDef, c);\n            }\n            return acc;\n        }, init, t);\n    }\n    forEachFieldDef(f, t) {\n        forEach(this.getMapping(), (cd, c) => {\n            const fieldDef = getFieldDef(cd);\n            if (fieldDef) {\n                f(fieldDef, c);\n            }\n        }, t);\n    }\n}\n//# sourceMappingURL=model.js.map","import { isString } from 'vega-util';\nimport { binToString, isBinning } from '../../bin';\nimport { binRequiresRange, isTypedFieldDef, normalizeBin, vgField } from '../../fielddef';\nimport { duplicate, flatten, hash, keys, vals } from '../../util';\nimport { binFormatExpression } from '../common';\nimport { isUnitModel } from '../model';\nimport { DataFlowNode } from './dataflow';\nfunction rangeFormula(model, fieldDef, channel, config) {\n    if (binRequiresRange(fieldDef, channel)) {\n        // read format from axis or legend, if there is no format then use config.numberFormat\n        const guide = isUnitModel(model) ? model.axis(channel) || model.legend(channel) || {} : {};\n        const startField = vgField(fieldDef, { expr: 'datum' });\n        const endField = vgField(fieldDef, { expr: 'datum', binSuffix: 'end' });\n        return {\n            formulaAs: vgField(fieldDef, { binSuffix: 'range', forAs: true }),\n            formula: binFormatExpression(startField, endField, guide.format, config)\n        };\n    }\n    return {};\n}\nfunction binKey(bin, field) {\n    return `${binToString(bin)}_${field}`;\n}\nfunction getSignalsFromModel(model, key) {\n    return {\n        signal: model.getName(`${key}_bins`),\n        extentSignal: model.getName(`${key}_extent`)\n    };\n}\nfunction isBinTransform(t) {\n    return 'as' in t;\n}\nfunction createBinComponent(t, bin, model) {\n    let as;\n    if (isBinTransform(t)) {\n        as = isString(t.as) ? [t.as, `${t.as}_end`] : [t.as[0], t.as[1]];\n    }\n    else {\n        as = [vgField(t, { forAs: true }), vgField(t, { binSuffix: 'end', forAs: true })];\n    }\n    const normalizedBin = normalizeBin(bin, undefined) || {};\n    const key = binKey(normalizedBin, t.field);\n    const { signal, extentSignal } = getSignalsFromModel(model, key);\n    const binComponent = Object.assign({ bin: normalizedBin, field: t.field, as: as }, (signal ? { signal } : {}), (extentSignal ? { extentSignal } : {}));\n    return { key, binComponent };\n}\nexport class BinNode extends DataFlowNode {\n    constructor(parent, bins) {\n        super(parent);\n        this.bins = bins;\n    }\n    clone() {\n        return new BinNode(null, duplicate(this.bins));\n    }\n    static makeFromEncoding(parent, model) {\n        const bins = model.reduceFieldDef((binComponentIndex, fieldDef, channel) => {\n            if (isTypedFieldDef(fieldDef) && isBinning(fieldDef.bin)) {\n                const { key, binComponent } = createBinComponent(fieldDef, fieldDef.bin, model);\n                binComponentIndex[key] = Object.assign({}, binComponent, binComponentIndex[key], rangeFormula(model, fieldDef, channel, model.config));\n            }\n            return binComponentIndex;\n        }, {});\n        if (keys(bins).length === 0) {\n            return null;\n        }\n        return new BinNode(parent, bins);\n    }\n    /**\n     * Creates a bin node from BinTransform.\n     * The optional parameter should provide\n     */\n    static makeFromTransform(parent, t, model) {\n        const { key, binComponent } = createBinComponent(t, t.bin, model);\n        return new BinNode(parent, {\n            [key]: binComponent\n        });\n    }\n    merge(other) {\n        this.bins = Object.assign({}, this.bins, other.bins);\n        other.remove();\n    }\n    producedFields() {\n        return new Set(flatten(vals(this.bins).map(c => c.as)));\n    }\n    dependentFields() {\n        return new Set(vals(this.bins).map(c => c.field));\n    }\n    hash() {\n        return `Bin ${hash(this.bins)}`;\n    }\n    assemble() {\n        return flatten(vals(this.bins).map(bin => {\n            const transform = [];\n            const binTrans = Object.assign({ type: 'bin', field: bin.field, as: bin.as, signal: bin.signal }, bin.bin);\n            if (!bin.bin.extent && bin.extentSignal) {\n                transform.push({\n                    type: 'extent',\n                    field: bin.field,\n                    signal: bin.extentSignal\n                });\n                binTrans.extent = { signal: bin.extentSignal };\n            }\n            transform.push(binTrans);\n            if (bin.formula) {\n                transform.push({\n                    type: 'formula',\n                    expr: bin.formula,\n                    as: bin.formulaAs\n                });\n            }\n            return transform;\n        }));\n    }\n}\n//# sourceMappingURL=bin.js.map","import { duplicate } from '../../util';\nimport { expression } from '../predicate';\nimport { DataFlowNode } from './dataflow';\nimport { getDependentFields } from './expressions';\nexport class FilterNode extends DataFlowNode {\n    constructor(parent, model, filter) {\n        super(parent);\n        this.model = model;\n        this.filter = filter;\n        // TODO: refactor this to not take a node and\n        // then add a static function makeFromOperand and make the constructor take only an expression\n        this.expr = expression(this.model, this.filter, this);\n        this._dependentFields = getDependentFields(this.expr);\n    }\n    clone() {\n        return new FilterNode(null, this.model, duplicate(this.filter));\n    }\n    dependentFields() {\n        return this._dependentFields;\n    }\n    assemble() {\n        return {\n            type: 'filter',\n            expr: this.expr\n        };\n    }\n    hash() {\n        return `Filter ${this.expr}`;\n    }\n}\n//# sourceMappingURL=filter.js.map","import { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for flatten transform nodes\n */\nexport class FlattenTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n        this.transform = duplicate(transform); // duplicate to prevent side effects\n        const { flatten, as = [] } = this.transform;\n        this.transform.as = flatten.map((f, i) => as[i] || f);\n    }\n    clone() {\n        return new FlattenTransformNode(this.parent, duplicate(this.transform));\n    }\n    producedFields() {\n        return new Set(this.transform.as);\n    }\n    hash() {\n        return `FlattenTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const { flatten: fields, as } = this.transform;\n        const result = {\n            type: 'flatten',\n            fields,\n            as\n        };\n        return result;\n    }\n}\n//# sourceMappingURL=flatten.js.map","import { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for flatten transform nodes\n */\nexport class FoldTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n        this.transform = duplicate(transform); // duplicate to prevent side effects\n        const specifiedAs = this.transform.as || [undefined, undefined];\n        this.transform.as = [specifiedAs[0] || 'key', specifiedAs[1] || 'value'];\n    }\n    clone() {\n        return new FoldTransformNode(null, duplicate(this.transform));\n    }\n    producedFields() {\n        return new Set(this.transform.as);\n    }\n    hash() {\n        return `FoldTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const { fold, as } = this.transform;\n        const result = {\n            type: 'fold',\n            fields: fold,\n            as\n        };\n        return result;\n    }\n}\n//# sourceMappingURL=fold.js.map","import { LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, SHAPE } from '../../channel';\nimport { GEOJSON } from '../../type';\nimport { duplicate } from '../../util';\nimport { DataFlowNode } from './dataflow';\nexport class GeoJSONNode extends DataFlowNode {\n    constructor(parent, fields, geojson, signal) {\n        super(parent);\n        this.fields = fields;\n        this.geojson = geojson;\n        this.signal = signal;\n    }\n    clone() {\n        return new GeoJSONNode(null, duplicate(this.fields), this.geojson, this.signal);\n    }\n    static parseAll(parent, model) {\n        let geoJsonCounter = 0;\n        [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]].forEach((coordinates) => {\n            const pair = coordinates.map(channel => model.channelHasField(channel) ? model.fieldDef(channel).field : undefined);\n            if (pair[0] || pair[1]) {\n                parent = new GeoJSONNode(parent, pair, null, model.getName(`geojson_${geoJsonCounter++}`));\n            }\n        });\n        if (model.channelHasField(SHAPE)) {\n            const fieldDef = model.fieldDef(SHAPE);\n            if (fieldDef.type === GEOJSON) {\n                parent = new GeoJSONNode(parent, null, fieldDef.field, model.getName(`geojson_${geoJsonCounter++}`));\n            }\n        }\n        return parent;\n    }\n    assemble() {\n        return Object.assign({ type: 'geojson' }, (this.fields ? { fields: this.fields } : {}), (this.geojson ? { geojson: this.geojson } : {}), { signal: this.signal });\n    }\n}\n//# sourceMappingURL=geojson.js.map","import { LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2 } from '../../channel';\nimport { duplicate } from '../../util';\nimport { DataFlowNode } from './dataflow';\nexport class GeoPointNode extends DataFlowNode {\n    constructor(parent, projection, fields, as) {\n        super(parent);\n        this.projection = projection;\n        this.fields = fields;\n        this.as = as;\n    }\n    clone() {\n        return new GeoPointNode(null, this.projection, duplicate(this.fields), duplicate(this.as));\n    }\n    static parseAll(parent, model) {\n        if (!model.projectionName()) {\n            return parent;\n        }\n        [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]].forEach((coordinates) => {\n            const pair = coordinates.map(channel => model.channelHasField(channel) ? model.fieldDef(channel).field : undefined);\n            const suffix = coordinates[0] === LONGITUDE2 ? '2' : '';\n            if (pair[0] || pair[1]) {\n                parent = new GeoPointNode(parent, model.projectionName(), pair, [\n                    model.getName('x' + suffix),\n                    model.getName('y' + suffix)\n                ]);\n            }\n        });\n        return parent;\n    }\n    assemble() {\n        return {\n            type: 'geopoint',\n            projection: this.projection,\n            fields: this.fields,\n            as: this.as\n        };\n    }\n}\n//# sourceMappingURL=geopoint.js.map","import { SELECTION_ID } from '../../selection';\nimport { DataFlowNode } from './dataflow';\nexport class IdentifierNode extends DataFlowNode {\n    clone() {\n        return new IdentifierNode(null);\n    }\n    constructor(parent) {\n        super(parent);\n    }\n    producedFields() {\n        return new Set([SELECTION_ID]);\n    }\n    assemble() {\n        return { type: 'identifier', as: SELECTION_ID };\n    }\n}\n//# sourceMappingURL=identifier.js.map","import { isNumber } from 'vega-util';\nimport { isBinned, isBinning } from '../../bin';\nimport { X, Y } from '../../channel';\nimport { isFieldDef } from '../../fielddef';\nimport * as log from '../../log';\nimport { hasDiscreteDomain, ScaleType } from '../../scale';\nimport { getFirstDefined } from '../../util';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { getMarkConfig } from '../common';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\nexport const bar = {\n    vgMark: 'rect',\n    encodeEntry: (model) => {\n        return Object.assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), x(model), y(model));\n    }\n};\nfunction x(model) {\n    const { config, encoding, markDef, width } = model;\n    const orient = markDef.orient;\n    const sizeDef = encoding.size;\n    const xDef = encoding.x;\n    const x2Def = encoding.x2;\n    const xScaleName = model.scaleName(X);\n    const xScale = model.getScaleComponent(X);\n    // x, x2, and width -- we must specify two of these in all conditions\n    if (isFieldDef(xDef) && isBinned(xDef.bin)) {\n        return mixins.binPosition(xDef, x2Def, X, xScaleName, getFirstDefined(markDef.binSpacing, config.bar.binSpacing), xScale.get('reverse'));\n    }\n    else if (orient === 'horizontal' || x2Def) {\n        return Object.assign({}, mixins.pointPosition('x', model, 'zeroOrMin'), mixins.pointPosition2(model, 'zeroOrMin', 'x2'));\n    }\n    else {\n        // vertical\n        if (isFieldDef(xDef)) {\n            const xScaleType = xScale.get('type');\n            if (isBinning(xDef.bin) && !sizeDef && !hasDiscreteDomain(xScaleType)) {\n                return mixins.binPosition(xDef, undefined, X, model.scaleName('x'), getFirstDefined(markDef.binSpacing, config.bar.binSpacing), xScale.get('reverse'));\n            }\n            else {\n                if (xScaleType === ScaleType.BAND) {\n                    return mixins.bandPosition(xDef, 'x', model);\n                }\n            }\n        }\n        // sized bin, normal point-ordinal axis, quantitative x-axis, or no x\n        return mixins.centeredBandPosition('x', model, Object.assign({}, ref.mid(width)), defaultSizeRef(markDef, xScaleName, xScale, config));\n    }\n}\nfunction y(model) {\n    const { config, encoding, height, markDef } = model;\n    const orient = markDef.orient;\n    const sizeDef = encoding.size;\n    const yDef = encoding.y;\n    const y2Def = encoding.y2;\n    const yScaleName = model.scaleName(Y);\n    const yScale = model.getScaleComponent(Y);\n    // y, y2 & height -- we must specify two of these in all conditions\n    if (isFieldDef(yDef) && isBinned(yDef.bin)) {\n        return mixins.binPosition(yDef, y2Def, Y, yScaleName, getFirstDefined(markDef.binSpacing, config.bar.binSpacing), yScale.get('reverse'));\n    }\n    else if (orient === 'vertical' || y2Def) {\n        return Object.assign({}, mixins.pointPosition('y', model, 'zeroOrMin'), mixins.pointPosition2(model, 'zeroOrMin', 'y2'));\n    }\n    else {\n        if (isFieldDef(yDef)) {\n            const yScaleType = yScale.get('type');\n            if (isBinning(yDef.bin) && !sizeDef && !hasDiscreteDomain(yScaleType)) {\n                return mixins.binPosition(yDef, undefined, Y, model.scaleName('y'), getFirstDefined(markDef.binSpacing, config.bar.binSpacing), yScale.get('reverse'));\n            }\n            else if (yScaleType === ScaleType.BAND) {\n                return mixins.bandPosition(yDef, 'y', model);\n            }\n        }\n        return mixins.centeredBandPosition('y', model, ref.mid(height), defaultSizeRef(markDef, yScaleName, yScale, config));\n    }\n}\nfunction defaultSizeRef(markDef, scaleName, scale, config) {\n    if (markDef.size !== undefined) {\n        return { value: markDef.size };\n    }\n    const sizeConfig = getMarkConfig('size', markDef, config, {\n        // config.mark.size shouldn't affect bar size\n        skipGeneralMarkConfig: true\n    });\n    if (sizeConfig !== undefined) {\n        return { value: sizeConfig };\n    }\n    if (scale) {\n        const scaleType = scale.get('type');\n        if (scaleType === 'point' || scaleType === 'band') {\n            if (config.bar.discreteBandSize !== undefined) {\n                return { value: config.bar.discreteBandSize };\n            }\n            if (scaleType === ScaleType.POINT) {\n                const scaleRange = scale.get('range');\n                if (isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {\n                    return { value: scaleRange.step - 1 };\n                }\n                log.warn(log.message.BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL);\n            }\n            else {\n                // BAND\n                return ref.bandRef(scaleName);\n            }\n        }\n        else {\n            // continuous scale\n            return { value: config.bar.continuousBandSize };\n        }\n    }\n    // No Scale\n    const value = getFirstDefined(\n    // No scale is like discrete bar (with one item)\n    config.bar.discreteBandSize, config.scale.rangeStep ? config.scale.rangeStep - 1 : undefined, \n    // If somehow default rangeStep is set to null or undefined, use 20 as back up\n    20);\n    return { value };\n}\n//# sourceMappingURL=bar.js.map","import { getMarkConfig } from '../common';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\nfunction encodeEntry(model, fixedShape) {\n    const { config, markDef, width, height } = model;\n    return Object.assign({}, mixins.baseEncodeEntry(model, { size: 'include', orient: 'ignore' }), mixins.pointPosition('x', model, ref.mid(width)), mixins.pointPosition('y', model, ref.mid(height)), mixins.nonPosition('size', model, { defaultValue: getMarkConfig('size', markDef, config) }), shapeMixins(model, config, fixedShape));\n}\nexport function shapeMixins(model, config, fixedShape) {\n    if (fixedShape) {\n        return { shape: { value: fixedShape } };\n    }\n    return mixins.nonPosition('shape', model, { defaultValue: getMarkConfig('shape', model.markDef, config) });\n}\nexport const point = {\n    vgMark: 'symbol',\n    encodeEntry: (model) => {\n        return encodeEntry(model);\n    }\n};\nexport const circle = {\n    vgMark: 'symbol',\n    encodeEntry: (model) => {\n        return encodeEntry(model, 'circle');\n    }\n};\nexport const square = {\n    vgMark: 'symbol',\n    encodeEntry: (model) => {\n        return encodeEntry(model, 'square');\n    }\n};\n//# sourceMappingURL=point.js.map","import { getFirstDefined } from '../../util';\nimport { isVgRangeStep } from '../../vega.schema';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\nexport const tick = {\n    vgMark: 'rect',\n    encodeEntry: (model) => {\n        const { config, markDef, width, height } = model;\n        const orient = markDef.orient;\n        const vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';\n        const vgThicknessChannel = orient === 'horizontal' ? 'height' : 'width';\n        return Object.assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), mixins.pointPosition('x', model, ref.mid(width), 'xc'), mixins.pointPosition('y', model, ref.mid(height), 'yc'), mixins.nonPosition('size', model, {\n            defaultValue: defaultSize(model),\n            vgChannel: vgSizeChannel\n        }), { [vgThicknessChannel]: { value: getFirstDefined(markDef.thickness, config.tick.thickness) } });\n    }\n};\nfunction defaultSize(model) {\n    const { config, markDef } = model;\n    const orient = markDef.orient;\n    const scale = model.getScaleComponent(orient === 'horizontal' ? 'x' : 'y');\n    if (markDef.size !== undefined) {\n        return markDef.size;\n    }\n    else if (config.tick.bandSize !== undefined) {\n        return config.tick.bandSize;\n    }\n    else {\n        const scaleRange = scale ? scale.get('range') : undefined;\n        const rangeStep = scaleRange && isVgRangeStep(scaleRange) ? scaleRange.step : config.scale.rangeStep;\n        if (typeof rangeStep !== 'number') {\n            // FIXME consolidate this log\n            throw new Error('Function does not handle non-numeric rangeStep');\n        }\n        return (rangeStep * 3) / 4;\n    }\n}\n//# sourceMappingURL=tick.js.map","import { isArray } from 'vega-util';\nimport { MAIN } from '../../data';\nimport { isAggregate } from '../../encoding';\nimport { getTypedFieldDef, isFieldDef, isValueDef, vgField } from '../../fielddef';\nimport { AREA, isPathMark, LINE, TRAIL } from '../../mark';\nimport { isSortField } from '../../sort';\nimport { contains, getFirstDefined, keys } from '../../util';\nimport { getStyles, sortParams } from '../common';\nimport { area } from './area';\nimport { bar } from './bar';\nimport { geoshape } from './geoshape';\nimport { line, trail } from './line';\nimport { circle, point, square } from './point';\nimport { rect } from './rect';\nimport { rule } from './rule';\nimport { text } from './text';\nimport { tick } from './tick';\nconst markCompiler = {\n    area,\n    bar,\n    circle,\n    geoshape,\n    line,\n    point,\n    rect,\n    rule,\n    square,\n    text,\n    tick,\n    trail\n};\nexport function parseMarkGroup(model) {\n    if (contains([LINE, AREA, TRAIL], model.mark)) {\n        return parsePathMark(model);\n    }\n    else {\n        return getMarkGroups(model);\n    }\n}\nconst FACETED_PATH_PREFIX = 'faceted_path_';\nfunction parsePathMark(model) {\n    const details = pathGroupingFields(model.mark, model.encoding);\n    const pathMarks = getMarkGroups(model, {\n        // If has subfacet for line/area group, need to use faceted data from below.\n        fromPrefix: details.length > 0 ? FACETED_PATH_PREFIX : ''\n    });\n    if (details.length > 0) {\n        // have level of details - need to facet line into subgroups\n        // TODO: for non-stacked plot, map order to zindex. (Maybe rename order for layer to zindex?)\n        return [\n            {\n                name: model.getName('pathgroup'),\n                type: 'group',\n                from: {\n                    facet: {\n                        name: FACETED_PATH_PREFIX + model.requestDataName(MAIN),\n                        data: model.requestDataName(MAIN),\n                        groupby: details\n                    }\n                },\n                encode: {\n                    update: {\n                        width: { field: { group: 'width' } },\n                        height: { field: { group: 'height' } }\n                    }\n                },\n                marks: pathMarks\n            }\n        ];\n    }\n    else {\n        return pathMarks;\n    }\n}\nexport function getSort(model) {\n    const { encoding, stack, mark, markDef } = model;\n    const order = encoding.order;\n    if (!isArray(order) && isValueDef(order)) {\n        return undefined;\n    }\n    else if ((isArray(order) || isFieldDef(order)) && !stack) {\n        // Sort by the order field if it is specified and the field is not stacked. (For stacked field, order specify stack order.)\n        return sortParams(order, { expr: 'datum' });\n    }\n    else if (isPathMark(mark)) {\n        // For both line and area, we sort values based on dimension by default\n        const dimensionChannelDef = encoding[markDef.orient === 'horizontal' ? 'y' : 'x'];\n        if (isFieldDef(dimensionChannelDef)) {\n            const s = dimensionChannelDef.sort;\n            const sortField = isSortField(s)\n                ? vgField({\n                    // FIXME: this op might not already exist?\n                    // FIXME: what if dimensionChannel (x or y) contains custom domain?\n                    aggregate: isAggregate(model.encoding) ? s.op : undefined,\n                    field: s.field\n                }, { expr: 'datum' })\n                : vgField(dimensionChannelDef, {\n                    // For stack with imputation, we only have bin_mid\n                    binSuffix: model.stack && model.stack.impute ? 'mid' : undefined,\n                    expr: 'datum'\n                });\n            return {\n                field: sortField,\n                order: 'descending'\n            };\n        }\n        return undefined;\n    }\n    return undefined;\n}\nfunction getMarkGroups(model, opt = { fromPrefix: '' }) {\n    const mark = model.mark;\n    const clip = getFirstDefined(model.markDef.clip, scaleClip(model));\n    const style = getStyles(model.markDef);\n    const key = model.encoding.key;\n    const sort = getSort(model);\n    const postEncodingTransform = markCompiler[mark].postEncodingTransform\n        ? markCompiler[mark].postEncodingTransform(model)\n        : null;\n    return [\n        Object.assign({ name: model.getName('marks'), type: markCompiler[mark].vgMark }, (clip ? { clip: true } : {}), (style ? { style } : {}), (key ? { key: { field: key.field } } : {}), (sort ? { sort } : {}), { from: { data: opt.fromPrefix + model.requestDataName(MAIN) }, encode: {\n                update: markCompiler[mark].encodeEntry(model)\n            } }, (postEncodingTransform\n            ? {\n                transform: postEncodingTransform\n            }\n            : {}))\n    ];\n}\n/**\n * Returns list of path grouping fields\n * that the model's spec contains.\n */\nexport function pathGroupingFields(mark, encoding) {\n    return keys(encoding).reduce((details, channel) => {\n        switch (channel) {\n            // x, y, x2, y2, lat, long, lat1, long2, order, tooltip, href, cursor should not cause lines to group\n            case 'x':\n            case 'y':\n            case 'order':\n            case 'href':\n            case 'x2':\n            case 'y2':\n            case 'latitude':\n            case 'longitude':\n            case 'latitude2':\n            case 'longitude2':\n            // TODO: case 'cursor':\n            // text, shape, shouldn't be a part of line/trail/area\n            case 'text':\n            case 'shape':\n            // tooltip fields should not be added to group by\n            case 'tooltip':\n                return details;\n            case 'detail':\n            case 'key':\n                const channelDef = encoding[channel];\n                if (isArray(channelDef) || isFieldDef(channelDef)) {\n                    (isArray(channelDef) ? channelDef : [channelDef]).forEach(fieldDef => {\n                        if (!fieldDef.aggregate) {\n                            details.push(vgField(fieldDef, {}));\n                        }\n                    });\n                }\n                return details;\n            case 'size':\n                if (mark === 'trail') {\n                    // For trail, size should not group trail lines.\n                    return details;\n                }\n            // For line, it should group lines.\n            /* tslint:disable */\n            // intentional fall through\n            case 'color':\n            case 'fill':\n            case 'stroke':\n            case 'opacity':\n            case 'fillOpacity':\n            case 'strokeOpacity':\n            case 'strokeWidth':\n                // TODO strokeDashOffset:\n                /* tslint:enable */\n                const fieldDef = getTypedFieldDef(encoding[channel]);\n                if (fieldDef && !fieldDef.aggregate) {\n                    details.push(vgField(fieldDef, {}));\n                }\n                return details;\n            default:\n                throw new Error(`Bug: Channel ${channel} unimplemented for line mark`);\n        }\n    }, []);\n}\n/**\n * If scales are bound to interval selections, we want to automatically clip\n * marks to account for panning/zooming interactions. We identify bound scales\n * by the domainRaw property, which gets added during scale parsing.\n */\nfunction scaleClip(model) {\n    const xScale = model.getScaleComponent('x');\n    const yScale = model.getScaleComponent('y');\n    return (xScale && xScale.get('domainRaw')) || (yScale && yScale.get('domainRaw')) ? true : false;\n}\n//# sourceMappingURL=mark.js.map","import * as mixins from './mixins';\nexport const area = {\n    vgMark: 'area',\n    encodeEntry: (model) => {\n        return Object.assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'include' }), mixins.pointPosition('x', model, 'zeroOrMin'), mixins.pointPosition('y', model, 'zeroOrMin'), mixins.pointPosition2(model, 'zeroOrMin', model.markDef.orient === 'horizontal' ? 'x2' : 'y2'), mixins.defined(model));\n    }\n};\n//# sourceMappingURL=area.js.map","import * as mixins from './mixins';\nimport { isFieldDef, vgField } from '../../fielddef';\nimport { GEOJSON } from '../../type';\nexport const geoshape = {\n    vgMark: 'shape',\n    encodeEntry: (model) => {\n        return Object.assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }));\n    },\n    postEncodingTransform: (model) => {\n        const { encoding } = model;\n        const shapeDef = encoding.shape;\n        const transform = Object.assign({ type: 'geoshape', projection: model.projectionName() }, (shapeDef && isFieldDef(shapeDef) && shapeDef.type === GEOJSON\n            ? { field: vgField(shapeDef, { expr: 'datum' }) }\n            : {}));\n        return [transform];\n    }\n};\n//# sourceMappingURL=geoshape.js.map","import * as mixins from './mixins';\nimport * as ref from './valueref';\nexport const line = {\n    vgMark: 'line',\n    encodeEntry: (model) => {\n        const { width, height } = model;\n        return Object.assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), mixins.pointPosition('x', model, ref.mid(width)), mixins.pointPosition('y', model, ref.mid(height)), mixins.nonPosition('size', model, {\n            vgChannel: 'strokeWidth' // VL's line size is strokeWidth\n        }), mixins.defined(model));\n    }\n};\nexport const trail = {\n    vgMark: 'trail',\n    encodeEntry: (model) => {\n        const { width, height } = model;\n        return Object.assign({}, mixins.baseEncodeEntry(model, { size: 'include', orient: 'ignore' }), mixins.pointPosition('x', model, ref.mid(width)), mixins.pointPosition('y', model, ref.mid(height)), mixins.nonPosition('size', model), mixins.defined(model));\n    }\n};\n//# sourceMappingURL=line.js.map","import { isBinned, isBinning } from '../../bin';\nimport { X, Y } from '../../channel';\nimport { isFieldDef } from '../../fielddef';\nimport * as log from '../../log';\nimport { RECT } from '../../mark';\nimport { hasDiscreteDomain, ScaleType } from '../../scale';\nimport * as mixins from './mixins';\nexport const rect = {\n    vgMark: 'rect',\n    encodeEntry: (model) => {\n        return Object.assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), x(model), y(model));\n    }\n};\nexport function x(model) {\n    const xDef = model.encoding.x;\n    const x2Def = model.encoding.x2;\n    const xScale = model.getScaleComponent(X);\n    const xScaleType = xScale ? xScale.get('type') : undefined;\n    const xScaleName = model.scaleName(X);\n    if (isFieldDef(xDef) && (isBinning(xDef.bin) || isBinned(xDef.bin))) {\n        return mixins.binPosition(xDef, x2Def, X, xScaleName, 0, xScale.get('reverse'));\n    }\n    else if (isFieldDef(xDef) && xScale && hasDiscreteDomain(xScaleType)) {\n        /* istanbul ignore else */\n        if (xScaleType === ScaleType.BAND) {\n            return mixins.bandPosition(xDef, 'x', model);\n        }\n        else {\n            // We don't support rect mark with point/ordinal scale\n            throw new Error(log.message.scaleTypeNotWorkWithMark(RECT, xScaleType));\n        }\n    }\n    else {\n        // continuous scale or no scale\n        return Object.assign({}, mixins.pointPosition('x', model, 'zeroOrMax'), mixins.pointPosition2(model, 'zeroOrMin', 'x2'));\n    }\n}\nexport function y(model) {\n    const yDef = model.encoding.y;\n    const y2Def = model.encoding.y2;\n    const yScale = model.getScaleComponent(Y);\n    const yScaleType = yScale ? yScale.get('type') : undefined;\n    const yScaleName = model.scaleName(Y);\n    if (isFieldDef(yDef) && (isBinning(yDef.bin) || isBinned(yDef.bin))) {\n        return mixins.binPosition(yDef, y2Def, Y, yScaleName, 0, yScale.get('reverse'));\n    }\n    else if (isFieldDef(yDef) && yScale && hasDiscreteDomain(yScaleType)) {\n        /* istanbul ignore else */\n        if (yScaleType === ScaleType.BAND) {\n            return mixins.bandPosition(yDef, 'y', model);\n        }\n        else {\n            // We don't support rect mark with point/ordinal scale\n            throw new Error(log.message.scaleTypeNotWorkWithMark(RECT, yScaleType));\n        }\n    }\n    else {\n        // continuous scale or no scale\n        return Object.assign({}, mixins.pointPosition('y', model, 'zeroOrMax'), mixins.pointPosition2(model, 'zeroOrMin', 'y2'));\n    }\n}\n//# sourceMappingURL=rect.js.map","import * as mixins from './mixins';\nimport * as ref from './valueref';\nexport const rule = {\n    vgMark: 'rule',\n    encodeEntry: (model) => {\n        const { markDef, width, height } = model;\n        const orient = markDef.orient;\n        if (!model.encoding.x && !model.encoding.y && !model.encoding.latitude && !model.encoding.longitude) {\n            // Show nothing if we have none of x, y, lat, and long.\n            return {};\n        }\n        return Object.assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), mixins.pointPosition('x', model, orient === 'horizontal' ? 'zeroOrMin' : ref.mid(width)), mixins.pointPosition('y', model, orient === 'vertical' ? 'zeroOrMin' : ref.mid(height)), (orient !== 'vertical' ? mixins.pointPosition2(model, 'zeroOrMax', 'x2') : {}), (orient !== 'horizontal' ? mixins.pointPosition2(model, 'zeroOrMax', 'y2') : {}), mixins.nonPosition('size', model, {\n            vgChannel: 'strokeWidth',\n            defaultValue: markDef.size\n        }));\n    }\n};\n//# sourceMappingURL=rule.js.map","import { getFirstDefined } from '../../util';\nimport { getMarkConfig, getStyleConfig } from '../common';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\nexport const text = {\n    vgMark: 'text',\n    encodeEntry: (model) => {\n        const { config, encoding, width, height, markDef } = model;\n        // We have to support mark property and config for both size and fontSize for text\n        // - size is from original Vega-Lite, which allows users to easily transition from size channel of other marks to text.\n        // - fontSize is from Vega and we need support it to make sure that all Vega configs all work correctly in Vega-Lite.\n        // Precedence: markDef > style config > mark-specific config\n        // For each of them, fontSize is more specific than size, thus has higher precedence\n        const defaultValue = getFirstDefined(markDef.fontSize, markDef.size, getStyleConfig('fontSize', markDef, config.style), getStyleConfig('size', markDef, config.style), config[markDef.type].fontSize, config[markDef.type].size\n        // general mark config shouldn't be used as they are only for point/circle/square\n        );\n        return Object.assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), mixins.pointPosition('x', model, ref.mid(width)), mixins.pointPosition('y', model, ref.mid(height)), mixins.text(model), mixins.nonPosition('size', model, {\n            defaultValue,\n            vgChannel: 'fontSize' // VL's text size is fontSize\n        }), mixins.valueIfDefined('align', align(model.markDef, encoding, config)));\n    }\n};\nfunction align(markDef, encoding, config) {\n    const a = markDef.align || getMarkConfig('align', markDef, config);\n    if (a === undefined) {\n        return 'center';\n    }\n    // If there is a config, Vega-parser will process this already.\n    return undefined;\n}\n//# sourceMappingURL=text.js.map","import { isFieldDef } from '../../fielddef';\nimport { isImputeSequence } from '../../transform';\nimport { duplicate, hash } from '../../util';\nimport { pathGroupingFields } from '../mark/mark';\nimport { DataFlowNode } from './dataflow';\nexport class ImputeNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n    }\n    clone() {\n        return new ImputeNode(null, duplicate(this.transform));\n    }\n    producedFields() {\n        return new Set([this.transform.impute]);\n    }\n    processSequence(keyvals) {\n        const { start = 0, stop, step } = keyvals;\n        const result = [start, stop, ...(step ? [step] : [])].join(',');\n        return { signal: `sequence(${result})` };\n    }\n    static makeFromTransform(parent, imputeTransform) {\n        return new ImputeNode(parent, imputeTransform);\n    }\n    static makeFromEncoding(parent, model) {\n        const encoding = model.encoding;\n        const xDef = encoding.x;\n        const yDef = encoding.y;\n        if (isFieldDef(xDef) && isFieldDef(yDef)) {\n            const imputedChannel = xDef.impute ? xDef : yDef.impute ? yDef : undefined;\n            if (imputedChannel === undefined) {\n                return undefined;\n            }\n            const keyChannel = xDef.impute ? yDef : yDef.impute ? xDef : undefined;\n            const { method, value, frame, keyvals } = imputedChannel.impute;\n            const groupbyFields = pathGroupingFields(model.mark, encoding);\n            return new ImputeNode(parent, Object.assign({ impute: imputedChannel.field, key: keyChannel.field }, (method ? { method } : {}), (value !== undefined ? { value } : {}), (frame ? { frame } : {}), (keyvals !== undefined ? { keyvals } : {}), (groupbyFields.length ? { groupby: groupbyFields } : {})));\n        }\n        return null;\n    }\n    hash() {\n        return `Impute ${hash(this.transform)}`;\n    }\n    assemble() {\n        const { impute, key, keyvals, method, groupby, value, frame = [null, null] } = this.transform;\n        const initialImpute = Object.assign({ type: 'impute', field: impute, key }, (keyvals ? { keyvals: isImputeSequence(keyvals) ? this.processSequence(keyvals) : keyvals } : {}), { method: 'value' }, (groupby ? { groupby } : {}), { value: null });\n        let setImputedField;\n        if (method && method !== 'value') {\n            const deriveNewField = Object.assign({ type: 'window', as: [`imputed_${impute}_value`], ops: [method], fields: [impute], frame, ignorePeers: false }, (groupby ? { groupby } : {}));\n            const replaceOriginal = {\n                type: 'formula',\n                expr: `datum.${impute} === null ? datum.imputed_${impute}_value : datum.${impute}`,\n                as: impute\n            };\n            setImputedField = [deriveNewField, replaceOriginal];\n        }\n        else {\n            const replaceWithValue = {\n                type: 'formula',\n                expr: `datum.${impute} === null ? ${value} : datum.${impute}`,\n                as: impute\n            };\n            setImputedField = [replaceWithValue];\n        }\n        return [initialImpute, ...setImputedField];\n    }\n}\n//# sourceMappingURL=impute.js.map","import { Split } from '../split';\n/**\n * Class to track interesting properties (see https://15721.courses.cs.cmu.edu/spring2016/papers/graefe-ieee1995.pdf)\n * about how fields have been parsed or whether they have been derived in a transform. We use this to not parse the\n * same field again (or differently).\n */\nexport class AncestorParse extends Split {\n    constructor(explicit = {}, implicit = {}, parseNothing = false) {\n        super(explicit, implicit);\n        this.explicit = explicit;\n        this.implicit = implicit;\n        this.parseNothing = parseNothing;\n    }\n    clone() {\n        const clone = super.clone();\n        clone.parseNothing = this.parseNothing;\n        return clone;\n    }\n}\n//# sourceMappingURL=index.js.map","import { isString } from 'vega-util';\nimport * as log from '../../log';\nimport { duplicate, hash } from '../../util';\nimport { DataFlowNode, OutputNode } from './dataflow';\nimport { findSource } from './parse';\nimport { SourceNode } from './source';\nexport class LookupNode extends DataFlowNode {\n    constructor(parent, transform, secondary) {\n        super(parent);\n        this.transform = transform;\n        this.secondary = secondary;\n    }\n    clone() {\n        return new LookupNode(null, duplicate(this.transform), this.secondary);\n    }\n    static make(parent, model, transform, counter) {\n        const sources = model.component.data.sources;\n        let fromSource = findSource(transform.from.data, sources);\n        if (!fromSource) {\n            fromSource = new SourceNode(transform.from.data);\n            sources.push(fromSource);\n        }\n        const fromOutputName = model.getName(`lookup_${counter}`);\n        const fromOutputNode = new OutputNode(fromSource, fromOutputName, 'lookup', model.component.data.outputNodeRefCounts);\n        model.component.data.outputNodes[fromOutputName] = fromOutputNode;\n        return new LookupNode(parent, transform, fromOutputNode.getSource());\n    }\n    producedFields() {\n        return new Set(this.transform.from.fields || (this.transform.as instanceof Array ? this.transform.as : [this.transform.as]));\n    }\n    hash() {\n        return `Lookup ${hash({ transform: this.transform, secondary: this.secondary })}`;\n    }\n    assemble() {\n        let foreign;\n        if (this.transform.from.fields) {\n            // lookup a few fields and add create a flat output\n            foreign = Object.assign({ values: this.transform.from.fields }, (this.transform.as ? { as: this.transform.as instanceof Array ? this.transform.as : [this.transform.as] } : {}));\n        }\n        else {\n            // lookup full record and nest it\n            let asName = this.transform.as;\n            if (!isString(asName)) {\n                log.warn(log.message.NO_FIELDS_NEEDS_AS);\n                asName = '_lookup';\n            }\n            foreign = {\n                as: [asName]\n            };\n        }\n        return Object.assign({ type: 'lookup', from: this.secondary, key: this.transform.from.key, fields: [this.transform.lookup] }, foreign, (this.transform.default ? { default: this.transform.default } : {}));\n    }\n}\n//# sourceMappingURL=lookup.js.map","import { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for the sample transform nodes\n */\nexport class SampleTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n    }\n    clone() {\n        return new SampleTransformNode(null, duplicate(this.transform));\n    }\n    hash() {\n        return `SampleTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        return {\n            type: 'sample',\n            size: this.transform.sample\n        };\n    }\n}\n//# sourceMappingURL=sample.js.map","import { isUrlData } from '../../data';\nimport { AggregateNode } from './aggregate';\nimport { BinNode } from './bin';\nimport { CalculateNode } from './calculate';\nimport { OutputNode } from './dataflow';\nimport { FacetNode } from './facet';\nimport { FilterNode } from './filter';\nimport { FlattenTransformNode } from './flatten';\nimport { FoldTransformNode } from './fold';\nimport { ParseNode } from './formatparse';\nimport { GeoJSONNode } from './geojson';\nimport { GeoPointNode } from './geopoint';\nimport { IdentifierNode } from './identifier';\nimport { ImputeNode } from './impute';\nimport { JoinAggregateTransformNode } from './joinaggregate';\nimport { LookupNode } from './lookup';\nimport { SampleTransformNode } from './sample';\nimport { SourceNode } from './source';\nimport { StackNode } from './stack';\nimport { TimeUnitNode } from './timeunit';\nimport { WindowTransformNode } from './window';\nfunction makeWalkTree(data) {\n    // to name datasources\n    let datasetIndex = 0;\n    /**\n     * Recursively walk down the tree.\n     */\n    function walkTree(node, dataSource) {\n        if (node instanceof SourceNode) {\n            // If the source is a named data source or a data source with values, we need\n            // to put it in a different data source. Otherwise, Vega may override the data.\n            if (!isUrlData(node.data)) {\n                data.push(dataSource);\n                const newData = {\n                    name: null,\n                    source: dataSource.name,\n                    transform: []\n                };\n                dataSource = newData;\n            }\n        }\n        if (node instanceof ParseNode) {\n            if (node.parent instanceof SourceNode && !dataSource.source) {\n                // If node's parent is a root source and the data source does not refer to another data source, use normal format parse\n                dataSource.format = Object.assign({}, (dataSource.format || {}), { parse: node.assembleFormatParse() });\n                // add calculates for all nested fields\n                dataSource.transform.push(...node.assembleTransforms(true));\n            }\n            else {\n                // Otherwise use Vega expression to parse\n                dataSource.transform.push(...node.assembleTransforms());\n            }\n        }\n        if (node instanceof FacetNode) {\n            if (!dataSource.name) {\n                dataSource.name = `data_${datasetIndex++}`;\n            }\n            if (!dataSource.source || dataSource.transform.length > 0) {\n                data.push(dataSource);\n                node.data = dataSource.name;\n            }\n            else {\n                node.data = dataSource.source;\n            }\n            node.assemble().forEach(d => data.push(d));\n            // break here because the rest of the tree has to be taken care of by the facet.\n            return;\n        }\n        if (node instanceof FilterNode ||\n            node instanceof CalculateNode ||\n            node instanceof GeoPointNode ||\n            node instanceof GeoJSONNode ||\n            node instanceof AggregateNode ||\n            node instanceof LookupNode ||\n            node instanceof WindowTransformNode ||\n            node instanceof JoinAggregateTransformNode ||\n            node instanceof FoldTransformNode ||\n            node instanceof FlattenTransformNode ||\n            node instanceof IdentifierNode ||\n            node instanceof SampleTransformNode) {\n            dataSource.transform.push(node.assemble());\n        }\n        if (node instanceof BinNode ||\n            node instanceof TimeUnitNode ||\n            node instanceof ImputeNode ||\n            node instanceof StackNode) {\n            dataSource.transform = dataSource.transform.concat(node.assemble());\n        }\n        if (node instanceof OutputNode) {\n            if (dataSource.source && dataSource.transform.length === 0) {\n                node.setSource(dataSource.source);\n            }\n            else if (node.parent instanceof OutputNode) {\n                // Note that an output node may be required but we still do not assemble a\n                // separate data source for it.\n                node.setSource(dataSource.name);\n            }\n            else {\n                if (!dataSource.name) {\n                    dataSource.name = `data_${datasetIndex++}`;\n                }\n                // Here we set the name of the datasource we generated. From now on\n                // other assemblers can use it.\n                node.setSource(dataSource.name);\n                // if this node has more than one child, we will add a datasource automatically\n                if (node.numChildren() === 1) {\n                    data.push(dataSource);\n                    const newData = {\n                        name: null,\n                        source: dataSource.name,\n                        transform: []\n                    };\n                    dataSource = newData;\n                }\n            }\n        }\n        switch (node.numChildren()) {\n            case 0:\n                // done\n                if (node instanceof OutputNode && (!dataSource.source || dataSource.transform.length > 0)) {\n                    // do not push empty datasources that are simply references\n                    data.push(dataSource);\n                }\n                break;\n            case 1:\n                walkTree(node.children[0], dataSource);\n                break;\n            default:\n                if (!dataSource.name) {\n                    dataSource.name = `data_${datasetIndex++}`;\n                }\n                let source = dataSource.name;\n                if (!dataSource.source || dataSource.transform.length > 0) {\n                    data.push(dataSource);\n                }\n                else {\n                    source = dataSource.source;\n                }\n                node.children.forEach(child => {\n                    const newData = {\n                        name: null,\n                        source: source,\n                        transform: []\n                    };\n                    walkTree(child, newData);\n                });\n                break;\n        }\n    }\n    return walkTree;\n}\n/**\n * Assemble data sources that are derived from faceted data.\n */\nexport function assembleFacetData(root) {\n    const data = [];\n    const walkTree = makeWalkTree(data);\n    root.children.forEach(child => walkTree(child, {\n        source: root.name,\n        name: null,\n        transform: []\n    }));\n    return data;\n}\n/**\n * Create Vega Data array from a given compiled model and append all of them to the given array\n *\n * @param  model\n * @param  data array\n * @return modified data array\n */\nexport function assembleRootData(dataComponent, datasets) {\n    const data = [];\n    // roots.forEach(debug);\n    // draw(roots);\n    const walkTree = makeWalkTree(data);\n    let sourceIndex = 0;\n    dataComponent.sources.forEach(root => {\n        // assign a name if the source does not have a name yet\n        if (!root.hasName()) {\n            root.dataName = `source_${sourceIndex++}`;\n        }\n        const newData = root.assemble();\n        walkTree(root, newData);\n    });\n    // remove empty transform arrays for cleaner output\n    data.forEach(d => {\n        if (d.transform.length === 0) {\n            delete d.transform;\n        }\n    });\n    // move sources without transforms (the ones that are potentially used in lookups) to the beginning\n    let whereTo = 0;\n    for (let i = 0; i < data.length; i++) {\n        const d = data[i];\n        if ((d.transform || []).length === 0 && !d.source) {\n            data.splice(whereTo++, 0, data.splice(i, 1)[0]);\n        }\n    }\n    // now fix the from references in lookup transforms\n    for (const d of data) {\n        for (const t of d.transform || []) {\n            if (t.type === 'lookup') {\n                t.from = dataComponent.outputNodes[t.from].getSource();\n            }\n        }\n    }\n    // inline values for datasets that are in the datastore\n    for (const d of data) {\n        if (d.name in datasets) {\n            d.values = datasets[d.name];\n        }\n    }\n    return data;\n}\n//# sourceMappingURL=assemble.js.map","import { defaultScaleConfig, hasDiscreteDomain } from '../../scale';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { mergeValuesWithExplicit } from '../split';\nexport function parseLayerLayoutSize(model) {\n    parseChildrenLayoutSize(model);\n    const layoutSizeCmpt = model.component.layoutSize;\n    layoutSizeCmpt.setWithExplicit('width', parseNonUnitLayoutSizeForChannel(model, 'width'));\n    layoutSizeCmpt.setWithExplicit('height', parseNonUnitLayoutSizeForChannel(model, 'height'));\n}\nexport const parseRepeatLayoutSize = parseLayerLayoutSize;\nexport function parseConcatLayoutSize(model) {\n    parseChildrenLayoutSize(model);\n    const layoutSizeCmpt = model.component.layoutSize;\n    const sizeTypeToMerge = model.isVConcat ? 'width' : 'height';\n    layoutSizeCmpt.setWithExplicit(sizeTypeToMerge, parseNonUnitLayoutSizeForChannel(model, sizeTypeToMerge));\n}\nexport function parseChildrenLayoutSize(model) {\n    for (const child of model.children) {\n        child.parseLayoutSize();\n    }\n}\nfunction parseNonUnitLayoutSizeForChannel(model, sizeType) {\n    const channel = sizeType === 'width' ? 'x' : 'y';\n    const resolve = model.component.resolve;\n    let mergedSize;\n    // Try to merge layout size\n    for (const child of model.children) {\n        const childSize = child.component.layoutSize.getWithExplicit(sizeType);\n        const scaleResolve = resolve.scale[channel];\n        if (scaleResolve === 'independent' && childSize.value === 'range-step') {\n            // Do not merge independent scales with range-step as their size depends\n            // on the scale domains, which can be different between scales.\n            mergedSize = undefined;\n            break;\n        }\n        if (mergedSize) {\n            if (scaleResolve === 'independent' && mergedSize.value !== childSize.value) {\n                // For independent scale, only merge if all the sizes are the same.\n                // If the values are different, abandon the merge!\n                mergedSize = undefined;\n                break;\n            }\n            mergedSize = mergeValuesWithExplicit(mergedSize, childSize, sizeType, '');\n        }\n        else {\n            mergedSize = childSize;\n        }\n    }\n    if (mergedSize) {\n        // If merged, rename size and set size of all children.\n        for (const child of model.children) {\n            model.renameSignal(child.getName(sizeType), model.getName(sizeType));\n            child.component.layoutSize.set(sizeType, 'merged', false);\n        }\n        return mergedSize;\n    }\n    else {\n        // Otherwise, there is no merged size.\n        return {\n            explicit: false,\n            value: undefined\n        };\n    }\n}\nexport function parseUnitLayoutSize(model) {\n    const layoutSizeComponent = model.component.layoutSize;\n    if (!layoutSizeComponent.explicit.width) {\n        const width = defaultUnitSize(model, 'width');\n        layoutSizeComponent.set('width', width, false);\n    }\n    if (!layoutSizeComponent.explicit.height) {\n        const height = defaultUnitSize(model, 'height');\n        layoutSizeComponent.set('height', height, false);\n    }\n}\nfunction defaultUnitSize(model, sizeType) {\n    const channel = sizeType === 'width' ? 'x' : 'y';\n    const config = model.config;\n    const scaleComponent = model.getScaleComponent(channel);\n    if (scaleComponent) {\n        const scaleType = scaleComponent.get('type');\n        const range = scaleComponent.get('range');\n        if (hasDiscreteDomain(scaleType) && isVgRangeStep(range)) {\n            // For discrete domain with range.step, use dynamic width/height\n            return 'range-step';\n        }\n        else {\n            return config.view[sizeType];\n        }\n    }\n    else if (model.hasProjection) {\n        return config.view[sizeType];\n    }\n    else {\n        // No scale - set default size\n        if (sizeType === 'width' && model.mark === 'text') {\n            // width for text mark without x-field is a bit wider than typical range step\n            return config.scale.textXRangeStep;\n        }\n        // Set width/height equal to rangeStep config or if rangeStep is null, use value from default scale config.\n        return config.scale.rangeStep || defaultScaleConfig.rangeStep;\n    }\n}\n//# sourceMappingURL=parse.js.map","import * as tslib_1 from \"tslib\";\nimport { isArray } from 'vega-util';\nimport { hasConditionalFieldDef, isConditionalDef, isFieldDef, isRepeatRef, isSortableFieldDef } from '../fielddef';\nimport * as log from '../log';\nimport { isSortField } from '../sort';\nexport function replaceRepeaterInFacet(facet, repeater) {\n    return replaceRepeater(facet, repeater);\n}\nexport function replaceRepeaterInEncoding(encoding, repeater) {\n    return replaceRepeater(encoding, repeater);\n}\n/**\n * Replaces repeated value and returns if the repeated value is valid.\n */\nfunction replaceRepeat(o, repeater) {\n    if (isRepeatRef(o.field)) {\n        if (o.field.repeat in repeater) {\n            // any needed to calm down ts compiler\n            return Object.assign({}, o, { field: repeater[o.field.repeat] });\n        }\n        else {\n            log.warn(log.message.noSuchRepeatedValue(o.field.repeat));\n            return undefined;\n        }\n    }\n    return o;\n}\n/**\n * Replace repeater values in a field def with the concrete field name.\n */\nfunction replaceRepeaterInFieldDef(fieldDef, repeater) {\n    fieldDef = replaceRepeat(fieldDef, repeater);\n    if (fieldDef === undefined) {\n        // the field def should be ignored\n        return undefined;\n    }\n    else if (fieldDef === null) {\n        return null;\n    }\n    if (isSortableFieldDef(fieldDef) && isSortField(fieldDef.sort)) {\n        const sort = replaceRepeat(fieldDef.sort, repeater);\n        fieldDef = Object.assign({}, fieldDef, (sort ? { sort } : {}));\n    }\n    return fieldDef;\n}\nfunction replaceRepeaterInChannelDef(channelDef, repeater) {\n    if (isFieldDef(channelDef)) {\n        const fd = replaceRepeaterInFieldDef(channelDef, repeater);\n        if (fd) {\n            return fd;\n        }\n        else if (isConditionalDef(channelDef)) {\n            return { condition: channelDef.condition };\n        }\n    }\n    else {\n        if (hasConditionalFieldDef(channelDef)) {\n            const fd = replaceRepeaterInFieldDef(channelDef.condition, repeater);\n            if (fd) {\n                return Object.assign({}, channelDef, { condition: fd });\n            }\n            else {\n                const { condition } = channelDef, channelDefWithoutCondition = tslib_1.__rest(channelDef, [\"condition\"]);\n                return channelDefWithoutCondition;\n            }\n        }\n        return channelDef;\n    }\n    return undefined;\n}\nfunction replaceRepeater(mapping, repeater) {\n    const out = {};\n    for (const channel in mapping) {\n        if (mapping.hasOwnProperty(channel)) {\n            const channelDef = mapping[channel];\n            if (isArray(channelDef)) {\n                // array cannot have condition\n                out[channel] = channelDef.map(cd => replaceRepeaterInChannelDef(cd, repeater)).filter(cd => cd);\n            }\n            else {\n                const cd = replaceRepeaterInChannelDef(channelDef, repeater);\n                if (cd !== undefined) {\n                    out[channel] = cd;\n                }\n            }\n        }\n    }\n    return out;\n}\n//# sourceMappingURL=repeater.js.map","import { isArray } from 'vega-util';\nimport { COLUMN, ROW } from '../channel';\nimport { reduce } from '../encoding';\nimport { normalize, title as fieldDefTitle, vgField } from '../fielddef';\nimport * as log from '../log';\nimport { hasDiscreteDomain } from '../scale';\nimport { DEFAULT_SORT_OP, isSortField } from '../sort';\nimport { contains } from '../util';\nimport { isVgRangeStep } from '../vega.schema';\nimport { assembleAxis } from './axis/assemble';\nimport { buildModel } from './buildmodel';\nimport { assembleFacetData } from './data/assemble';\nimport { sortArrayIndexField } from './data/calculate';\nimport { parseData } from './data/parse';\nimport { getHeaderType } from './header/index';\nimport { parseChildrenLayoutSize } from './layoutsize/parse';\nimport { ModelWithField } from './model';\nimport { replaceRepeaterInFacet } from './repeater';\nimport { parseGuideResolve } from './resolve';\nimport { assembleDomain, getFieldFromDomain } from './scale/domain';\nimport { assembleFacetSignals } from './selection/selection';\nexport function facetSortFieldName(fieldDef, sort, opt) {\n    return vgField(sort, Object.assign({ suffix: `by_${vgField(fieldDef)}` }, (opt || {})));\n}\nexport class FacetModel extends ModelWithField {\n    constructor(spec, parent, parentGivenName, repeater, config) {\n        super(spec, parent, parentGivenName, config, repeater, spec.resolve);\n        this.type = 'facet';\n        this.child = buildModel(spec.spec, this, this.getName('child'), undefined, repeater, config, false);\n        this.children = [this.child];\n        const facet = replaceRepeaterInFacet(spec.facet, repeater);\n        this.facet = this.initFacet(facet);\n    }\n    initFacet(facet) {\n        // clone to prevent side effect to the original spec\n        return reduce(facet, (normalizedFacet, fieldDef, channel) => {\n            if (!contains([ROW, COLUMN], channel)) {\n                // Drop unsupported channel\n                log.warn(log.message.incompatibleChannel(channel, 'facet'));\n                return normalizedFacet;\n            }\n            if (fieldDef.field === undefined) {\n                log.warn(log.message.emptyFieldDef(fieldDef, channel));\n                return normalizedFacet;\n            }\n            // Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.\n            normalizedFacet[channel] = normalize(fieldDef, channel);\n            return normalizedFacet;\n        }, {});\n    }\n    channelHasField(channel) {\n        return !!this.facet[channel];\n    }\n    fieldDef(channel) {\n        return this.facet[channel];\n    }\n    parseData() {\n        this.component.data = parseData(this);\n        this.child.parseData();\n    }\n    parseLayoutSize() {\n        parseChildrenLayoutSize(this);\n    }\n    parseSelection() {\n        // As a facet has a single child, the selection components are the same.\n        // The child maintains its selections to assemble signals, which remain\n        // within its unit.\n        this.child.parseSelection();\n        this.component.selection = this.child.component.selection;\n    }\n    parseMarkGroup() {\n        this.child.parseMarkGroup();\n    }\n    parseAxisAndHeader() {\n        this.child.parseAxisAndHeader();\n        this.parseHeader('column');\n        this.parseHeader('row');\n        this.mergeChildAxis('x');\n        this.mergeChildAxis('y');\n    }\n    parseHeader(channel) {\n        if (this.channelHasField(channel)) {\n            const fieldDef = this.facet[channel];\n            let title = fieldDefTitle(fieldDef, this.config, { allowDisabling: true });\n            if (this.child.component.layoutHeaders[channel].title) {\n                // merge title with child to produce \"Title / Subtitle / Sub-subtitle\"\n                title += ' / ' + this.child.component.layoutHeaders[channel].title;\n                this.child.component.layoutHeaders[channel].title = null;\n            }\n            this.component.layoutHeaders[channel] = {\n                title,\n                facetFieldDef: fieldDef,\n                // TODO: support adding label to footer as well\n                header: [this.makeHeaderComponent(channel, true)]\n            };\n        }\n    }\n    makeHeaderComponent(channel, labels) {\n        const sizeType = channel === 'row' ? 'height' : 'width';\n        return {\n            labels,\n            sizeSignal: this.child.component.layoutSize.get(sizeType) ? this.child.getSizeSignalRef(sizeType) : undefined,\n            axes: []\n        };\n    }\n    mergeChildAxis(channel) {\n        const { child } = this;\n        if (child.component.axes[channel]) {\n            const { layoutHeaders, resolve } = this.component;\n            resolve.axis[channel] = parseGuideResolve(resolve, channel);\n            if (resolve.axis[channel] === 'shared') {\n                // For shared axis, move the axes to facet's header or footer\n                const headerChannel = channel === 'x' ? 'column' : 'row';\n                const layoutHeader = layoutHeaders[headerChannel];\n                for (const axisComponent of child.component.axes[channel]) {\n                    const headerType = getHeaderType(axisComponent.get('orient'));\n                    layoutHeader[headerType] = layoutHeader[headerType] || [this.makeHeaderComponent(headerChannel, false)];\n                    const mainAxis = assembleAxis(axisComponent, 'main', this.config, { header: true });\n                    // LayoutHeader no longer keep track of property precedence, thus let's combine.\n                    layoutHeader[headerType][0].axes.push(mainAxis);\n                    axisComponent.mainExtracted = true;\n                }\n            }\n            else {\n                // Otherwise do nothing for independent axes\n            }\n        }\n    }\n    assembleSelectionTopLevelSignals(signals) {\n        return this.child.assembleSelectionTopLevelSignals(signals);\n    }\n    assembleSelectionSignals() {\n        this.child.assembleSelectionSignals();\n        return [];\n    }\n    assembleSelectionData(data) {\n        return this.child.assembleSelectionData(data);\n    }\n    getHeaderLayoutMixins() {\n        const layoutMixins = {};\n        ['row', 'column'].forEach((channel) => {\n            ['header', 'footer'].forEach((headerType) => {\n                const layoutHeaderComponent = this.component.layoutHeaders[channel];\n                const headerComponent = layoutHeaderComponent[headerType];\n                if (headerComponent && headerComponent[0]) {\n                    // set header/footerBand\n                    const sizeType = channel === 'row' ? 'height' : 'width';\n                    const bandType = headerType === 'header' ? 'headerBand' : 'footerBand';\n                    if (!this.child.component.layoutSize.get(sizeType)) {\n                        // If facet child does not have size signal, then apply headerBand\n                        layoutMixins[bandType] = layoutMixins[bandType] || {};\n                        layoutMixins[bandType][channel] = 0.5;\n                    }\n                    if (layoutHeaderComponent.title) {\n                        layoutMixins.offset = layoutMixins.offset || {};\n                        layoutMixins.offset[channel === 'row' ? 'rowTitle' : 'columnTitle'] = 10;\n                    }\n                }\n            });\n        });\n        return layoutMixins;\n    }\n    assembleDefaultLayout() {\n        const columns = this.channelHasField('column') ? this.columnDistinctSignal() : 1;\n        let align = 'all';\n        // Do not align the cells if the scale corresponding to the directin is indepent.\n        // We always align when we facet into both row and column.\n        if (!this.channelHasField('row') && this.component.resolve.scale.x === 'independent') {\n            align = 'none';\n        }\n        else if (!this.channelHasField('column') && this.component.resolve.scale.y === 'independent') {\n            align = 'none';\n        }\n        return Object.assign({}, this.getHeaderLayoutMixins(), (columns ? { columns } : {}), { bounds: 'full', align });\n    }\n    assembleLayoutSignals() {\n        // FIXME(https://github.com/vega/vega-lite/issues/1193): this can be incorrect if we have independent scales.\n        return this.child.assembleLayoutSignals();\n    }\n    columnDistinctSignal() {\n        if (this.parent && this.parent instanceof FacetModel) {\n            // For nested facet, we will add columns to group mark instead\n            // See discussion in https://github.com/vega/vega/issues/952\n            // and https://github.com/vega/vega-view/releases/tag/v1.2.6\n            return undefined;\n        }\n        else {\n            // In facetNode.assemble(), the name is always this.getName('column') + '_layout'.\n            const facetLayoutDataName = this.getName('column_domain');\n            return { signal: `length(data('${facetLayoutDataName}'))` };\n        }\n    }\n    assembleGroup(signals) {\n        if (this.parent && this.parent instanceof FacetModel) {\n            // Provide number of columns for layout.\n            // See discussion in https://github.com/vega/vega/issues/952\n            // and https://github.com/vega/vega-view/releases/tag/v1.2.6\n            return Object.assign({}, (this.channelHasField('column')\n                ? {\n                    encode: {\n                        update: {\n                            // TODO(https://github.com/vega/vega-lite/issues/2759):\n                            // Correct the signal for facet of concat of facet_column\n                            columns: { field: vgField(this.facet.column, { prefix: 'distinct' }) }\n                        }\n                    }\n                }\n                : {}), super.assembleGroup(signals));\n        }\n        return super.assembleGroup(signals);\n    }\n    /**\n     * Aggregate cardinality for calculating size\n     */\n    getCardinalityAggregateForChild() {\n        const fields = [];\n        const ops = [];\n        const as = [];\n        if (this.child instanceof FacetModel) {\n            if (this.child.channelHasField('column')) {\n                const field = vgField(this.child.facet.column);\n                fields.push(field);\n                ops.push('distinct');\n                as.push(`distinct_${field}`);\n            }\n        }\n        else {\n            for (const channel of ['x', 'y']) {\n                const childScaleComponent = this.child.component.scales[channel];\n                if (childScaleComponent && !childScaleComponent.merged) {\n                    const type = childScaleComponent.get('type');\n                    const range = childScaleComponent.get('range');\n                    if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n                        const domain = assembleDomain(this.child, channel);\n                        const field = getFieldFromDomain(domain);\n                        if (field) {\n                            fields.push(field);\n                            ops.push('distinct');\n                            as.push(`distinct_${field}`);\n                        }\n                        else {\n                            log.warn('Unknown field for ${channel}.  Cannot calculate view size.');\n                        }\n                    }\n                }\n            }\n        }\n        return { fields, ops, as };\n    }\n    assembleFacet() {\n        const { name, data } = this.component.data.facetRoot;\n        const { row, column } = this.facet;\n        const { fields, ops, as } = this.getCardinalityAggregateForChild();\n        const groupby = [];\n        ['row', 'column'].forEach((channel) => {\n            const fieldDef = this.facet[channel];\n            if (fieldDef) {\n                groupby.push(vgField(fieldDef));\n                const { sort } = fieldDef;\n                if (isSortField(sort)) {\n                    const { field, op = DEFAULT_SORT_OP } = sort;\n                    const outputName = facetSortFieldName(fieldDef, sort);\n                    if (row && column) {\n                        // For crossed facet, use pre-calculate field as it requires a different groupby\n                        // For each calculated field, apply max and assign them to the same name as\n                        // all values of the same group should be the same anyway.\n                        fields.push(outputName);\n                        ops.push('max');\n                        as.push(outputName);\n                    }\n                    else {\n                        fields.push(field);\n                        ops.push(op);\n                        as.push(outputName);\n                    }\n                }\n                else if (isArray(sort)) {\n                    const outputName = sortArrayIndexField(fieldDef, channel);\n                    fields.push(outputName);\n                    ops.push('max');\n                    as.push(outputName);\n                }\n            }\n        });\n        const cross = !!row && !!column;\n        return Object.assign({ name,\n            data,\n            groupby }, (cross || fields.length\n            ? {\n                aggregate: Object.assign({}, (cross ? { cross } : {}), (fields.length ? { fields, ops, as } : {}))\n            }\n            : {}));\n    }\n    headerSortFields(channel) {\n        const { facet } = this;\n        const fieldDef = facet[channel];\n        if (fieldDef) {\n            if (isSortField(fieldDef.sort)) {\n                return [facetSortFieldName(fieldDef, fieldDef.sort, { expr: 'datum' })];\n            }\n            else if (isArray(fieldDef.sort)) {\n                return [sortArrayIndexField(fieldDef, channel, { expr: 'datum' })];\n            }\n            return [vgField(fieldDef, { expr: 'datum' })];\n        }\n        return [];\n    }\n    headerSortOrder(channel) {\n        const { facet } = this;\n        const fieldDef = facet[channel];\n        if (fieldDef) {\n            const { sort } = fieldDef;\n            const order = (isSortField(sort) ? sort.order : !isArray(sort) && sort) || 'ascending';\n            return [order];\n        }\n        return [];\n    }\n    assembleMarks() {\n        const { child } = this;\n        // If we facet by two dimensions, we need to add a cross operator to the aggregation\n        // so that we create all groups\n        const facetRoot = this.component.data.facetRoot;\n        const data = assembleFacetData(facetRoot);\n        const encodeEntry = child.assembleGroupEncodeEntry(false);\n        const title = child.assembleTitle();\n        const style = child.assembleGroupStyle();\n        const markGroup = Object.assign({ name: this.getName('cell'), type: 'group' }, (title ? { title } : {}), (style ? { style } : {}), { from: {\n                facet: this.assembleFacet()\n            }, \n            // TODO: move this to after data\n            sort: {\n                field: [...this.headerSortFields('row'), ...this.headerSortFields('column')],\n                order: [...this.headerSortOrder('row'), ...this.headerSortOrder('column')]\n            } }, (data.length > 0 ? { data: data } : {}), (encodeEntry ? { encode: { update: encodeEntry } } : {}), child.assembleGroup(assembleFacetSignals(this, [])));\n        return [markGroup];\n    }\n    getMapping() {\n        return this.facet;\n    }\n}\n//# sourceMappingURL=facet.js.map","import { isInlineData, isNamedData, isUrlData, MAIN, RAW } from '../../data';\nimport * as log from '../../log';\nimport { isAggregate, isBin, isCalculate, isFilter, isFlatten, isFold, isImpute, isJoinAggregate, isLookup, isSample, isStack, isTimeUnit, isWindow } from '../../transform';\nimport { deepEqual, mergeDeep } from '../../util';\nimport { isFacetModel, isLayerModel, isUnitModel } from '../model';\nimport { requiresSelectionId } from '../selection/selection';\nimport { AggregateNode } from './aggregate';\nimport { BinNode } from './bin';\nimport { CalculateNode } from './calculate';\nimport { OutputNode } from './dataflow';\nimport { FacetNode } from './facet';\nimport { FilterNode } from './filter';\nimport { FlattenTransformNode } from './flatten';\nimport { FoldTransformNode } from './fold';\nimport { ParseNode } from './formatparse';\nimport { GeoJSONNode } from './geojson';\nimport { GeoPointNode } from './geopoint';\nimport { IdentifierNode } from './identifier';\nimport { ImputeNode } from './impute';\nimport { AncestorParse } from './index';\nimport { JoinAggregateTransformNode } from './joinaggregate';\nimport { makeJoinAggregateFromFacet } from './joinaggregatefacet';\nimport { LookupNode } from './lookup';\nimport { SampleTransformNode } from './sample';\nimport { SourceNode } from './source';\nimport { StackNode } from './stack';\nimport { TimeUnitNode } from './timeunit';\nimport { WindowTransformNode } from './window';\nexport function findSource(data, sources) {\n    for (const other of sources) {\n        const otherData = other.data;\n        if (isInlineData(data) && isInlineData(otherData)) {\n            const srcVals = data.values;\n            const otherVals = otherData.values;\n            if (deepEqual(srcVals, otherVals)) {\n                return other;\n            }\n        }\n        else if (isUrlData(data) && isUrlData(otherData)) {\n            if (data.url === otherData.url) {\n                return other;\n            }\n        }\n        else if (isNamedData(data)) {\n            if (data.name === other.dataName) {\n                return other;\n            }\n        }\n    }\n    return null;\n}\nfunction parseRoot(model, sources) {\n    if (model.data || !model.parent) {\n        // if the model defines a data source or is the root, create a source node\n        const existingSource = findSource(model.data, sources);\n        if (existingSource) {\n            existingSource.data.format = mergeDeep({}, model.data.format, existingSource.data.format);\n            return existingSource;\n        }\n        else {\n            const source = new SourceNode(model.data);\n            sources.push(source);\n            return source;\n        }\n    }\n    else {\n        // If we don't have a source defined (overriding parent's data), use the parent's facet root or main.\n        return model.parent.component.data.facetRoot\n            ? model.parent.component.data.facetRoot\n            : model.parent.component.data.main;\n    }\n}\n/**\n * Parses a transforms array into a chain of connected dataflow nodes.\n */\nexport function parseTransformArray(head, model, ancestorParse) {\n    let lookupCounter = 0;\n    for (const t of model.transforms) {\n        let derivedType = undefined;\n        let transformNode;\n        if (isCalculate(t)) {\n            transformNode = head = new CalculateNode(head, t);\n            derivedType = 'derived';\n        }\n        else if (isFilter(t)) {\n            transformNode = head = ParseNode.makeImplicitFromFilterTransform(head, t, ancestorParse) || head;\n            head = new FilterNode(head, model, t.filter);\n        }\n        else if (isBin(t)) {\n            transformNode = head = BinNode.makeFromTransform(head, t, model);\n            derivedType = 'number';\n        }\n        else if (isTimeUnit(t)) {\n            transformNode = head = TimeUnitNode.makeFromTransform(head, t);\n            derivedType = 'date';\n            // Create parse node because the input to time unit is always date.\n            const parsedAs = ancestorParse.getWithExplicit(t.field);\n            if (parsedAs.value === undefined) {\n                head = new ParseNode(head, { [t.field]: derivedType });\n                ancestorParse.set(t.field, derivedType, false);\n            }\n        }\n        else if (isAggregate(t)) {\n            transformNode = head = AggregateNode.makeFromTransform(head, t);\n            derivedType = 'number';\n            if (requiresSelectionId(model)) {\n                head = new IdentifierNode(head);\n            }\n        }\n        else if (isLookup(t)) {\n            transformNode = head = LookupNode.make(head, model, t, lookupCounter++);\n            derivedType = 'derived';\n        }\n        else if (isWindow(t)) {\n            transformNode = head = new WindowTransformNode(head, t);\n            derivedType = 'number';\n        }\n        else if (isJoinAggregate(t)) {\n            transformNode = head = new JoinAggregateTransformNode(head, t);\n            derivedType = 'number';\n        }\n        else if (isStack(t)) {\n            transformNode = head = StackNode.makeFromTransform(head, t);\n            derivedType = 'derived';\n        }\n        else if (isFold(t)) {\n            transformNode = head = new FoldTransformNode(head, t);\n            derivedType = 'derived';\n        }\n        else if (isFlatten(t)) {\n            transformNode = head = new FlattenTransformNode(head, t);\n            derivedType = 'derived';\n        }\n        else if (isSample(t)) {\n            head = new SampleTransformNode(head, t);\n        }\n        else if (isImpute(t)) {\n            transformNode = head = ImputeNode.makeFromTransform(head, t);\n            derivedType = 'derived';\n        }\n        else {\n            log.warn(log.message.invalidTransformIgnored(t));\n            continue;\n        }\n        if (transformNode && derivedType !== undefined) {\n            for (const field of transformNode.producedFields()) {\n                ancestorParse.set(field, derivedType, false);\n            }\n        }\n    }\n    return head;\n}\n/*\nDescription of the dataflow (http://asciiflow.com/):\n     +--------+\n     | Source |\n     +---+----+\n         |\n         v\n     FormatParse\n     (explicit)\n         |\n         v\n     Transforms\n(Filter, Calculate, Binning, TimeUnit, Aggregate, Window, ...)\n         |\n         v\n     FormatParse\n     (implicit)\n         |\n         v\n Binning (in `encoding`)\n         |\n         v\n Timeunit (in `encoding`)\n         |\n         v\nFormula From Sort Array\n         |\n         v\n      +--+--+\n      | Raw |\n      +-----+\n         |\n         v\n  Aggregate (in `encoding`)\n         |\n         v\n  Stack (in `encoding`)\n         |\n         v\n  Invalid Filter\n         |\n         v\n   +----------+\n   |   Main   |\n   +----------+\n         |\n         v\n     +-------+\n     | Facet |----> \"column\", \"column-layout\", and \"row\"\n     +-------+\n         |\n         v\n  ...Child data...\n*/\nexport function parseData(model) {\n    let head = parseRoot(model, model.component.data.sources);\n    const { outputNodes, outputNodeRefCounts } = model.component.data;\n    const ancestorParse = model.parent ? model.parent.component.data.ancestorParse.clone() : new AncestorParse();\n    // format.parse: null means disable parsing\n    if (model.data && model.data.format && model.data.format.parse === null) {\n        ancestorParse.parseNothing = true;\n    }\n    head = ParseNode.makeExplicit(head, model, ancestorParse) || head;\n    // Default discrete selections require an identifier transform to\n    // uniquely identify data points as the _id field is volatile. Add\n    // this transform at the head of our pipeline such that the identifier\n    // field is available for all subsequent datasets. Additional identifier\n    // transforms will be necessary when new tuples are constructed\n    // (e.g., post-aggregation).\n    if (requiresSelectionId(model) && (isUnitModel(model) || isLayerModel(model))) {\n        head = new IdentifierNode(head);\n    }\n    // HACK: This is equivalent for merging bin extent for union scale.\n    // FIXME(https://github.com/vega/vega-lite/issues/2270): Correctly merge extent / bin node for shared bin scale\n    const parentIsLayer = model.parent && isLayerModel(model.parent);\n    if (isUnitModel(model) || isFacetModel(model)) {\n        if (parentIsLayer) {\n            head = BinNode.makeFromEncoding(head, model) || head;\n        }\n    }\n    if (model.transforms.length > 0) {\n        head = parseTransformArray(head, model, ancestorParse);\n    }\n    head = ParseNode.makeImplicitFromEncoding(head, model, ancestorParse) || head;\n    if (isUnitModel(model)) {\n        head = GeoJSONNode.parseAll(head, model);\n        head = GeoPointNode.parseAll(head, model);\n    }\n    if (isUnitModel(model) || isFacetModel(model)) {\n        if (!parentIsLayer) {\n            head = BinNode.makeFromEncoding(head, model) || head;\n        }\n        head = TimeUnitNode.makeFromEncoding(head, model) || head;\n        head = CalculateNode.parseAllForSortIndex(head, model);\n    }\n    // add an output node pre aggregation\n    const rawName = model.getName(RAW);\n    const raw = new OutputNode(head, rawName, RAW, outputNodeRefCounts);\n    outputNodes[rawName] = raw;\n    head = raw;\n    if (isUnitModel(model)) {\n        const agg = AggregateNode.makeFromEncoding(head, model);\n        if (agg) {\n            head = agg;\n            if (requiresSelectionId(model)) {\n                head = new IdentifierNode(head);\n            }\n        }\n        head = ImputeNode.makeFromEncoding(head, model) || head;\n        head = StackNode.makeFromEncoding(head, model) || head;\n    }\n    // output node for marks\n    const mainName = model.getName(MAIN);\n    const main = new OutputNode(head, mainName, MAIN, outputNodeRefCounts);\n    outputNodes[mainName] = main;\n    head = main;\n    // add facet marker\n    let facetRoot = null;\n    if (isFacetModel(model)) {\n        const facetName = model.getName('facet');\n        // Derive new sort index field for facet's sort array\n        head = CalculateNode.parseAllForSortIndex(head, model);\n        // Derive new aggregate for facet's sort field\n        // augment data source with new fields for crossed facet\n        head = makeJoinAggregateFromFacet(head, model.facet) || head;\n        facetRoot = new FacetNode(head, model, facetName, main.getSource());\n        outputNodes[facetName] = facetRoot;\n        head = facetRoot;\n    }\n    return Object.assign({}, model.component.data, { outputNodes,\n        outputNodeRefCounts,\n        raw,\n        main,\n        facetRoot,\n        ancestorParse });\n}\n//# sourceMappingURL=parse.js.map","import { vgField } from '../../fielddef';\nimport { DEFAULT_SORT_OP, isSortField } from '../../sort';\nimport { facetSortFieldName } from '../facet';\nimport { JoinAggregateTransformNode } from './joinaggregate';\nexport function makeJoinAggregateFromFacet(parent, facet) {\n    const { row, column } = facet;\n    if (row && column) {\n        let newParent = null;\n        // only need to make one for crossed facet\n        for (const fieldDef of [row, column]) {\n            if (isSortField(fieldDef.sort)) {\n                const { field, op = DEFAULT_SORT_OP } = fieldDef.sort;\n                parent = newParent = new JoinAggregateTransformNode(parent, {\n                    joinaggregate: [\n                        {\n                            op,\n                            field,\n                            as: facetSortFieldName(fieldDef, fieldDef.sort, { forAs: true })\n                        }\n                    ],\n                    groupby: [vgField(fieldDef)]\n                });\n            }\n        }\n        return newParent;\n    }\n    return null;\n}\n//# sourceMappingURL=joinaggregatefacet.js.map","import { keys } from '../util';\nimport { parseData } from './data/parse';\nimport { assembleLayoutSignals } from './layoutsize/assemble';\nimport { Model } from './model';\nexport class BaseConcatModel extends Model {\n    constructor(spec, parent, parentGivenName, config, repeater, resolve) {\n        super(spec, parent, parentGivenName, config, repeater, resolve);\n    }\n    parseData() {\n        this.component.data = parseData(this);\n        this.children.forEach(child => {\n            child.parseData();\n        });\n    }\n    parseSelection() {\n        // Merge selections up the hierarchy so that they may be referenced\n        // across unit specs. Persist their definitions within each child\n        // to assemble signals which remain within output Vega unit groups.\n        this.component.selection = {};\n        for (const child of this.children) {\n            child.parseSelection();\n            keys(child.component.selection).forEach(key => {\n                this.component.selection[key] = child.component.selection[key];\n            });\n        }\n    }\n    parseMarkGroup() {\n        for (const child of this.children) {\n            child.parseMarkGroup();\n        }\n    }\n    parseAxisAndHeader() {\n        for (const child of this.children) {\n            child.parseAxisAndHeader();\n        }\n        // TODO(#2415): support shared axes\n    }\n    assembleSelectionTopLevelSignals(signals) {\n        return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);\n    }\n    assembleSelectionSignals() {\n        this.children.forEach(child => child.assembleSelectionSignals());\n        return [];\n    }\n    assembleLayoutSignals() {\n        return this.children.reduce((signals, child) => {\n            return [...signals, ...child.assembleLayoutSignals()];\n        }, assembleLayoutSignals(this));\n    }\n    assembleSelectionData(data) {\n        return this.children.reduce((db, child) => child.assembleSelectionData(db), data);\n    }\n    assembleMarks() {\n        // only children have marks\n        return this.children.map(child => {\n            const title = child.assembleTitle();\n            const style = child.assembleGroupStyle();\n            const encodeEntry = child.assembleGroupEncodeEntry(false);\n            return Object.assign({ type: 'group', name: child.getName('group') }, (title ? { title } : {}), (style ? { style } : {}), (encodeEntry ? { encode: { update: encodeEntry } } : {}), child.assembleGroup());\n        });\n    }\n}\n//# sourceMappingURL=baseconcat.js.map","import * as log from '../log';\nimport { isVConcatSpec } from '../spec';\nimport { BaseConcatModel } from './baseconcat';\nimport { buildModel } from './buildmodel';\nimport { parseConcatLayoutSize } from './layoutsize/parse';\nexport class ConcatModel extends BaseConcatModel {\n    constructor(spec, parent, parentGivenName, repeater, config) {\n        super(spec, parent, parentGivenName, config, repeater, spec.resolve);\n        this.type = 'concat';\n        if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {\n            log.warn(log.message.CONCAT_CANNOT_SHARE_AXIS);\n        }\n        this.isVConcat = isVConcatSpec(spec);\n        this.children = (isVConcatSpec(spec) ? spec.vconcat : spec.hconcat).map((child, i) => {\n            return buildModel(child, this, this.getName('concat_' + i), undefined, repeater, config, false);\n        });\n    }\n    parseLayoutSize() {\n        parseConcatLayoutSize(this);\n    }\n    parseAxisGroup() {\n        return null;\n    }\n    assembleDefaultLayout() {\n        return Object.assign({}, (this.isVConcat ? { columns: 1 } : {}), { bounds: 'full', \n            // Use align each so it can work with multiple plots with different size\n            align: 'each' });\n    }\n}\n//# sourceMappingURL=concat.js.map","import { duplicate } from '../../util';\nimport { Split } from '../split';\nfunction isFalseOrNull(v) {\n    return v === false || v === null;\n}\nexport class AxisComponent extends Split {\n    constructor(explicit = {}, implicit = {}, mainExtracted = false) {\n        super();\n        this.explicit = explicit;\n        this.implicit = implicit;\n        this.mainExtracted = mainExtracted;\n    }\n    clone() {\n        return new AxisComponent(duplicate(this.explicit), duplicate(this.implicit), this.mainExtracted);\n    }\n    hasAxisPart(part) {\n        // FIXME(https://github.com/vega/vega-lite/issues/2552) this method can be wrong if users use a Vega theme.\n        if (part === 'axis') {\n            // always has the axis container part\n            return true;\n        }\n        if (part === 'grid' || part === 'title') {\n            return !!this.get(part);\n        }\n        // Other parts are enabled by default, so they should not be false or null.\n        return !isFalseOrNull(this.get(part));\n    }\n}\n//# sourceMappingURL=component.js.map","export function getAxisConfig(property, config, channel, orient = '', scaleType) {\n    // configTypes to loop, starting from higher precedence\n    const configTypes = (scaleType === 'band' ? ['axisBand'] : []).concat([\n        channel === 'x' ? 'axisX' : 'axisY',\n        'axis' + orient.substr(0, 1).toUpperCase() + orient.substr(1),\n        'axis'\n    ]);\n    for (const configType of configTypes) {\n        if (config[configType] && config[configType][property] !== undefined) {\n            return config[configType][property];\n        }\n    }\n    return undefined;\n}\n//# sourceMappingURL=config.js.map","import { isBinning } from '../../bin';\nimport { X, Y } from '../../channel';\nimport { valueArray } from '../../fielddef';\nimport * as log from '../../log';\nimport { hasDiscreteDomain } from '../../scale';\nimport { NOMINAL, ORDINAL } from '../../type';\nimport { contains } from '../../util';\nimport { getAxisConfig } from './config';\n// TODO: we need to refactor this method after we take care of config refactoring\n/**\n * Default rules for whether to show a grid should be shown for a channel.\n * If `grid` is unspecified, the default value is `true` for ordinal scales that are not binned\n */\nexport function defaultGrid(scaleType, fieldDef) {\n    return !hasDiscreteDomain(scaleType) && !isBinning(fieldDef.bin);\n}\nexport function gridScale(model, channel) {\n    const gridChannel = channel === 'x' ? 'y' : 'x';\n    if (model.getScaleComponent(gridChannel)) {\n        return model.scaleName(gridChannel);\n    }\n    return undefined;\n}\nexport function labelAngle(model, specifiedAxis, channel, fieldDef) {\n    // try axis value\n    if (specifiedAxis.labelAngle !== undefined) {\n        // Make angle within [0,360)\n        return ((specifiedAxis.labelAngle % 360) + 360) % 360;\n    }\n    else {\n        // try axis config value\n        const angle = getAxisConfig('labelAngle', model.config, channel, orient(channel), model.getScaleComponent(channel).get('type'));\n        if (angle !== undefined) {\n            return ((angle % 360) + 360) % 360;\n        }\n        else {\n            // get default value\n            if (channel === X && contains([NOMINAL, ORDINAL], fieldDef.type)) {\n                return 270;\n            }\n            // no default\n            return undefined;\n        }\n    }\n}\nexport function defaultLabelBaseline(angle, axisOrient) {\n    if (angle !== undefined) {\n        if (axisOrient === 'top' || axisOrient === 'bottom') {\n            if (angle <= 45 || 315 <= angle) {\n                return axisOrient === 'top' ? 'bottom' : 'top';\n            }\n            else if (135 <= angle && angle <= 225) {\n                return axisOrient === 'top' ? 'top' : 'bottom';\n            }\n            else {\n                return 'middle';\n            }\n        }\n        else {\n            if (angle <= 45 || 315 <= angle || (135 <= angle && angle <= 225)) {\n                return 'middle';\n            }\n            else if (45 <= angle && angle <= 135) {\n                return axisOrient === 'left' ? 'top' : 'bottom';\n            }\n            else {\n                return axisOrient === 'left' ? 'bottom' : 'top';\n            }\n        }\n    }\n    return undefined;\n}\nexport function defaultLabelAlign(angle, axisOrient) {\n    if (angle !== undefined) {\n        angle = ((angle % 360) + 360) % 360;\n        if (axisOrient === 'top' || axisOrient === 'bottom') {\n            if (angle % 180 === 0) {\n                return 'center';\n            }\n            else if (0 < angle && angle < 180) {\n                return axisOrient === 'top' ? 'right' : 'left';\n            }\n            else {\n                return axisOrient === 'top' ? 'left' : 'right';\n            }\n        }\n        else {\n            if ((angle + 90) % 180 === 0) {\n                return 'center';\n            }\n            else if (90 <= angle && angle < 270) {\n                return axisOrient === 'left' ? 'left' : 'right';\n            }\n            else {\n                return axisOrient === 'left' ? 'right' : 'left';\n            }\n        }\n    }\n    return undefined;\n}\nexport function defaultLabelFlush(fieldDef, channel) {\n    if (channel === 'x' && contains(['quantitative', 'temporal'], fieldDef.type)) {\n        return true;\n    }\n    return undefined;\n}\nexport function defaultLabelOverlap(fieldDef, scaleType) {\n    // do not prevent overlap for nominal data because there is no way to infer what the missing labels are\n    if (fieldDef.type !== 'nominal') {\n        if (scaleType === 'log') {\n            return 'greedy';\n        }\n        return true;\n    }\n    return undefined;\n}\nexport function orient(channel) {\n    switch (channel) {\n        case X:\n            return 'bottom';\n        case Y:\n            return 'left';\n    }\n    /* istanbul ignore next: This should never happen. */\n    throw new Error(log.message.INVALID_CHANNEL_FOR_AXIS);\n}\nexport function defaultTickCount({ fieldDef, scaleType, size, scaleName, specifiedAxis = {} }) {\n    if (!hasDiscreteDomain(scaleType) &&\n        scaleType !== 'log' &&\n        !contains(['month', 'hours', 'day', 'quarter'], fieldDef.timeUnit)) {\n        if (isBinning(fieldDef.bin)) {\n            // for binned data, we don't want more ticks than maxbins\n            return { signal: `ceil(${size.signal}/10)` };\n        }\n        return { signal: `ceil(${size.signal}/40)` };\n    }\n    return undefined;\n}\nexport function values(specifiedAxis, model, fieldDef, channel) {\n    const vals = specifiedAxis.values;\n    if (vals) {\n        return valueArray(fieldDef, vals);\n    }\n    return undefined;\n}\n//# sourceMappingURL=properties.js.map","import { AXIS_PARTS, isAxisProperty, VG_AXIS_PROPERTIES } from '../../axis';\nimport { isBinned } from '../../bin';\nimport { POSITION_SCALE_CHANNELS, X, Y } from '../../channel';\nimport { toFieldDefBase } from '../../fielddef';\nimport { getFirstDefined, keys } from '../../util';\nimport { mergeTitle, mergeTitleComponent, mergeTitleFieldDefs, numberFormat } from '../common';\nimport { guideEncodeEntry } from '../guide';\nimport { parseGuideResolve } from '../resolve';\nimport { defaultTieBreaker, mergeValuesWithExplicit } from '../split';\nimport { AxisComponent } from './component';\nimport { getAxisConfig } from './config';\nimport * as encode from './encode';\nimport * as properties from './properties';\nexport function parseUnitAxis(model) {\n    return POSITION_SCALE_CHANNELS.reduce((axis, channel) => {\n        if (model.component.scales[channel] && model.axis(channel)) {\n            axis[channel] = [parseAxis(channel, model)];\n        }\n        return axis;\n    }, {});\n}\nconst OPPOSITE_ORIENT = {\n    bottom: 'top',\n    top: 'bottom',\n    left: 'right',\n    right: 'left'\n};\nexport function parseLayerAxis(model) {\n    const { axes, resolve } = model.component;\n    const axisCount = { top: 0, bottom: 0, right: 0, left: 0 };\n    for (const child of model.children) {\n        child.parseAxisAndHeader();\n        for (const channel of keys(child.component.axes)) {\n            resolve.axis[channel] = parseGuideResolve(model.component.resolve, channel);\n            if (resolve.axis[channel] === 'shared') {\n                // If the resolve says shared (and has not been overridden)\n                // We will try to merge and see if there is a conflict\n                axes[channel] = mergeAxisComponents(axes[channel], child.component.axes[channel]);\n                if (!axes[channel]) {\n                    // If merge returns nothing, there is a conflict so we cannot make the axis shared.\n                    // Thus, mark axis as independent and remove the axis component.\n                    resolve.axis[channel] = 'independent';\n                    delete axes[channel];\n                }\n            }\n        }\n    }\n    // Move axes to layer's axis component and merge shared axes\n    for (const channel of [X, Y]) {\n        for (const child of model.children) {\n            if (!child.component.axes[channel]) {\n                // skip if the child does not have a particular axis\n                continue;\n            }\n            if (resolve.axis[channel] === 'independent') {\n                // If axes are independent, concat the axisComponent array.\n                axes[channel] = (axes[channel] || []).concat(child.component.axes[channel]);\n                // Automatically adjust orient\n                for (const axisComponent of child.component.axes[channel]) {\n                    const { value: orient, explicit } = axisComponent.getWithExplicit('orient');\n                    if (axisCount[orient] > 0 && !explicit) {\n                        // Change axis orient if the number do not match\n                        const oppositeOrient = OPPOSITE_ORIENT[orient];\n                        if (axisCount[orient] > axisCount[oppositeOrient]) {\n                            axisComponent.set('orient', oppositeOrient, false);\n                        }\n                    }\n                    axisCount[orient]++;\n                    // TODO(https://github.com/vega/vega-lite/issues/2634): automatically add extra offset?\n                }\n            }\n            // After merging, make sure to remove axes from child\n            delete child.component.axes[channel];\n        }\n    }\n}\nfunction mergeAxisComponents(mergedAxisCmpts, childAxisCmpts) {\n    if (mergedAxisCmpts) {\n        // FIXME: this is a bit wrong once we support multiple axes\n        if (mergedAxisCmpts.length !== childAxisCmpts.length) {\n            return undefined; // Cannot merge axis component with different number of axes.\n        }\n        const length = mergedAxisCmpts.length;\n        for (let i = 0; i < length; i++) {\n            const merged = mergedAxisCmpts[i];\n            const child = childAxisCmpts[i];\n            if (!!merged !== !!child) {\n                return undefined;\n            }\n            else if (merged && child) {\n                const mergedOrient = merged.getWithExplicit('orient');\n                const childOrient = child.getWithExplicit('orient');\n                if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {\n                    // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)\n                    // Cannot merge due to inconsistent orient\n                    return undefined;\n                }\n                else {\n                    mergedAxisCmpts[i] = mergeAxisComponent(merged, child);\n                }\n            }\n        }\n    }\n    else {\n        // For first one, return a copy of the child\n        return childAxisCmpts.map(axisComponent => axisComponent.clone());\n    }\n    return mergedAxisCmpts;\n}\nfunction mergeAxisComponent(merged, child) {\n    for (const prop of VG_AXIS_PROPERTIES) {\n        const mergedValueWithExplicit = mergeValuesWithExplicit(merged.getWithExplicit(prop), child.getWithExplicit(prop), prop, 'axis', \n        // Tie breaker function\n        (v1, v2) => {\n            switch (prop) {\n                case 'title':\n                    return mergeTitleComponent(v1, v2);\n                case 'gridScale':\n                    return {\n                        explicit: v1.explicit,\n                        value: getFirstDefined(v1.value, v2.value)\n                    };\n            }\n            return defaultTieBreaker(v1, v2, prop, 'axis');\n        });\n        merged.setWithExplicit(prop, mergedValueWithExplicit);\n    }\n    return merged;\n}\nfunction getFieldDefTitle(model, channel) {\n    const channel2 = channel === 'x' ? 'x2' : 'y2';\n    const fieldDef = model.fieldDef(channel);\n    const fieldDef2 = model.fieldDef(channel2);\n    const title1 = fieldDef ? fieldDef.title : undefined;\n    const title2 = fieldDef2 ? fieldDef2.title : undefined;\n    if (title1 && title2) {\n        return mergeTitle(title1, title2);\n    }\n    else if (title1) {\n        return title1;\n    }\n    else if (title2) {\n        return title2;\n    }\n    else if (title1 !== undefined) {\n        // falsy value to disable config\n        return title1;\n    }\n    else if (title2 !== undefined) {\n        // falsy value to disable config\n        return title2;\n    }\n    return undefined;\n}\nfunction isExplicit(value, property, axis, model, channel) {\n    switch (property) {\n        case 'values':\n            return !!axis.values;\n        // specified axis.values is already respected, but may get transformed.\n        case 'encode':\n            // both VL axis.encoding and axis.labelAngle affect VG axis.encode\n            return !!axis.encoding || !!axis.labelAngle;\n        case 'title':\n            // title can be explicit if fieldDef.title is set\n            if (value === getFieldDefTitle(model, channel)) {\n                return true;\n            }\n    }\n    // Otherwise, things are explicit if the returned value matches the specified property\n    return value === axis[property];\n}\nfunction parseAxis(channel, model) {\n    const axis = model.axis(channel);\n    const axisComponent = new AxisComponent();\n    // 1.2. Add properties\n    VG_AXIS_PROPERTIES.forEach(property => {\n        const value = getProperty(property, axis, channel, model);\n        if (value !== undefined) {\n            const explicit = isExplicit(value, property, axis, model, channel);\n            const configValue = getAxisConfig(property, model.config, channel, axisComponent.get('orient'), model.getScaleComponent(channel).get('type'));\n            // only set property if it is explicitly set or has no config value (otherwise we will accidentally override config)\n            if (explicit || configValue === undefined) {\n                // Do not apply implicit rule if there is a config value\n                axisComponent.set(property, value, explicit);\n            }\n            else if (property === 'grid' && configValue) {\n                // Grid is an exception because we need to set grid = true to generate another grid axis\n                axisComponent.set(property, configValue, false);\n            }\n        }\n    });\n    // 2) Add guide encode definition groups\n    const axisEncoding = axis.encoding || {};\n    const axisEncode = AXIS_PARTS.reduce((e, part) => {\n        if (!axisComponent.hasAxisPart(part)) {\n            // No need to create encode for a disabled part.\n            return e;\n        }\n        const axisEncodingPart = guideEncodeEntry(axisEncoding[part] || {}, model);\n        const value = part === 'labels'\n            ? encode.labels(model, channel, axisEncodingPart, axisComponent.get('orient'))\n            : axisEncodingPart;\n        if (value !== undefined && keys(value).length > 0) {\n            e[part] = { update: value };\n        }\n        return e;\n    }, {});\n    // FIXME: By having encode as one property, we won't have fine grained encode merging.\n    if (keys(axisEncode).length > 0) {\n        axisComponent.set('encode', axisEncode, !!axis.encoding || axis.labelAngle !== undefined);\n    }\n    return axisComponent;\n}\nfunction getProperty(property, specifiedAxis, channel, model) {\n    const fieldDef = model.fieldDef(channel);\n    // Some properties depend on labelAngle so we have to declare it here.\n    // Also, we don't use `getFirstDefined` for labelAngle\n    // as we want to normalize specified value to be within [0,360)\n    const labelAngle = properties.labelAngle(model, specifiedAxis, channel, fieldDef);\n    switch (property) {\n        case 'scale':\n            return model.scaleName(channel);\n        case 'gridScale':\n            return properties.gridScale(model, channel);\n        case 'format':\n            // We don't include temporal field here as we apply format in encode block\n            return numberFormat(fieldDef, specifiedAxis.format, model.config);\n        case 'grid': {\n            if (isBinned(model.fieldDef(channel).bin)) {\n                return false;\n            }\n            else {\n                const scaleType = model.getScaleComponent(channel).get('type');\n                return getFirstDefined(specifiedAxis.grid, properties.defaultGrid(scaleType, fieldDef));\n            }\n        }\n        case 'labelAlign':\n            return getFirstDefined(specifiedAxis.labelAlign, properties.defaultLabelAlign(labelAngle, properties.orient(channel)));\n        case 'labelAngle':\n            return labelAngle;\n        case 'labelBaseline':\n            return getFirstDefined(specifiedAxis.labelBaseline, properties.defaultLabelBaseline(labelAngle, properties.orient(channel)));\n        case 'labelFlush':\n            return getFirstDefined(specifiedAxis.labelFlush, properties.defaultLabelFlush(fieldDef, channel));\n        case 'labelOverlap': {\n            const scaleType = model.getScaleComponent(channel).get('type');\n            return getFirstDefined(specifiedAxis.labelOverlap, properties.defaultLabelOverlap(fieldDef, scaleType));\n        }\n        case 'orient':\n            return getFirstDefined(specifiedAxis.orient, properties.orient(channel));\n        case 'tickCount': {\n            const scaleType = model.getScaleComponent(channel).get('type');\n            const scaleName = model.scaleName(channel);\n            const sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;\n            const size = sizeType ? model.getSizeSignalRef(sizeType) : undefined;\n            return getFirstDefined(specifiedAxis.tickCount, properties.defaultTickCount({ fieldDef, scaleType, size, scaleName, specifiedAxis }));\n        }\n        case 'title':\n            const channel2 = channel === 'x' ? 'x2' : 'y2';\n            const fieldDef2 = model.fieldDef(channel2);\n            // Keep undefined so we use default if title is unspecified.\n            // For other falsy value, keep them so we will hide the title.\n            return getFirstDefined(specifiedAxis.title, getFieldDefTitle(model, channel), // If title not specified, store base parts of fieldDef (and fieldDef2 if exists)\n            mergeTitleFieldDefs([toFieldDefBase(fieldDef)], fieldDef2 ? [toFieldDefBase(fieldDef2)] : []));\n        case 'values':\n            return properties.values(specifiedAxis, model, fieldDef, channel);\n    }\n    // Otherwise, return specified property.\n    return isAxisProperty(property) ? specifiedAxis[property] : undefined;\n}\n//# sourceMappingURL=parse.js.map","import { isTimeFieldDef } from '../../fielddef';\nimport { ScaleType } from '../../scale';\nimport { keys } from '../../util';\nimport { timeFormatExpression } from '../common';\nexport function labels(model, channel, specifiedLabelsSpec, orient) {\n    const fieldDef = model.fieldDef(channel) ||\n        (channel === 'x' ? model.fieldDef('x2') : channel === 'y' ? model.fieldDef('y2') : undefined);\n    const axis = model.axis(channel);\n    const config = model.config;\n    let labelsSpec = {};\n    // Text\n    if (isTimeFieldDef(fieldDef)) {\n        const isUTCScale = model.getScaleComponent(channel).get('type') === ScaleType.UTC;\n        const expr = timeFormatExpression('datum.value', fieldDef.timeUnit, axis.format, config.axis.shortTimeLabels, null, isUTCScale);\n        if (expr) {\n            labelsSpec.text = { signal: expr };\n        }\n    }\n    labelsSpec = Object.assign({}, labelsSpec, specifiedLabelsSpec);\n    return keys(labelsSpec).length === 0 ? undefined : labelsSpec;\n}\n//# sourceMappingURL=encode.js.map","import { isBinned, isBinning } from '../../bin';\nimport { isAggregate } from '../../encoding';\nimport { isContinuous, isFieldDef } from '../../fielddef';\nimport * as log from '../../log';\nimport { AREA, BAR, CIRCLE, isMarkDef, LINE, POINT, RECT, RULE, SQUARE, TEXT, TICK } from '../../mark';\nimport { QUANTITATIVE, TEMPORAL } from '../../type';\nimport { contains, getFirstDefined } from '../../util';\nimport { getMarkConfig } from '../common';\nexport function normalizeMarkDef(mark, encoding, config) {\n    const markDef = isMarkDef(mark) ? Object.assign({}, mark) : { type: mark };\n    // set orient, which can be overridden by rules as sometimes the specified orient is invalid.\n    const specifiedOrient = markDef.orient || getMarkConfig('orient', markDef, config);\n    markDef.orient = orient(markDef.type, encoding, specifiedOrient);\n    if (specifiedOrient !== undefined && specifiedOrient !== markDef.orient) {\n        log.warn(log.message.orientOverridden(markDef.orient, specifiedOrient));\n    }\n    // set opacity and filled if not specified in mark config\n    const specifiedOpacity = getFirstDefined(markDef.opacity, getMarkConfig('opacity', markDef, config));\n    if (specifiedOpacity === undefined) {\n        markDef.opacity = opacity(markDef.type, encoding);\n    }\n    const specifiedFilled = markDef.filled;\n    if (specifiedFilled === undefined) {\n        markDef.filled = filled(markDef, config);\n    }\n    // set cursor, which should be pointer if href channel is present unless otherwise specified\n    const specifiedCursor = markDef.cursor || getMarkConfig('cursor', markDef, config);\n    if (specifiedCursor === undefined) {\n        markDef.cursor = cursor(markDef, encoding, config);\n    }\n    return markDef;\n}\nfunction cursor(markDef, encoding, config) {\n    if (encoding.href || markDef.href || getMarkConfig('href', markDef, config)) {\n        return 'pointer';\n    }\n    return markDef.cursor;\n}\nfunction opacity(mark, encoding) {\n    if (contains([POINT, TICK, CIRCLE, SQUARE], mark)) {\n        // point-based marks\n        if (!isAggregate(encoding)) {\n            return 0.7;\n        }\n    }\n    return undefined;\n}\nfunction filled(markDef, config) {\n    const filledConfig = getMarkConfig('filled', markDef, config);\n    const mark = markDef.type;\n    return getFirstDefined(filledConfig, mark !== POINT && mark !== LINE && mark !== RULE);\n}\nfunction orient(mark, encoding, specifiedOrient) {\n    switch (mark) {\n        case POINT:\n        case CIRCLE:\n        case SQUARE:\n        case TEXT:\n        case RECT:\n            // orient is meaningless for these marks.\n            return undefined;\n    }\n    const { x, y, x2, y2 } = encoding;\n    switch (mark) {\n        case BAR:\n            if (isFieldDef(x) && isBinned(x.bin)) {\n                return 'vertical';\n            }\n            if (isFieldDef(y) && isBinned(y.bin)) {\n                return 'horizontal';\n            }\n            if (y2 || x2) {\n                // Ranged bar does not always have clear orientation, so we allow overriding\n                if (specifiedOrient) {\n                    return specifiedOrient;\n                }\n                // If y is range and x is non-range, non-bin Q, y is likely a prebinned field\n                if (!x2 && isFieldDef(x) && x.type === QUANTITATIVE && !isBinning(x.bin)) {\n                    return 'horizontal';\n                }\n                // If x is range and y is non-range, non-bin Q, x is likely a prebinned field\n                if (!y2 && isFieldDef(y) && y.type === QUANTITATIVE && !isBinning(y.bin)) {\n                    return 'vertical';\n                }\n            }\n        /* tslint:disable */\n        case RULE: // intentionally fall through\n            // return undefined for line segment rule and bar with both axis ranged\n            if (x2 && y2) {\n                return undefined;\n            }\n        case AREA: // intentionally fall through\n            // If there are range for both x and y, y (vertical) has higher precedence.\n            if (y2) {\n                if (isFieldDef(y) && isBinned(y.bin)) {\n                    return 'horizontal';\n                }\n                else {\n                    return 'vertical';\n                }\n            }\n            else if (x2) {\n                if (isFieldDef(x) && isBinned(x.bin)) {\n                    return 'vertical';\n                }\n                else {\n                    return 'horizontal';\n                }\n            }\n            else if (mark === RULE) {\n                if (encoding.x && !encoding.y) {\n                    return 'vertical';\n                }\n                else if (encoding.y && !encoding.x) {\n                    return 'horizontal';\n                }\n            }\n        case LINE: // intentional fall through\n        case TICK: // Tick is opposite to bar, line, area and never have ranged mark.\n            /* tslint:enable */\n            const xIsContinuous = isFieldDef(encoding.x) && isContinuous(encoding.x);\n            const yIsContinuous = isFieldDef(encoding.y) && isContinuous(encoding.y);\n            if (xIsContinuous && !yIsContinuous) {\n                return mark !== 'tick' ? 'horizontal' : 'vertical';\n            }\n            else if (!xIsContinuous && yIsContinuous) {\n                return mark !== 'tick' ? 'vertical' : 'horizontal';\n            }\n            else if (xIsContinuous && yIsContinuous) {\n                const xDef = encoding.x; // we can cast here since they are surely fieldDef\n                const yDef = encoding.y;\n                const xIsTemporal = xDef.type === TEMPORAL;\n                const yIsTemporal = yDef.type === TEMPORAL;\n                // temporal without timeUnit is considered continuous, but better serves as dimension\n                if (xIsTemporal && !yIsTemporal) {\n                    return mark !== 'tick' ? 'vertical' : 'horizontal';\n                }\n                else if (!xIsTemporal && yIsTemporal) {\n                    return mark !== 'tick' ? 'horizontal' : 'vertical';\n                }\n                if (!xDef.aggregate && yDef.aggregate) {\n                    return mark !== 'tick' ? 'vertical' : 'horizontal';\n                }\n                else if (xDef.aggregate && !yDef.aggregate) {\n                    return mark !== 'tick' ? 'horizontal' : 'vertical';\n                }\n                if (specifiedOrient) {\n                    // When ambiguous, use user specified one.\n                    return specifiedOrient;\n                }\n                return 'vertical';\n            }\n            else {\n                // Discrete x Discrete case\n                if (specifiedOrient) {\n                    // When ambiguous, use user specified one.\n                    return specifiedOrient;\n                }\n                return undefined;\n            }\n    }\n    return 'vertical';\n}\n//# sourceMappingURL=init.js.map","import { GEOPOSITION_CHANNELS, NONPOSITION_SCALE_CHANNELS, SCALE_CHANNELS, supportLegend, X, Y } from '../channel';\nimport { normalizeEncoding } from '../encoding';\nimport * as vlEncoding from '../encoding';\nimport { getTypedFieldDef, hasConditionalFieldDef, isFieldDef } from '../fielddef';\nimport { GEOSHAPE, isMarkDef } from '../mark';\nimport { stack } from '../stack';\nimport { duplicate } from '../util';\nimport { parseUnitAxis } from './axis/parse';\nimport { parseData } from './data/parse';\nimport { assembleLayoutSignals } from './layoutsize/assemble';\nimport { parseUnitLayoutSize } from './layoutsize/parse';\nimport { normalizeMarkDef } from './mark/init';\nimport { parseMarkGroup } from './mark/mark';\nimport { isLayerModel, ModelWithField } from './model';\nimport { replaceRepeaterInEncoding } from './repeater';\nimport { assembleTopLevelSignals, assembleUnitSelectionData, assembleUnitSelectionMarks, assembleUnitSelectionSignals, parseUnitSelection } from './selection/selection';\n/**\n * Internal model of Vega-Lite specification for the compiler.\n */\nexport class UnitModel extends ModelWithField {\n    constructor(spec, parent, parentGivenName, parentGivenSize = {}, repeater, config, fit) {\n        super(spec, parent, parentGivenName, config, repeater, undefined, spec.view);\n        this.fit = fit;\n        this.type = 'unit';\n        this.specifiedScales = {};\n        this.specifiedAxes = {};\n        this.specifiedLegends = {};\n        this.specifiedProjection = {};\n        this.selection = {};\n        this.children = [];\n        this.initSize(Object.assign({}, parentGivenSize, (spec.width ? { width: spec.width } : {}), (spec.height ? { height: spec.height } : {})));\n        const mark = isMarkDef(spec.mark) ? spec.mark.type : spec.mark;\n        const encoding = (this.encoding = normalizeEncoding(replaceRepeaterInEncoding(spec.encoding || {}, repeater), mark));\n        this.markDef = normalizeMarkDef(spec.mark, encoding, config);\n        // calculate stack properties\n        this.stack = stack(mark, encoding, this.config.stack);\n        this.specifiedScales = this.initScales(mark, encoding);\n        this.specifiedAxes = this.initAxes(encoding);\n        this.specifiedLegends = this.initLegend(encoding);\n        this.specifiedProjection = spec.projection;\n        // Selections will be initialized upon parse.\n        this.selection = spec.selection;\n    }\n    get hasProjection() {\n        const { encoding } = this;\n        const isGeoShapeMark = this.mark === GEOSHAPE;\n        const hasGeoPosition = encoding && GEOPOSITION_CHANNELS.some(channel => isFieldDef(encoding[channel]));\n        return isGeoShapeMark || hasGeoPosition;\n    }\n    /**\n     * Return specified Vega-lite scale domain for a particular channel\n     * @param channel\n     */\n    scaleDomain(channel) {\n        const scale = this.specifiedScales[channel];\n        return scale ? scale.domain : undefined;\n    }\n    axis(channel) {\n        return this.specifiedAxes[channel];\n    }\n    legend(channel) {\n        return this.specifiedLegends[channel];\n    }\n    initScales(mark, encoding) {\n        return SCALE_CHANNELS.reduce((scales, channel) => {\n            let fieldDef;\n            let specifiedScale;\n            const channelDef = encoding[channel];\n            if (isFieldDef(channelDef)) {\n                fieldDef = channelDef;\n                specifiedScale = channelDef.scale;\n            }\n            else if (hasConditionalFieldDef(channelDef)) {\n                fieldDef = channelDef.condition;\n                specifiedScale = channelDef.condition['scale'];\n            }\n            if (fieldDef) {\n                scales[channel] = specifiedScale || {};\n            }\n            return scales;\n        }, {});\n    }\n    initAxes(encoding) {\n        return [X, Y].reduce((_axis, channel) => {\n            // Position Axis\n            // TODO: handle ConditionFieldDef\n            const channelDef = encoding[channel];\n            if (isFieldDef(channelDef) ||\n                (channel === X && isFieldDef(encoding.x2)) ||\n                (channel === Y && isFieldDef(encoding.y2))) {\n                const axisSpec = isFieldDef(channelDef) ? channelDef.axis : null;\n                if (axisSpec !== null) {\n                    _axis[channel] = Object.assign({}, axisSpec);\n                }\n            }\n            return _axis;\n        }, {});\n    }\n    initLegend(encoding) {\n        return NONPOSITION_SCALE_CHANNELS.reduce((_legend, channel) => {\n            const channelDef = encoding[channel];\n            if (channelDef) {\n                const legend = isFieldDef(channelDef)\n                    ? channelDef.legend\n                    : hasConditionalFieldDef(channelDef)\n                        ? channelDef.condition['legend']\n                        : null;\n                if (legend !== null && legend !== false && supportLegend(channel)) {\n                    _legend[channel] = Object.assign({}, legend);\n                }\n            }\n            return _legend;\n        }, {});\n    }\n    parseData() {\n        this.component.data = parseData(this);\n    }\n    parseLayoutSize() {\n        parseUnitLayoutSize(this);\n    }\n    parseSelection() {\n        this.component.selection = parseUnitSelection(this, this.selection);\n    }\n    parseMarkGroup() {\n        this.component.mark = parseMarkGroup(this);\n    }\n    parseAxisAndHeader() {\n        this.component.axes = parseUnitAxis(this);\n    }\n    assembleSelectionTopLevelSignals(signals) {\n        return assembleTopLevelSignals(this, signals);\n    }\n    assembleSelectionSignals() {\n        return assembleUnitSelectionSignals(this, []);\n    }\n    assembleSelectionData(data) {\n        return assembleUnitSelectionData(this, data);\n    }\n    assembleLayout() {\n        return null;\n    }\n    assembleLayoutSignals() {\n        return assembleLayoutSignals(this);\n    }\n    assembleMarks() {\n        let marks = this.component.mark || [];\n        // If this unit is part of a layer, selections should augment\n        // all in concert rather than each unit individually. This\n        // ensures correct interleaving of clipping and brushed marks.\n        if (!this.parent || !isLayerModel(this.parent)) {\n            marks = assembleUnitSelectionMarks(this, marks);\n        }\n        return marks.map(this.correctDataNames);\n    }\n    getMapping() {\n        return this.encoding;\n    }\n    toSpec(excludeConfig, excludeData) {\n        const encoding = duplicate(this.encoding);\n        let spec;\n        spec = {\n            mark: this.markDef,\n            encoding: encoding\n        };\n        if (!excludeConfig) {\n            spec.config = duplicate(this.config);\n        }\n        if (!excludeData) {\n            spec.data = duplicate(this.data);\n        }\n        // remove defaults\n        return spec;\n    }\n    get mark() {\n        return this.markDef.type;\n    }\n    channelHasField(channel) {\n        return vlEncoding.channelHasField(this.encoding, channel);\n    }\n    fieldDef(channel) {\n        const channelDef = this.encoding[channel];\n        return getTypedFieldDef(channelDef);\n    }\n}\n//# sourceMappingURL=unit.js.map","import * as log from '../log';\nimport { isLayerSpec, isUnitSpec } from '../spec';\nimport { flatten, keys } from '../util';\nimport { parseLayerAxis } from './axis/parse';\nimport { parseData } from './data/parse';\nimport { assembleLayoutSignals } from './layoutsize/assemble';\nimport { parseLayerLayoutSize } from './layoutsize/parse';\nimport { assembleLegends } from './legend/assemble';\nimport { Model } from './model';\nimport { assembleLayerSelectionMarks } from './selection/selection';\nimport { UnitModel } from './unit';\nexport class LayerModel extends Model {\n    constructor(spec, parent, parentGivenName, parentGivenSize, repeater, config, fit) {\n        super(spec, parent, parentGivenName, config, repeater, spec.resolve, spec.view);\n        this.type = 'layer';\n        const layoutSize = Object.assign({}, parentGivenSize, (spec.width ? { width: spec.width } : {}), (spec.height ? { height: spec.height } : {}));\n        this.initSize(layoutSize);\n        this.children = spec.layer.map((layer, i) => {\n            if (isLayerSpec(layer)) {\n                return new LayerModel(layer, this, this.getName('layer_' + i), layoutSize, repeater, config, fit);\n            }\n            if (isUnitSpec(layer)) {\n                return new UnitModel(layer, this, this.getName('layer_' + i), layoutSize, repeater, config, fit);\n            }\n            throw new Error(log.message.INVALID_SPEC);\n        });\n    }\n    parseData() {\n        this.component.data = parseData(this);\n        for (const child of this.children) {\n            child.parseData();\n        }\n    }\n    parseLayoutSize() {\n        parseLayerLayoutSize(this);\n    }\n    parseSelection() {\n        // Merge selections up the hierarchy so that they may be referenced\n        // across unit specs. Persist their definitions within each child\n        // to assemble signals which remain within output Vega unit groups.\n        this.component.selection = {};\n        for (const child of this.children) {\n            child.parseSelection();\n            keys(child.component.selection).forEach(key => {\n                this.component.selection[key] = child.component.selection[key];\n            });\n        }\n    }\n    parseMarkGroup() {\n        for (const child of this.children) {\n            child.parseMarkGroup();\n        }\n    }\n    parseAxisAndHeader() {\n        parseLayerAxis(this);\n    }\n    assembleSelectionTopLevelSignals(signals) {\n        return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);\n    }\n    // TODO: Support same named selections across children.\n    assembleSelectionSignals() {\n        return this.children.reduce((signals, child) => {\n            return signals.concat(child.assembleSelectionSignals());\n        }, []);\n    }\n    assembleLayoutSignals() {\n        return this.children.reduce((signals, child) => {\n            return signals.concat(child.assembleLayoutSignals());\n        }, assembleLayoutSignals(this));\n    }\n    assembleSelectionData(data) {\n        return this.children.reduce((db, child) => child.assembleSelectionData(db), data);\n    }\n    assembleTitle() {\n        let title = super.assembleTitle();\n        if (title) {\n            return title;\n        }\n        // If title does not provide layer, look into children\n        for (const child of this.children) {\n            title = child.assembleTitle();\n            if (title) {\n                return title;\n            }\n        }\n        return undefined;\n    }\n    assembleLayout() {\n        return null;\n    }\n    assembleMarks() {\n        return assembleLayerSelectionMarks(this, flatten(this.children.map(child => {\n            return child.assembleMarks();\n        })));\n    }\n    assembleLegends() {\n        return this.children.reduce((legends, child) => {\n            return legends.concat(child.assembleLegends());\n        }, assembleLegends(this));\n    }\n}\n//# sourceMappingURL=layer.js.map","import * as log from '../log';\nimport { BaseConcatModel } from './baseconcat';\nimport { buildModel } from './buildmodel';\nimport { parseRepeatLayoutSize } from './layoutsize/parse';\nexport class RepeatModel extends BaseConcatModel {\n    constructor(spec, parent, parentGivenName, repeatValues, config) {\n        super(spec, parent, parentGivenName, config, repeatValues, spec.resolve);\n        this.type = 'repeat';\n        if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {\n            log.warn(log.message.REPEAT_CANNOT_SHARE_AXIS);\n        }\n        this.repeat = spec.repeat;\n        this.children = this._initChildren(spec, this.repeat, repeatValues, config);\n    }\n    _initChildren(spec, repeat, repeater, config) {\n        const children = [];\n        const row = repeat.row || [repeater ? repeater.row : null];\n        const column = repeat.column || [repeater ? repeater.column : null];\n        // cross product\n        for (const rowField of row) {\n            for (const columnField of column) {\n                const name = (rowField ? `__repeat_row_${rowField}` : '') + (columnField ? `__repeat_column_${columnField}` : '');\n                const childRepeat = {\n                    row: rowField,\n                    column: columnField\n                };\n                children.push(buildModel(spec.spec, this, this.getName('child' + name), undefined, childRepeat, config, false));\n            }\n        }\n        return children;\n    }\n    parseLayoutSize() {\n        parseRepeatLayoutSize(this);\n    }\n    assembleDefaultLayout() {\n        return {\n            columns: this.repeat && this.repeat.column ? this.repeat.column.length : 1,\n            bounds: 'full',\n            align: 'all'\n        };\n    }\n}\n//# sourceMappingURL=repeat.js.map","import * as log from '../log';\nimport { isConcatSpec, isFacetSpec, isLayerSpec, isRepeatSpec, isUnitSpec } from '../spec';\nimport { ConcatModel } from './concat';\nimport { FacetModel } from './facet';\nimport { LayerModel } from './layer';\nimport { RepeatModel } from './repeat';\nimport { UnitModel } from './unit';\nexport function buildModel(spec, parent, parentGivenName, unitSize, repeater, config, fit) {\n    if (isFacetSpec(spec)) {\n        return new FacetModel(spec, parent, parentGivenName, repeater, config);\n    }\n    if (isLayerSpec(spec)) {\n        return new LayerModel(spec, parent, parentGivenName, unitSize, repeater, config, fit);\n    }\n    if (isUnitSpec(spec)) {\n        return new UnitModel(spec, parent, parentGivenName, unitSize, repeater, config, fit);\n    }\n    if (isRepeatSpec(spec)) {\n        return new RepeatModel(spec, parent, parentGivenName, repeater, config);\n    }\n    if (isConcatSpec(spec)) {\n        return new ConcatModel(spec, parent, parentGivenName, repeater, config);\n    }\n    throw new Error(log.message.INVALID_SPEC);\n}\n//# sourceMappingURL=buildmodel.js.map","import { initConfig, stripAndRedirectConfig } from '../config';\nimport * as vlFieldDef from '../fielddef';\nimport * as log from '../log';\nimport { normalize } from '../normalize/index';\nimport { isLayerSpec, isUnitSpec } from '../spec';\nimport { extractTopLevelProperties, normalizeAutoSize } from '../spec/toplevel';\nimport { keys, mergeDeep } from '../util';\nimport { buildModel } from './buildmodel';\nimport { assembleRootData } from './data/assemble';\nimport { optimizeDataflow } from './data/optimize';\n/**\n * Vega-Lite's main function, for compiling Vega-lite spec into Vega spec.\n *\n * At a high-level, we make the following transformations in different phases:\n *\n * Input spec\n *     |\n *     |  (Normalization)\n *     v\n * Normalized Spec (Row/Column channels in single-view specs becomes faceted specs, composite marks becomes layered specs.)\n *     |\n *     |  (Build Model)\n *     v\n * A model tree of the spec\n *     |\n *     |  (Parse)\n *     v\n * A model tree with parsed components (intermediate structure of visualization primitives in a format that can be easily merged)\n *     |\n *     | (Optimize)\n *     v\n * A model tree with parsed components with the data component optimized\n *     |\n *     | (Assemble)\n *     v\n * Vega spec\n */\nexport function compile(inputSpec, opt = {}) {\n    // 0. Augment opt with default opts\n    if (opt.logger) {\n        // set the singleton logger to the provided logger\n        log.set(opt.logger);\n    }\n    if (opt.fieldTitle) {\n        // set the singleton field title formatter\n        vlFieldDef.setTitleFormatter(opt.fieldTitle);\n    }\n    try {\n        // 1. Initialize config by deep merging default config with the config provided via option and the input spec.\n        const config = initConfig(mergeDeep({}, opt.config, inputSpec.config));\n        // 2. Normalize: Convert input spec -> normalized spec\n        // - Decompose all extended unit specs into composition of unit spec.  For example, a box plot get expanded into multiple layers of bars, ticks, and rules. The shorthand row/column channel is also expanded to a facet spec.\n        const spec = normalize(inputSpec, config);\n        // - Normalize autosize to be a autosize properties object.\n        const autosize = normalizeAutoSize(inputSpec.autosize, config.autosize, isLayerSpec(spec) || isUnitSpec(spec));\n        // 3. Build Model: normalized spec -> Model (a tree structure)\n        // This phases instantiates the models with default config by doing a top-down traversal. This allows us to pass properties that child models derive from their parents via their constructors.\n        // See the abstract `Model` class and its children (UnitModel, LayerModel, FacetModel, RepeatModel, ConcatModel) for different types of models.\n        const model = buildModel(spec, null, '', undefined, undefined, config, autosize.type === 'fit');\n        // 4 Parse: Model --> Model with components\n        // Note that components = intermediate representations that are equivalent to Vega specs.\n        // We need these intermediate representation because we need to merge many visualization \"components\" like projections, scales, axes, and legends.\n        // We will later convert these components into actual Vega specs in the assemble phase.\n        // In this phase, we do a bottom-up traversal over the whole tree to\n        // parse for each type of components once (e.g., data, layout, mark, scale).\n        // By doing bottom-up traversal, we start parsing components of unit specs and\n        // then merge child components of parent composite specs.\n        //\n        // Please see inside model.parse() for order of different components parsed.\n        model.parse();\n        // 5. Optimize the dataflow.  This will modify the data component of the model.\n        optimizeDataflow(model.component.data);\n        // 6. Assemble: convert model components --> Vega Spec.\n        return assembleTopLevelModel(model, getTopLevelProperties(inputSpec, config, autosize), inputSpec.datasets, inputSpec.usermeta);\n    }\n    finally {\n        // Reset the singleton logger if a logger is provided\n        if (opt.logger) {\n            log.reset();\n        }\n        // Reset the singleton field title formatter if provided\n        if (opt.fieldTitle) {\n            vlFieldDef.resetTitleFormatter();\n        }\n    }\n}\nfunction getTopLevelProperties(topLevelSpec, config, autosize) {\n    return Object.assign({ autosize: keys(autosize).length === 1 && autosize.type ? autosize.type : autosize }, extractTopLevelProperties(config), extractTopLevelProperties(topLevelSpec));\n}\n/*\n * Assemble the top-level model.\n *\n * Note: this couldn't be `model.assemble()` since the top-level model\n * needs some special treatment to generate top-level properties.\n */\nfunction assembleTopLevelModel(model, topLevelProperties, datasets = {}, usermeta) {\n    // TODO: change type to become VgSpec\n    // Config with Vega-Lite only config removed.\n    const vgConfig = model.config ? stripAndRedirectConfig(model.config) : undefined;\n    const data = [].concat(model.assembleSelectionData([]), \n    // only assemble data in the root\n    assembleRootData(model.component.data, datasets));\n    const projections = model.assembleProjections();\n    const title = model.assembleTitle();\n    const style = model.assembleGroupStyle();\n    const encodeEntry = model.assembleGroupEncodeEntry(true);\n    let layoutSignals = model.assembleLayoutSignals();\n    // move width and height signals with values to top level\n    layoutSignals = layoutSignals.filter(signal => {\n        if ((signal.name === 'width' || signal.name === 'height') && signal.value !== undefined) {\n            topLevelProperties[signal.name] = +signal.value;\n            return false;\n        }\n        return true;\n    });\n    const output = Object.assign({ $schema: 'https://vega.github.io/schema/vega/v5.json' }, (model.description ? { description: model.description } : {}), topLevelProperties, (title ? { title } : {}), (style ? { style } : {}), (encodeEntry ? { encode: { update: encodeEntry } } : {}), { data }, (projections.length > 0 ? { projections: projections } : {}), model.assembleGroup([...layoutSignals, ...model.assembleSelectionTopLevelSignals([])]), (vgConfig ? { config: vgConfig } : {}), (usermeta ? { usermeta } : {}));\n    return {\n        spec: output\n        // TODO: add warning / errors here\n    };\n}\n//# sourceMappingURL=compile.js.map","import { extractTransformsFromEncoding } from './encoding';\nimport { SpecMapper } from './spec/map';\nclass TransformExtractMapper extends SpecMapper {\n    mapUnit(spec, { config }) {\n        if (spec.encoding) {\n            const { encoding: oldEncoding, transform: oldTransforms } = spec;\n            const { bins, timeUnits, aggregate, groupby, encoding } = extractTransformsFromEncoding(oldEncoding, config);\n            const transform = [\n                ...(oldTransforms ? oldTransforms : []),\n                ...bins,\n                ...timeUnits,\n                ...(!aggregate.length ? [] : [{ aggregate, groupby }])\n            ];\n            return Object.assign({}, spec, (transform.length > 0 ? { transform } : {}), { encoding });\n        }\n        else {\n            return spec;\n        }\n    }\n}\nconst extractor = new TransformExtractMapper();\n/**\n * Modifies spec extracting transformations from encoding and moving them to the transforms array\n */\nexport function extractTransforms(spec, config) {\n    return extractor.map(spec, { config });\n}\n//# sourceMappingURL=transformextract.js.map","import pkg from '../package.json';\nimport * as aggregate from './aggregate';\nimport * as axis from './axis';\nimport * as bin from './bin';\nimport * as channel from './channel';\nimport * as compositeMark from './compositemark';\nimport * as config from './config';\nimport * as data from './data';\nimport * as datetime from './datetime';\nimport * as encoding from './encoding';\nimport * as fieldDef from './fielddef';\nimport * as header from './header';\nimport * as legend from './legend';\nimport * as mark from './mark';\nimport { normalize } from './normalize';\nimport * as scale from './scale';\nimport * as sort from './sort';\nimport * as spec from './spec';\nimport * as stack from './stack';\nimport * as timeUnit from './timeunit';\nimport * as transform from './transform';\nimport * as type from './type';\nimport * as util from './util';\nimport * as validate from './validate';\nexport { compile } from './compile/compile';\nexport { extractTransforms } from './transformextract';\nexport { aggregate, axis, bin, channel, compositeMark, config, data, datetime, encoding, fieldDef, header, legend, mark, normalize, scale, sort, spec, stack, timeUnit, transform, type, util, validate, version };\nconst version = pkg.version;\n//# sourceMappingURL=index.js.map","export function isLogicalOr(op) {\n    return !!op.or;\n}\nexport function isLogicalAnd(op) {\n    return !!op.and;\n}\nexport function isLogicalNot(op) {\n    return !!op.not;\n}\nexport function forEachLeaf(op, fn) {\n    if (isLogicalNot(op)) {\n        forEachLeaf(op.not, fn);\n    }\n    else if (isLogicalAnd(op)) {\n        for (const subop of op.and) {\n            forEachLeaf(subop, fn);\n        }\n    }\n    else if (isLogicalOr(op)) {\n        for (const subop of op.or) {\n            forEachLeaf(subop, fn);\n        }\n    }\n    else {\n        fn(op);\n    }\n}\nexport function normalizeLogicalOperand(op, normalizer) {\n    if (isLogicalNot(op)) {\n        return { not: normalizeLogicalOperand(op.not, normalizer) };\n    }\n    else if (isLogicalAnd(op)) {\n        return { and: op.and.map(o => normalizeLogicalOperand(o, normalizer)) };\n    }\n    else if (isLogicalOr(op)) {\n        return { or: op.or.map(o => normalizeLogicalOperand(o, normalizer)) };\n    }\n    else {\n        return normalizer(op);\n    }\n}\n//# sourceMappingURL=logical.js.map","import { default as clone_ } from 'clone';\nimport deepEqual_ from 'fast-deep-equal';\nimport stableStringify from 'fast-json-stable-stringify';\nimport { isArray, isNumber, isString, splitAccessPath, stringValue } from 'vega-util';\nimport { isLogicalAnd, isLogicalNot, isLogicalOr } from './logical';\nexport const deepEqual = deepEqual_;\nexport const duplicate = clone_;\n/**\n * Creates an object composed of the picked object properties.\n *\n * var object = {'a': 1, 'b': '2', 'c': 3};\n * pick(object, ['a', 'c']);\n * // → {'a': 1, 'c': 3}\n *\n */\nexport function pick(obj, props) {\n    const copy = {};\n    for (const prop of props) {\n        if (obj.hasOwnProperty(prop)) {\n            copy[prop] = obj[prop];\n        }\n    }\n    return copy;\n}\n/**\n * The opposite of _.pick; this method creates an object composed of the own\n * and inherited enumerable string keyed properties of object that are not omitted.\n */\nexport function omit(obj, props) {\n    const copy = Object.assign({}, obj);\n    for (const prop of props) {\n        delete copy[prop];\n    }\n    return copy;\n}\n/**\n * Monkey patch Set so that `stringify` produces a string representation of sets.\n */\nSet.prototype['toJSON'] = function () {\n    return `Set(${[...this].map(stableStringify).join(',')})`;\n};\n/**\n * Converts any object to a string representation that can be consumed by humans.\n */\nexport const stringify = stableStringify;\n/**\n * Converts any object to a string of limited size, or a number.\n */\nexport function hash(a) {\n    if (isNumber(a)) {\n        return a;\n    }\n    const str = isString(a) ? a : stableStringify(a);\n    // short strings can be used as hash directly, longer strings are hashed to reduce memory usage\n    if (str.length < 250) {\n        return str;\n    }\n    // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n    let h = 0;\n    for (let i = 0; i < str.length; i++) {\n        const char = str.charCodeAt(i);\n        h = (h << 5) - h + char;\n        h = h & h; // Convert to 32bit integer\n    }\n    return h;\n}\nexport function contains(array, item) {\n    return array.indexOf(item) > -1;\n}\n/** Returns the array without the elements in item */\nexport function without(array, excludedItems) {\n    return array.filter(item => !contains(excludedItems, item));\n}\nexport function union(array, other) {\n    return array.concat(without(other, array));\n}\n/**\n * Returns true if any item returns true.\n */\nexport function some(arr, f) {\n    let i = 0;\n    for (let k = 0; k < arr.length; k++) {\n        if (f(arr[k], k, i++)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Returns true if all items return true.\n */\nexport function every(arr, f) {\n    let i = 0;\n    for (let k = 0; k < arr.length; k++) {\n        if (!f(arr[k], k, i++)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function flatten(arrays) {\n    return [].concat(...arrays);\n}\nexport function fill(val, len) {\n    const arr = new Array(len);\n    for (let i = 0; i < len; ++i) {\n        arr[i] = val;\n    }\n    return arr;\n}\n/**\n * recursively merges src into dest\n */\nexport function mergeDeep(dest, ...src) {\n    for (const s of src) {\n        dest = deepMerge_(dest, s);\n    }\n    return dest;\n}\n// recursively merges src into dest\nfunction deepMerge_(dest, src) {\n    if (typeof src !== 'object' || src === null) {\n        return dest;\n    }\n    for (const p in src) {\n        if (!src.hasOwnProperty(p)) {\n            continue;\n        }\n        if (src[p] === undefined) {\n            continue;\n        }\n        if (typeof src[p] !== 'object' || isArray(src[p]) || src[p] === null) {\n            dest[p] = src[p];\n        }\n        else if (typeof dest[p] !== 'object' || dest[p] === null) {\n            dest[p] = mergeDeep(isArray(src[p].constructor) ? [] : {}, src[p]);\n        }\n        else {\n            mergeDeep(dest[p], src[p]);\n        }\n    }\n    return dest;\n}\nexport function unique(values, f) {\n    const results = [];\n    const u = {};\n    let v;\n    for (const val of values) {\n        v = f(val);\n        if (v in u) {\n            continue;\n        }\n        u[v] = 1;\n        results.push(val);\n    }\n    return results;\n}\n/**\n * Returns true if the two dictionaries disagree. Applies only to defined values.\n */\nexport function isEqual(dict, other) {\n    const dictKeys = keys(dict);\n    const otherKeys = keys(other);\n    if (dictKeys.length !== otherKeys.length) {\n        return false;\n    }\n    for (const key of dictKeys) {\n        if (dict[key] !== other[key]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function setEqual(a, b) {\n    if (a.size !== b.size) {\n        return false;\n    }\n    for (const e of a) {\n        if (!b.has(e)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function hasIntersection(a, b) {\n    for (const key of a) {\n        if (b.has(key)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function prefixGenerator(a) {\n    const prefixes = new Set();\n    for (const x of a) {\n        const splitField = splitAccessPath(x);\n        // Wrap every element other than the first in `[]`\n        const wrappedWithAccessors = splitField.map((y, i) => (i === 0 ? y : `[${y}]`));\n        const computedPrefixes = wrappedWithAccessors.map((_, i) => wrappedWithAccessors.slice(0, i + 1).join(''));\n        computedPrefixes.forEach(y => prefixes.add(y));\n    }\n    return prefixes;\n}\nexport function fieldIntersection(a, b) {\n    return hasIntersection(prefixGenerator(a), prefixGenerator(b));\n}\nexport function isNumeric(num) {\n    return !isNaN(num);\n}\nexport function differArray(array, other) {\n    if (array.length !== other.length) {\n        return true;\n    }\n    array.sort();\n    other.sort();\n    for (let i = 0; i < array.length; i++) {\n        if (other[i] !== array[i]) {\n            return true;\n        }\n    }\n    return false;\n}\n// This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208\nexport const keys = Object.keys;\nexport function vals(x) {\n    const _vals = [];\n    for (const k in x) {\n        if (x.hasOwnProperty(k)) {\n            _vals.push(x[k]);\n        }\n    }\n    return _vals;\n}\nexport function entries(x) {\n    const _entries = [];\n    for (const k in x) {\n        if (x.hasOwnProperty(k)) {\n            _entries.push({\n                key: k,\n                value: x[k]\n            });\n        }\n    }\n    return _entries;\n}\nexport function flagKeys(f) {\n    return keys(f);\n}\nexport function isBoolean(b) {\n    return b === true || b === false;\n}\n/**\n * Convert a string into a valid variable name\n */\nexport function varName(s) {\n    // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _\n    const alphanumericS = s.replace(/\\W/g, '_');\n    // Add _ if the string has leading numbers.\n    return (s.match(/^\\d+/) ? '_' : '') + alphanumericS;\n}\nexport function logicalExpr(op, cb) {\n    if (isLogicalNot(op)) {\n        return '!(' + logicalExpr(op.not, cb) + ')';\n    }\n    else if (isLogicalAnd(op)) {\n        return '(' + op.and.map((and) => logicalExpr(and, cb)).join(') && (') + ')';\n    }\n    else if (isLogicalOr(op)) {\n        return '(' + op.or.map((or) => logicalExpr(or, cb)).join(') || (') + ')';\n    }\n    else {\n        return cb(op);\n    }\n}\n/**\n * Delete nested property of an object, and delete the ancestors of the property if they become empty.\n */\nexport function deleteNestedProperty(obj, orderedProps) {\n    if (orderedProps.length === 0) {\n        return true;\n    }\n    const prop = orderedProps.shift();\n    if (deleteNestedProperty(obj[prop], orderedProps)) {\n        delete obj[prop];\n    }\n    return keys(obj).length === 0;\n}\nexport function titlecase(s) {\n    return s.charAt(0).toUpperCase() + s.substr(1);\n}\n/**\n * Converts a path to an access path with datum.\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function accessPathWithDatum(path, datum = 'datum') {\n    const pieces = splitAccessPath(path);\n    const prefixes = [];\n    for (let i = 1; i <= pieces.length; i++) {\n        const prefix = `[${pieces\n            .slice(0, i)\n            .map(stringValue)\n            .join('][')}]`;\n        prefixes.push(`${datum}${prefix}`);\n    }\n    return prefixes.join(' && ');\n}\n/**\n * Return access with datum to the flattened field.\n *\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function flatAccessWithDatum(path, datum = 'datum') {\n    return `${datum}[${stringValue(splitAccessPath(path).join('.'))}]`;\n}\n/**\n * Replaces path accesses with access to non-nested field.\n * For example, `foo[\"bar\"].baz` becomes `foo\\\\.bar\\\\.baz`.\n */\nexport function replacePathInField(path) {\n    return `${splitAccessPath(path)\n        .map(p => p.replace('.', '\\\\.'))\n        .join('\\\\.')}`;\n}\n/**\n * Remove path accesses with access from field.\n * For example, `foo[\"bar\"].baz` becomes `foo.bar.baz`.\n */\nexport function removePathFromField(path) {\n    return `${splitAccessPath(path).join('.')}`;\n}\n/**\n * Count the depth of the path. Returns 1 for fields that are not nested.\n */\nexport function accessPathDepth(path) {\n    if (!path) {\n        return 0;\n    }\n    return splitAccessPath(path).length;\n}\n/**\n * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.\n */\nexport function getFirstDefined(...args) {\n    for (const arg of args) {\n        if (arg !== undefined) {\n            return arg;\n        }\n    }\n    return undefined;\n}\n// variable used to generate id\nlet idCounter = 42;\n/**\n * Returns a new random id every time it gets called.\n *\n * Has side effect!\n */\nexport function uniqueId(prefix) {\n    const id = ++idCounter;\n    return prefix ? String(prefix) + id : id;\n}\n/**\n * Resets the id counter used in uniqueId. This can be useful for testing.\n */\nexport function resetIdCounter() {\n    idCounter = 42;\n}\nexport function internalField(name) {\n    return isInternalField(name) ? name : `__${name}`;\n}\nexport function isInternalField(name) {\n    return name.indexOf('__') === 0;\n}\n//# sourceMappingURL=util.js.map"],"sourceRoot":""}